import * as moment from 'moment'
import { observable } from 'mobx'
import { TypeSystem, BaseDataModel } from 'Cnsys.Core'
import { moduleContext } from '../ModuleContext'
import { IndentTypes, PersonType } from './ModelsAutoGenerated';
import { DomainModelHepler } from '..';

@TypeSystem.typeDecorator('Person', moduleContext.moduleName)
export class Person extends BaseDataModel {

    @observable private _indent: string = null;

    @TypeSystem.propertyDecorator('string')
    public set indent(val: string) {

        this.indentType = null;

        if (val != null && val != undefined && val != "")
            this.indentType = DomainModelHepler.getIdentType(val);

        this._indent = val;
    }

    public get indent(): string {
        return this._indent;
    }

    @observable private _initialName: string = null;

    @TypeSystem.propertyDecorator('string')
    public set initialName(val: string) {
        this._initialName = val;
    }

    public get initialName(): string {
        return this._initialName;
    }

    @observable private _name: string = null;

    @TypeSystem.propertyDecorator('string')
    public set name(val: string) {
        this._name = val;
    }

    public get name(): string {
        return this._name;
    }

    @observable private _indentType: IndentTypes = null;

    @TypeSystem.propertyDecorator(IndentTypes ? IndentTypes : moduleContext.moduleName + '.' + 'IndentTypes')
    public set indentType(val: IndentTypes) {
        this._indentType = val;
    }

    public get indentType(): IndentTypes {
        return this._indentType;
    }

    @observable private _countryID: number = null;

    @TypeSystem.propertyDecorator('number')
    public set countryID(val: number) {
        this._countryID = val;
    }

    public get countryID(): number {
        return this._countryID;
    }

    @observable private _countryName: string = null;

    @TypeSystem.propertyDecorator('string')
    public set countryName(val: string) {
        this._countryName = val;
    }

    public get countryName(): string {
        return this._countryName;
    }


    @observable private _competentAuthorityForRegistration: string = null;

    @TypeSystem.propertyDecorator('string')
    public set competentAuthorityForRegistration(val: string) {
        this._competentAuthorityForRegistration = val;
    }

    public get competentAuthorityForRegistration(): string {
        return this._competentAuthorityForRegistration;
    }


    @observable private _registrationNumber: string = null;

    @TypeSystem.propertyDecorator('string')
    public set registrationNumber(val: string) {
        this._registrationNumber = val;
    }

    public get registrationNumber(): string {
        return this._registrationNumber;
    }


    @observable private _foreignRegisterCode: string = null;

    @TypeSystem.propertyDecorator('string')
    public set foreignRegisterCode(val: string) {
        this._foreignRegisterCode = val;
    }

    public get foreignRegisterCode(): string {
        return this._foreignRegisterCode;
    }


    @observable private _foreignLegalFormCode: string = null;

    @TypeSystem.propertyDecorator('string')
    public set foreignLegalFormCode(val: string) {
        this._foreignLegalFormCode = val;
    }

    public get foreignLegalFormCode(): string {
        return this._foreignLegalFormCode;
    }


    @observable private _countryCode: string = null;

    @TypeSystem.propertyDecorator('string')
    public set countryCode(val: string) {
        this._countryCode = val;
    }

    public get countryCode(): string {
        return this._countryCode;
    }


    @observable private _countryCodeBRIS: string = null;

    @TypeSystem.propertyDecorator('string')
    public set countryCodeBRIS(val: string) {
        this._countryCodeBRIS = val;
    }

    public get countryCodeBRIS(): string {
        return this._countryCodeBRIS;
    }


    @observable private _legalForm: string = null;

    @TypeSystem.propertyDecorator('string')
    public set legalForm(val: string) {
        this._legalForm = val;
    }

    public get legalForm(): string {
        return this._legalForm;
    }


    @observable private _position: string = null;

    @TypeSystem.propertyDecorator('string')
    public set position(val: string) {
        this._position = val;
    }

    public get position(): string {
        return this._position;
    }


    @observable private _isForeignTrader: boolean = null;

    @TypeSystem.propertyDecorator('boolean')
    public set isForeignTrader(val: boolean) {
        this._isForeignTrader = val;
    }

    public get isForeignTrader(): boolean {
        return this._isForeignTrader;
    }

    // това пропърти го няма в домейн модела, добавено е заради F702a
    @observable private _foreignRegister: string = null;

    @TypeSystem.propertyDecorator('string')
    public set foreignRegister(val: string) {
        this._foreignRegister = val;
    }

    public get foreignRegister(): string {
        return this._foreignRegister;
    }

    // това пропърти го няма в домейн модела, добавено е заради F702a
    @observable private _foreignLegalForm: string = null;

    @TypeSystem.propertyDecorator('string')
    public set foreignLegalForm(val: string) {
        this._foreignLegalForm = val;
    }

    public get foreignLegalForm(): string {
        return this._foreignLegalForm;
    }

    @observable private _nameAndLegalFormText: string = null;

    @TypeSystem.propertyDecorator('string')
    public set nameAndLegalFormText(val: string) {
        this._nameAndLegalFormText = val;
    }

    public get nameAndLegalFormText(): string {
        return this._nameAndLegalFormText;
    }

    @observable private _type: PersonType = null;

    @TypeSystem.propertyDecorator(PersonType ? PersonType : moduleContext.moduleName + '.' + 'PersonType')
    public set type(val: PersonType) {
        this._type = val;
    }

    public get type(): PersonType {
        return this._type;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}