import { ErrorLevels, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { DomainModelHepler, IndentTypes, IndentValidationMode, IPersonValidationContext, Person, ValidatorHelpers } from '../../';
import { Applicant, Applicants } from '../ModelsAutoGenerated';
import { SimpleAddressValidator } from './AddressValidator';
import { IApplicationFormValidationContext } from './ApplicationFormValidationContext';

export class ApplicantsValidator extends EPZEUBaseValidator<Applicants, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.applicantsList).setCollectionValidator(new ApplicantValidator());
    }

    public validate(obj: Applicants): boolean {

        let isValid = true;
        let isBaseValid = super.validate(obj);

        if (obj.applicantsList.length > 1) {
            for (var i = 0; i < obj.applicantsList.length; i++) {

                if (DomainModelHepler.isObjectEmpty(obj.applicantsList[i])) {
                    obj.applicantsList[i].clearErrors(true);
                    obj.applicantsList[i].addError(this.getMessage('CR_APP_00063_E'), ErrorLevels.Error);
                    isValid = false;
                }
            }
        }

        isValid = isValid && isBaseValid;

        return isValid;
    }
}

export class ApplicantValidator extends EPZEUBaseValidator<Applicant, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new ApplicantPersonValidator());
    }

    public validate(obj: Applicant): boolean {

        let isValid = super.validate(obj);

        obj.person.setAllErrorsLevel(ErrorLevels.Error);

        if (ObjectHelper.isStringNullOrEmpty(obj.person.name)) {
            //Грешката се визуализира при невъведено име на физическо лице 
            obj.person.addError('name', this.getMessage('GL_INPUT_PERSON_NAME_E'), ErrorLevels.Error);
            isValid = false;
        }

        if (ObjectHelper.isStringNullOrEmpty(obj.person.indent)) {
            //Грешката трябва да се визуализира при непопълнена стойност в полето ЕГН/ЛНЧ/Дата на раждане            
            obj.person.addError('indent', this.getMessage('GL_INPUT_PERSON_ID_BIRTHDATE_E'), ErrorLevels.Error);
            isValid = false;
        }

        let idType = DomainModelHepler.getIdentType(obj.person.indent);

        obj.address.clearErrors();
        if (idType == IndentTypes.BirthDate) {

            if (ObjectHelper.isStringNullOrEmpty(obj.birthPlace.country) || ObjectHelper.isStringNullOrEmpty(obj.birthPlace.place)) {
                obj.addError('birthPlace', this.getMessage('GL_INPUT_BIRTHPLACE_E'), ErrorLevels.Error);

                isValid = false;
            } else {
                let isValidAddress = new SimpleAddressValidator();
                isValidAddress.setValidationContext(this.getValidationContext());

                if (!isValidAddress.validate(obj.address, true)) {
                    obj.address.addError(this.getMessage('GL_ADDRESS_ERROR_E'), ErrorLevels.Error);

                    isValid = false;
                }
            }
        }

        return isValid;
    }
}

class ApplicantPersonValidator extends EPZEUBaseValidator<Person, IPersonValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.indent).matches('^[0-9]{6,10}$').withMessage(this.getMessage('GL_INVALID_IDENTIFIER_E')).when(m => !ObjectHelper.isStringNullOrEmpty(m.indent) && !m.isForeignTrader); //допускат се само цифри. 
        this.ruleFor(m => m.name).matches('^[А-Яа-яA-Za-z-\' ]+$').withMessage(this.getMessage('GL_INPUT_CORRECT_NAME_E'));
    }

    public validate(obj: Person): boolean {

        let isValid = super.validate(obj);
        let idType = DomainModelHepler.getIdentType(obj.indent);
        obj.clearErrors(true);

        if (!ObjectHelper.isStringNullOrEmpty(obj.indent)) {
            if (idType == IndentTypes.Undefined || !DomainModelHepler.isValidIdentType(IndentValidationMode.EgnLnchBd, idType)) {
                //Грешката се визуализира когато е попълнена невалидна стойност в поле идентификатор (различна от ЕГН/ЛНЧ/Дата на раждане)
                obj.addError('indent', this.getMessage('GL_INVALID_IDENTIFIER_E'))
                isValid = false;
            }
        }

        // Грешката се визуализира когато въведеното име на физическо лице не отговаря на Валидация за попълване на име на физическо лице
        if (!ValidatorHelpers.isValidPersonName(obj.name)) {
            obj.addError('name', this.getMessage('GL_INPUT_CORRECT_NAME_E'));
            isValid = false;
        }

        return isValid;
    }
}