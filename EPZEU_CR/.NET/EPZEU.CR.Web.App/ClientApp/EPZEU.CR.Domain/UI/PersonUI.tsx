import { ArrayHelper, ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, ViewMode, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControl, AutoComplete, Button, Country, EPZEUBaseComponent, ForeignCommercialRegister, ForeignLegalForm, LegalForm, Nomenclatures } from 'EPZEU.Core';
import { DeedSummary } from "EPZEU.CR.Core";
import { action, observable, runInAction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { IndentTypes } from "../Models/ModelsAutoGenerated";
import { Person } from "../Models/Person";
import { ValidatorHelpers } from "../Models/Validators";
import { DeedsDataService } from "../Services/DeedsDataService";
import { InputInfoUI } from "./CommonInfoComponents";

interface PersonProps extends BaseProps, AsyncUIProps {
    PersonType?: PersonTypes;
    onUICChange?: (uic?: string) => void | Promise<void>;
    showLegalFormDropdownDisabled?: boolean;
    onHasForeignTraderCheckChanged?: (e: any) => void;
    disablePersonUI?: boolean;
    onExtractCompany?: (deed?: DeedSummary) => void;
}

const infoTextKeys1 = ["CR_APP_00081_I"];

export enum PersonTypes {
    Undefined,
    Applicant,
    Acquisition,
    Manager,
    ShareTransfer,
    SoleCapitalOwner,
    Partner,
    BranchManager,
    TransformingCompany,
    TransformingCompany702a802a,
    TransformingNPOs702b,
    Successor703,
    Successor803,
    Successor803V32,
    Successor803Fusion,
    Trader,
    ActsCompanies,
    AssignedManager,
    Representative101,
    Representative102,
    Representative103,
    Representative503,
    LimitedLialibilityPartner,
    UnlimitedLiabilityPartner,
    Pledgor,
    Distraint,
    Description406,
    Representative,
    RepresentativePerson,
    Representative534,
    RepresentativePerson534,
    CoOperative,
    Director,
    Supervisor,
    EuropeanHoldingCompanyAsShareholder,
    ChairMan,
    Owner,
    BoardManager,
    Trustee13,
    CommissionMember15b,
    UnlimitedLiabilityPartnersEUIE,
    PersonConcerned,
    Liquidator,
    DebtorOverSecureClaim,
    AtPawnCreditor,
    Depositor,
    ManagerOfTradeEnterprise,
    DistraintData,
    Partner218,
    PledgeExecutionDepozitar,
    Depozitar,
    Procurator,
    DemandForAppointingExpert,
    OffshoreDirectControlCompanyRepresentative,
    OffshoreNoDirectControlCompanyRepresentative,
    F5500_ActualOwner,
    ContactPerson550aUI,
    EntryIntoPledgeCreditorRight,
    EntryIntoPledgeCreditorRight2
}

export enum IndentValidationMode {
    All, //egn, lnch, Uic, bulstat, birthdate
    EgnLnchBd, //egn, lnch, birthdate
    EgnLnch, //egn, lnch
    UIC,
    EGN
}

@observer export class PersonUIImpl extends EPZEUBaseComponent<PersonProps, Person> {
    private hasForeignTrader: boolean;
    private showCountryTextbox: boolean;
    private hideNameAndLegalFormText: boolean;
    private personUIId: string;
    private identValueMaxLength: number;

    private _deedsDataService: DeedsDataService;
    @observable private _legalForms: LegalForm[] = [];
    @observable private _foreignLegalForms: ForeignLegalForm[] = [];
    @observable private _foreignRegisters: ForeignCommercialRegister[] = [];
    @observable private _isOtherRegisterSelected: boolean;
    @observable private _isOtherLegalFormSelected: boolean;
    @observable private _shouldRenderAutocompleteForRegister: boolean;
    @observable private _shouldRenderAutocompleteForLegalForm: boolean;

    constructor(props?: any) {
        super(props);

        this.selectCountry = this.selectCountry.bind(this);
        this.showCountryValue = this.showCountryValue.bind(this);
        this.handleCountrySelectOption = this.handleCountrySelectOption.bind(this);
        this.handleCountryChangeCallBack = this.handleCountryChangeCallBack.bind(this);
        this.onSearch = this.onSearch.bind(this);
        this.getLegalForms = this.getLegalForms.bind(this);
        this.getCompanyByUIC = this.getCompanyByUIC.bind(this);
        this.selectRegistry = this.selectRegistry.bind(this);
        this.handleRegistrySelectOption = this.handleRegistrySelectOption.bind(this);
        this.handleRegistryChange = this.handleRegistryChange.bind(this);
        this.selectLegalForm = this.selectLegalForm.bind(this);
        this.handleLegalFormSelectOption = this.handleLegalFormSelectOption.bind(this);
        this.handleLegalFormChange = this.handleLegalFormChange.bind(this);
        this.checkIfOtherRegisterSelected = this.checkIfOtherRegisterSelected.bind(this);
        this.checkIfOtherLegalFormSelected = this.checkIfOtherLegalFormSelected.bind(this);
        this.onUICChange = this.onUICChange.bind(this);
        this.checkIfAutocompleteForRegisterShouldBeRendered = this.checkIfAutocompleteForRegisterShouldBeRendered.bind(this);
        this.initializeFor702a802a = this.initializeFor702a802a.bind(this);
        this.getForeignLegalForms = this.getForeignLegalForms.bind(this);
        this.getForeignRegisters = this.getForeignRegisters.bind(this);
        
        this._deedsDataService = new DeedsDataService();
        this.hasForeignTraderFunc();
        this.renderCountryTextbox();
        this.showExtractDataButton && this.getLegalForms();
        this.initializeFor702a802a();

        this.personUIId = ObjectHelper.newGuid();
    }

    componentDidMount() {
        if (this.props.disablePersonUI)
            $('#' + this.personUIId).find('input, textarea, select, button').attr('disabled', 'disabled');

        if (this.props.viewMode == ViewMode.Display
            && this.props.PersonType == PersonTypes.DemandForAppointingExpert
            && ObjectHelper.isStringNullOrEmpty(this.model.nameAndLegalFormText)) {

            this.getCompanyByUIC();
        }
    }

    componentDidUpdate(prevProps: PersonProps) {
        if (this.props.disablePersonUI != prevProps.disablePersonUI) {

            var elements = $('#' + this.personUIId).find('input, textarea, select, button');
            if (this.props.disablePersonUI)
                elements.attr('disabled', 'disabled');
            else
                elements.removeAttr('disabled');
        }
    }

    renderEdit(): JSX.Element {
        return <div id={this.personUIId}>
            {this.showExtractDataButton && this.renderIdentUI()} {/*Ako има "Извлечи" бутон, IdentUI се рисува над име/фирма*/}
            <div className="row">
                <div className="form-group col">
                    {this.renderNameLabel()}
                    {this.props.PersonType == PersonTypes.DemandForAppointingExpert
                        ? this.textBoxFor(m => m.nameAndLegalFormText)
                        : this.textBoxFor(m => m.name)}
                </div>
            </div>
            {!this.showExtractDataButton && this.renderIdentUI()} {/*Ako няма "Извлечи" бутон, IdentUI се рисува под име/фирма*/}
            {this.hasForeignTrader || this.showCountryTextbox ?
                <div className="row">
                    {
                        this.hasForeignTrader
                            ? <div className="form-group col-sm-6 inline-control">
                                {this.showCountryTextbox ?
                                    <label className="d-none d-sm-block d-md-block" aria-hidden="true">&nbsp;</label>
                                    : null}
                                <div className="form-inline">
                                    <div className="custom-control-inline custom-control custom-checkbox">
                                        {this.renderForeignTrader()}
                                    </div>
                                </div>
                            </div>
                            : null
                    }
                    {
                        (this.showCountryTextbox) &&
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.countryName, 'GL_COUNTRY_L')}
                            {this.showCountryTextboxDisabled ?
                                <input className="form-control" value={this.model.countryName} disabled />
                                :
                                <AutoComplete {...this.bind(m => m.countryName)}
                                    selector={this.selectCountry}
                                    showValue={this.showCountryValue}
                                    handleSelectCallback={this.handleCountrySelectOption}
                                    handleChangeCallback={this.handleCountryChangeCallBack}
                                    hasSelectedValue={!!this.model.countryID}
                                    triggerLength={1}
                                    attributes={attributesClassFormControl} />
                            }
                        </div>
                    }
                </div>
                : null}
            {(this.model.isForeignTrader && this.props.PersonType == PersonTypes.TransformingCompany702a802a) &&
                <>
                    <div className="row">
                        {this._shouldRenderAutocompleteForRegister ?
                            <div className="form-group col-sm-6">

                                {this.labelFor(m => m.foreignRegisterCode, 'CR_GL_COMPANY_TRADE_CENTRAL_REGISTER_L')}
                                <AutoComplete {...this.bind(m => m.foreignRegister)}
                                    selector={this.selectRegistry}
                                    showValue={this.showRegisterValue}
                                    handleSelectCallback={this.handleRegistrySelectOption}
                                    hasSelectedValue={this.model.foreignRegisterCode ? true : false}
                                    handleChangeCallback={this.handleRegistryChange}
                                    triggerLength={0}
                                    attributes={attributesClassFormControl} />
                            </div>
                            :
                            <div className="form-group col-sm-6">
                                {this.labelFor(m => m.foreignRegisterCode, 'GL_REGISTER_L')}
                                {this.textBoxFor(m => m.competentAuthorityForRegistration)}
                            </div>

                        }
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.registrationNumber, 'CR_APP_ENTRY_NO_REGISTER_L')}
                            {this.textBoxFor(m => m.registrationNumber)}
                        </div>
                    </div>
                    {this.isOtherRegisterSelected &&
                        <div className="row">
                            <div className="form-group col-sm-6">
                                {this.labelFor(m => m.foreignRegisterCode, 'GL_REGISTER_L')}
                                {this.textBoxFor(m => m.competentAuthorityForRegistration)}
                            </div>
                        </div>
                    }
                    {this._shouldRenderAutocompleteForLegalForm ?
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.foreignLegalFormCode, 'GL_LEGAL_FORM_L')}
                                <AutoComplete {...this.bind(m => m.foreignLegalForm)}
                                    selector={this.selectLegalForm}
                                    showValue={this.showLegalFormValue}
                                    handleSelectCallback={this.handleLegalFormSelectOption}
                                    hasSelectedValue={this.model.foreignLegalFormCode ? true : false}
                                    handleChangeCallback={this.handleLegalFormChange}
                                    triggerLength={0}
                                    attributes={attributesClassFormControl} />
                            </div>
                        </div>
                        :
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.foreignLegalFormCode, 'GL_LEGAL_FORM_L')}
                                {this.textBoxFor(m => m.legalForm)}
                            </div>
                        </div>
                    }
                    {this.isOtherLegalFormSelected &&
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.foreignLegalFormCode, 'GL_LEGAL_FORM_L')}
                                {this.textBoxFor(m => m.legalForm)}
                            </div>
                        </div>
                    }
                </>
            }
            {this.props.PersonType == PersonTypes.Representative103 ? this.renderPositionUI() : null}
        </div>
    }

    renderDisplay(): JSX.Element {

        //Когато имаме disable за PersonUI не показваме данни в Display TRIR-3652
        if (this.props.disablePersonUI)
            return null;

        let legalFormFromNomenclature = ObjectHelper.isStringNullOrEmpty(this.model.legalForm) ? null : this._legalForms.filter(legForm => legForm.id == Number(this.model.legalForm))[0];
        let legalFormName = legalFormFromNomenclature ? legalFormFromNomenclature.name : this.model.legalForm;

        let foreignLegalFormFromNomenclature = ObjectHelper.isStringNullOrEmpty(this.model.foreignLegalFormCode) ? null : this._foreignLegalForms.filter(legForm => legForm.code == this.model.foreignLegalFormCode)[0];
        let foreignLegalFormName = foreignLegalFormFromNomenclature ? foreignLegalFormFromNomenclature.name : this.model.foreignLegalForm;

        let foreignRegisterFromNomenclature = ObjectHelper.isStringNullOrEmpty(this.model.foreignRegisterCode) ? null : this._foreignRegisters.filter(reg => reg.code == this.model.foreignRegisterCode)[0];
        let foreignRegisterName = foreignRegisterFromNomenclature ? foreignRegisterFromNomenclature.nameOriginal : this.model.foreignRegister;

        if (this.props.PersonType == PersonTypes.DemandForAppointingExpert)
            return this.renderDemandForAppointingExpertDisplay();

        return (

            <div>
                {!ObjectHelper.isStringNullOrEmpty(this.model.name) ? <>{this.model.name}</> : null}
                {!ObjectHelper.isStringNullOrEmpty(this.model.indent) ?
                    <>
                        {!ObjectHelper.isStringNullOrEmpty(this.model.name) ? <>,&nbsp;</> : null}
                        {this.getResource(this.getIdentResourceKeyForDisplay())}: {this.model.indent}
                    </> : null}
                {this.model.isForeignTrader ?
                    <>
                        {(!ObjectHelper.isStringNullOrEmpty(this.model.name) || !ObjectHelper.isStringNullOrEmpty(this.model.indent)) ? <>,&nbsp;</> : null}
                        {this.getResource("CR_GL_FOREIGN_LEGAL_ENTITY_L")}
                    </> : null}
                {!ObjectHelper.isStringNullOrEmpty(this.model.countryName) ?
                    <>
                        {(!ObjectHelper.isStringNullOrEmpty(this.model.name) || !ObjectHelper.isStringNullOrEmpty(this.model.indent) || this.model.isForeignTrader) ? <>,&nbsp;</> : null}
                        {this.getResource('GL_COUNTRY_L')}: {this.model.countryName}
                    </> : null}
                {(!ObjectHelper.isStringNullOrEmpty(this.model.foreignLegalFormCode) || (!ObjectHelper.isStringNullOrEmpty(this.model.legalForm) && this.model.legalForm != '-1')) ?
                    <>
                        <br />
                        {this.getResource('GL_LEGAL_FORM_L')}: {this.isOtherLegalFormSelected || ObjectHelper.isStringNullOrEmpty(this.model.foreignLegalFormCode) ? legalFormName : foreignLegalFormName}
                    </> : null}
                {!ObjectHelper.isStringNullOrEmpty(this.model.registrationNumber) || (!ObjectHelper.isStringNullOrEmpty(this.model.foreignRegister) || !ObjectHelper.isStringNullOrEmpty(this.model.competentAuthorityForRegistration)) ?
                    <>
                        <br />
                    </> : null}
                {(!ObjectHelper.isStringNullOrEmpty(this.model.foreignRegister)) || (!ObjectHelper.isStringNullOrEmpty(this.model.foreignRegisterCode) || (!ObjectHelper.isStringNullOrEmpty(this.model.competentAuthorityForRegistration) && this.props.PersonType != PersonTypes.UnlimitedLiabilityPartnersEUIE)) ?
                    <>
                        {((this.props.PersonType == PersonTypes.TransformingCompany702a802a) && (ObjectHelper.isStringNullOrEmpty(this.model.competentAuthorityForRegistration))) ? this.getResource('CR_GL_COMPANY_TRADE_CENTRAL_REGISTER_L') : this.getResource('GL_REGISTER_L')}:&nbsp;
                        {(this.isOtherRegisterSelected || this.props.PersonType == PersonTypes.EuropeanHoldingCompanyAsShareholder || ObjectHelper.isStringNullOrEmpty(this.model.foreignRegisterCode))
                            ? this.model.competentAuthorityForRegistration : foreignRegisterName}
                    </> : null}
                {(!ObjectHelper.isStringNullOrEmpty(this.model.competentAuthorityForRegistration) && this.props.PersonType == PersonTypes.UnlimitedLiabilityPartnersEUIE) ?
                    <>
                        {this.getResource('CR_GL_AUTHORITY_REGISTRATION_L')}: {this.model.competentAuthorityForRegistration}
                    </> : null}
                {!ObjectHelper.isStringNullOrEmpty(this.model.registrationNumber) ?
                    <>
                        {(!ObjectHelper.isStringNullOrEmpty(this.model.foreignRegister)) || (!ObjectHelper.isStringNullOrEmpty(this.model.foreignRegisterCode) || !ObjectHelper.isStringNullOrEmpty(this.model.competentAuthorityForRegistration)) ?
                            <>,&nbsp;</> : null}
                        {this.getResource('CR_GL_REGISTRATION_NUMBER_L')}: {this.model.registrationNumber}
                    </> : null}
                {(this.props.PersonType == PersonTypes.Representative103 && !ObjectHelper.isStringNullOrEmpty(this.model.position)) ?
                    <>
                        <br />
                        {this.renderPositionLabel()}: {this.model.position}
                    </> : null}
            </div>
        );
    }

    private renderDemandForAppointingExpertDisplay(): JSX.Element {
        return <>
            {
                !ObjectHelper.isStringNullOrEmpty(this.model.indent)
                    ? <div className="field-container">
                        <h3 className="field-title field-title--preview">{this.getResource("GL_COMPANY_ID_L")}</h3>
                        <div className="record-container record-container--preview">
                            <p className="field-text">{this.model.indent}</p>
                        </div>
                    </div>
                    : null
            }
            {
                !ObjectHelper.isStringNullOrEmpty(this.model.nameAndLegalFormText)
                    ? <div className="field-container">
                        <h3 className="field-title field-title--preview">{this.getResource("CR_GL_COMPANY_NAME_L")}</h3>
                        <div className="record-container record-container--preview">
                            <p className="field-text">{this.model.nameAndLegalFormText}</p>
                        </div>
                    </div>
                    : null
            }
        </>
    }

    private renderPositionUI(): JSX.Element {
        return (
            this.shouldRenderIdent ?
                <div className="row">
                    <div className="form-group col-sm-6">
                        <label> {this.renderPositionLabel()} </label>
                        {this.textBoxFor(m => m.position)}
                    </div>
                </div>
                : null
        );
    }

    private renderIdentUI(): JSX.Element {
        return (
            this.shouldRenderIdent ?
                <>
                    <div className="row">
                        <div className="col-12">
                            {this.labelFor(m => m.indent, this.getIdentResourceKeyAndDefineIdentMaxValueLength())}
                        </div>
                    </div>
                    <div className="row">
                        <div className="form-group col-sm-6">

                            {this.textBoxFor(m => m.indent, { className: 'form-control', maxLength: this.identValueMaxLength ? this.identValueMaxLength : 10 }, this.onUICChange)}
                            {this.renderIdentInfo()}
                            {this.hideNameAndLegalFormText === true || ObjectHelper.isStringNullOrEmpty(this.model.nameAndLegalFormText) ? null : <div className="form-text">{this.model.nameAndLegalFormText}</div>}
                        </div>
                        {
                            this.showExtractDataButton &&
                            <>
                                <div className="form-group col-auto">
                                    <Button type="button" className="btn btn-outline-light text-dark" lableTextKey={"GL_EXTRACT_DATA_L"} onClick={this.onSearch}>
                                        <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i></Button>
                                </div>
                            </>
                        }
                    </div>
                </>
                : null
        );
    }

    //#region
    //Render helpers

    onSearch(): any {
        this.model.removeError('indent');
        // Ако е запазена чернова с невалиден UIC, при първоначалното й зареждане в модела няма да има грешки.
        if (!ValidatorHelpers.isValidUIC(this.model.indent) && this.model.getPropertyErrors('indent').length == 0)
            this.model.addError('indent', this.getResource('GL_INPUT_VALID_ID_E'))

        this.getCompanyByUIC();
    }

    private getCompanyByUIC(): void {
        if (ValidatorHelpers.isValidUIC(this.model.indent)) {
            this.props.registerAsyncOperation(this._deedsDataService.getDeedSummary(this.model.indent).then((report) => {
                runInAction(() => {

                    if (!report) {
                        this.model.removeError('indent');
                        this.model.addError('indent', this.getResource('GL_NOT_FOUND_COMPANY_E'));
                        this.model.name = '';
                    } else {

                        this.model.name = report.companyName;
                        this.model.initialName = report.companyName;
                        this.model.nameAndLegalFormText = report.companyFullName;

                        if (this.props.PersonType == PersonTypes.TransformingCompany702a802a && (!this.model.isForeignTrader)) {
                            this.props.registerAsyncOperation(Nomenclatures.getBGCountry().then(bulgaria => {
                                runInAction(() => {
                                    this.model.countryID = bulgaria.id;
                                    this.model.countryCode = bulgaria.code;
                                    this.model.countryCodeBRIS = bulgaria.brisCountryCode;
                                })
                            }));
                        }
                    }

                    if (this.props.onExtractCompany)
                        this.props.onExtractCompany(report);
                });
            }));
        }
    }

    renderPositionLabel() {
        switch (this.props.PersonType) {
            case PersonTypes.Representative103:
                return this.getResource('CR_APP_POSITION_L')
            default:
                return "";
        }
    }

    renderNameLabel() {
        switch (this.props.PersonType) {
            case PersonTypes.Trader:
            case PersonTypes.Manager:
            case PersonTypes.BranchManager:
            case PersonTypes.ChairMan:
            case PersonTypes.BoardManager:
            case PersonTypes.RepresentativePerson:
            case PersonTypes.RepresentativePerson534:
            case PersonTypes.Representative102:
            case PersonTypes.Representative103:
            case PersonTypes.OffshoreDirectControlCompanyRepresentative:
            case PersonTypes.OffshoreNoDirectControlCompanyRepresentative:
            case PersonTypes.F5500_ActualOwner:
            case PersonTypes.ContactPerson550aUI:
            case PersonTypes.Representative503:
            case PersonTypes.Liquidator:
            case PersonTypes.Procurator:
            case PersonTypes.PledgeExecutionDepozitar:
            case PersonTypes.Trustee13:
            case PersonTypes.CommissionMember15b:
            case PersonTypes.Depositor:
                return this.labelFor(m => m.name, 'GL_PERSON_NAME_L'); //Име
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingCompany702a802a:
            case PersonTypes.Acquisition:
            case PersonTypes.ActsCompanies:
            case PersonTypes.EuropeanHoldingCompanyAsShareholder:
                return this.labelFor(m => m.name, 'GL_COMPANY_L'); //Фирма
            case PersonTypes.CoOperative:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.Successor803Fusion:
            case PersonTypes.Owner:
            case PersonTypes.TransformingNPOs702b:
                return this.labelFor(m => m.name, 'GL_NAME_L') //Наименование
            case PersonTypes.DemandForAppointingExpert:
                return this.labelFor(m => m.name, 'CR_GL_COMPANY_NAME_L') // Фирма/Наименование
            default:
                return this.labelFor(m => m.indent, 'CR_GL_00005_L'); //Име/Фирма/Наименование
        }
    }

    getIdentResourceKeyAndDefineIdentMaxValueLength() {
        switch (this.props.PersonType) {
            case PersonTypes.Acquisition:
                this.identValueMaxLength = 9;
                return 'CR_APP_ID_ALIENATED_HEIR_L';//ЕИК на отчуждителя/наследодателя
            case PersonTypes.Trader:
            case PersonTypes.Manager:
            case PersonTypes.BranchManager:
            case PersonTypes.Procurator:
            case PersonTypes.ChairMan:
            case PersonTypes.BoardManager:
            case PersonTypes.RepresentativePerson:
            case PersonTypes.RepresentativePerson534:
            case PersonTypes.Representative102:
            case PersonTypes.Representative103:
            case PersonTypes.OffshoreDirectControlCompanyRepresentative:
            case PersonTypes.OffshoreNoDirectControlCompanyRepresentative:
            case PersonTypes.F5500_ActualOwner:
            case PersonTypes.ContactPerson550aUI:
            case PersonTypes.Representative503:
            case PersonTypes.Liquidator:
            case PersonTypes.PledgeExecutionDepozitar:
            case PersonTypes.Trustee13:
            case PersonTypes.CommissionMember15b:
            case PersonTypes.Depositor:
                this.identValueMaxLength = 10;
                return 'CR_GL_00003_L';//ЕГН/ЛНЧ/Дата на раждане
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingCompany702a802a:
            case PersonTypes.ActsCompanies:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.Successor803Fusion:
            case PersonTypes.CoOperative:
            case PersonTypes.EuropeanHoldingCompanyAsShareholder:
            case PersonTypes.DemandForAppointingExpert:
            case PersonTypes.TransformingNPOs702b:
                this.identValueMaxLength = 9;
                return 'GL_COMPANY_ID_L';//ЕИК
            case PersonTypes.Owner:
                this.identValueMaxLength = 9;
                return 'CR_GL_CODE_BULSTAT_L';//Код по БУЛСТАТ            
            default:
                this.identValueMaxLength = 10;
                return 'CR_APP_00004_L';//ЕГН/ЛНЧ/ЕИК/БУЛСТАТ/Дата на раждане
        }
    }

    getIdentResourceKeyForDisplay() {
        switch (this.props.PersonType) {
            case PersonTypes.Acquisition:
                return 'CR_APP_ID_ALIENATED_HEIR_L';//ЕИК на отчуждителя/наследодателя
            case PersonTypes.Trader:
            case PersonTypes.Manager:
            case PersonTypes.BranchManager:
            case PersonTypes.Procurator:
            case PersonTypes.ChairMan:
            case PersonTypes.BoardManager:
            case PersonTypes.RepresentativePerson:
            case PersonTypes.RepresentativePerson534:
            case PersonTypes.Representative102:
            case PersonTypes.Representative103:
            case PersonTypes.OffshoreDirectControlCompanyRepresentative:
            case PersonTypes.OffshoreNoDirectControlCompanyRepresentative:
            case PersonTypes.F5500_ActualOwner:
            case PersonTypes.ContactPerson550aUI:
            case PersonTypes.Representative503:
            case PersonTypes.Liquidator:
            case PersonTypes.PledgeExecutionDepozitar:
                if (this.model.indentType == IndentTypes.EGN)
                    return 'GL_BULGARIAN_PERSON_ID_L';
                else if (this.model.indentType == IndentTypes.LNCH)
                    return 'GL_FOREIGN_PERSON_ID_L';
                else if (this.model.indentType == IndentTypes.BirthDate)
                    return 'GL_BIRTH_DATE_L';
                else
                    return 'CR_GL_00003_L';//ЕГН/ЛНЧ/Дата на раждане
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingNPOs702b:
            case PersonTypes.TransformingCompany702a802a:
            case PersonTypes.ActsCompanies:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.Successor803Fusion:
            case PersonTypes.CoOperative:
            case PersonTypes.EuropeanHoldingCompanyAsShareholder:
            case PersonTypes.DemandForAppointingExpert:
                return 'GL_COMPANY_ID_L';//ЕИК
            case PersonTypes.Owner:
                return 'CR_GL_CODE_BULSTAT_L';//Код по БУЛСТАТ           
            default:
                if (this.model.indentType == IndentTypes.EGN)
                    return 'GL_BULGARIAN_PERSON_ID_L';
                else if (this.model.indentType == IndentTypes.LNCH)
                    return 'GL_FOREIGN_PERSON_ID_L';
                else if (this.model.indentType == IndentTypes.BirthDate)
                    return 'GL_BIRTH_DATE_L';
                else if (this.model.indentType == IndentTypes.UIC)
                    return 'GL_COMPANY_ID_L';
                else if (this.model.indentType == IndentTypes.Bulstat)
                    return 'GL_BULSTAT_L';
                else
                    return 'CR_APP_00004_L';//ЕГН/ЛНЧ/ЕИК/БУЛСТАТ/Дата на раждане
        }
    }

    renderIdentInfo() {
        switch (this.props.PersonType) {
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingNPOs702b:
            case PersonTypes.TransformingCompany702a802a:
            case PersonTypes.Acquisition:
            case PersonTypes.ActsCompanies:
            case PersonTypes.CoOperative:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.Successor803Fusion:
            case PersonTypes.Owner:
            case PersonTypes.DemandForAppointingExpert:
            case PersonTypes.EuropeanHoldingCompanyAsShareholder: return null;
            default: return <InputInfoUI infoTextKey={infoTextKeys1} />; //За чуждестранно физическо лице без ЛНЧ въведете дата на раждане.
        }
    }

    hasForeignTraderFunc() {
        switch (this.props.PersonType) {
            case PersonTypes.Manager:
            case PersonTypes.BranchManager:
            case PersonTypes.Procurator:
            case PersonTypes.Trader:
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingNPOs702b:
            case PersonTypes.CoOperative:
            case PersonTypes.Acquisition:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.Successor803Fusion:
            case PersonTypes.ActsCompanies:
            case PersonTypes.Pledgor:
            case PersonTypes.Distraint:
            case PersonTypes.RepresentativePerson:
            case PersonTypes.RepresentativePerson534:
            case PersonTypes.ChairMan:
            case PersonTypes.Owner:
            case PersonTypes.BoardManager:
            case PersonTypes.Representative102:
            case PersonTypes.Representative103:
            case PersonTypes.OffshoreDirectControlCompanyRepresentative:
            case PersonTypes.OffshoreNoDirectControlCompanyRepresentative:
            case PersonTypes.F5500_ActualOwner:
            case PersonTypes.ContactPerson550aUI:
            case PersonTypes.Trustee13:
            case PersonTypes.CommissionMember15b:
            case PersonTypes.Representative503:
            case PersonTypes.Liquidator:
            case PersonTypes.AtPawnCreditor:
            case PersonTypes.Depositor:
            case PersonTypes.ManagerOfTradeEnterprise:
            case PersonTypes.DistraintData:
            case PersonTypes.Partner218:
            case PersonTypes.PledgeExecutionDepozitar:
            case PersonTypes.DemandForAppointingExpert:
            case PersonTypes.Depozitar:
            case PersonTypes.EntryIntoPledgeCreditorRight:
            case PersonTypes.EntryIntoPledgeCreditorRight2:
                this.hasForeignTrader = false;
                break;
            default: this.hasForeignTrader = true;
        }
    }

    private get shouldRenderIdent(): boolean {
        return (this.props.PersonType != PersonTypes.Successor803Fusion && !(this.props.PersonType == PersonTypes.TransformingCompany702a802a && this.model.isForeignTrader));
    }

    renderForeignTrader() {
        switch (this.props.PersonType) {
            // Ако има изключение за label с текст "Чуждестранно юридическо лице" да се впише с различен код
            default: return this.checkBoxFor(m => m.isForeignTrader, "CR_GL_FOREIGN_LEGAL_ENTITY_L", null, this.props.onHasForeignTraderCheckChanged);
        }
    }

    private get showExtractDataButton(): boolean {
        switch (this.props.PersonType) {
            case PersonTypes.Acquisition:
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingNPOs702b:
            case PersonTypes.TransformingCompany702a802a:
            case PersonTypes.CoOperative:
            case PersonTypes.Successor703:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.ActsCompanies:
                return true;
            case PersonTypes.DemandForAppointingExpert:
                this.hideNameAndLegalFormText = true;
                return true;
            default:
                return false;
        }
    }

    getLegalForms() {
        this.props.registerAsyncOperation(Nomenclatures.getLegalForms().then((legalForms: LegalForm[]) => {
            this._legalForms = legalForms;
        }));
    }

    renderCountryTextbox() {
        switch (this.props.PersonType) {
            case PersonTypes.BranchManager:
            case PersonTypes.Procurator:
            case PersonTypes.Acquisition:
            case PersonTypes.TransformingCompany:
            case PersonTypes.TransformingNPOs702b:
            case PersonTypes.CoOperative:
            case PersonTypes.Successor803:
            case PersonTypes.Successor803V32:
            case PersonTypes.Successor803Fusion:
            case PersonTypes.ActsCompanies:
            case PersonTypes.LimitedLialibilityPartner:
            case PersonTypes.UnlimitedLiabilityPartner:
            case PersonTypes.Pledgor:
            case PersonTypes.Distraint:
            case PersonTypes.EuropeanHoldingCompanyAsShareholder:
            case PersonTypes.Owner:
            case PersonTypes.UnlimitedLiabilityPartnersEUIE:
            case PersonTypes.PersonConcerned:
            case PersonTypes.DebtorOverSecureClaim:
            case PersonTypes.AtPawnCreditor:
            case PersonTypes.Depositor:
            case PersonTypes.ManagerOfTradeEnterprise:
            case PersonTypes.DistraintData:
            case PersonTypes.Partner218:
            case PersonTypes.PledgeExecutionDepozitar:
            case PersonTypes.Depozitar:
            case PersonTypes.DemandForAppointingExpert:
            case PersonTypes.EntryIntoPledgeCreditorRight:
            case PersonTypes.EntryIntoPledgeCreditorRight2:
                this.showCountryTextbox = false;
                break;
            default:
                this.showCountryTextbox = true;
                break;
        }
    }

    private get showCountryTextboxDisabled(): boolean {
        return (this.props.PersonType == PersonTypes.TransformingCompany702a802a && !this.model.isForeignTrader);
    }

    //#endregion

    //#region
    //Country

    selectCountry(value: string): Promise<Country[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCountries().then(s => s.filter(s => s.name.toLowerCase().indexOf(valueLowerCase) > -1));
        else
            return Promise.resolve([]);
    }

    showCountryValue(value: Country): string {
        return value.name;
    }

    @action handleCountryChangeCallBack() {
        this.model.countryCode = null;
        this.model.countryCodeBRIS = null;
        this.model.countryID = null;
        this.model.competentAuthorityForRegistration = null;
        this.model.foreignRegisterCode = null;
        this.model.foreignRegister = null;
        this.model.foreignLegalFormCode = null;
        this.model.foreignLegalForm = null;
        this.model.legalForm = null;
    }

    @action handleCountrySelectOption(value?: Country) {
        if (value) {
            this.model.countryName = value.name;
            this.model.countryID = value.id;

            if (this.props.PersonType != PersonTypes.Description406) {
                this.model.countryCode = value.code;
            }

            if (this.props.PersonType == PersonTypes.TransformingCompany702a802a) {
                this.model.countryCodeBRIS = value.brisCountryCode;
                this.checkIfAutocompleteForRegisterShouldBeRendered();
                this.checkIfAutocompleteForLegalFormShouldBeRendered();
            }
        }
    }

    //#endregion

    selectRegistry(value: string): Promise<ForeignCommercialRegister[]> {
        var valueLowerCase = value.toLowerCase();

        return Nomenclatures.getForeignComRegistersCache()
            .then(foreignComRegisters =>
                foreignComRegisters.filter(register =>
                    register.isActive == true
                    && register.nameOriginal.toLowerCase().indexOf(valueLowerCase) > -1
                    && (this.model.countryCodeBRIS == register.countryCode)));
    }

    showRegisterValue(value: ForeignCommercialRegister): string {
        return value.nameOriginal;
    }

    @action handleRegistrySelectOption(value?: ForeignCommercialRegister) {
        if (value) {
            this.model.foreignRegisterCode = value.code;
            this._isOtherRegisterSelected = value.isOther;
        }
    }

    @action handleRegistryChange(value: any) {
        this.model.foreignRegisterCode = null;
        this.model.competentAuthorityForRegistration = null;
    }

    selectLegalForm(value: string): Promise<ForeignLegalForm[]> {
        var valueLowerCase = value.toLowerCase();

        return Nomenclatures.getForeignLegalForms()
            .then(legalForms => legalForms.filter(legalForm =>
                legalForm.isActive == true
                && legalForm.name.toLowerCase().indexOf(valueLowerCase) > -1
                && (this.model.countryCodeBRIS == legalForm.countryCode)));
    }

    showLegalFormValue(value: ForeignLegalForm): string {
        return value.name;
    }

    @action handleLegalFormSelectOption(value?: ForeignLegalForm) {
        if (value) {
            this.model.foreignLegalFormCode = value.code;
            this._isOtherLegalFormSelected = value.isOther;
        }
    }

    @action handleLegalFormChange() {
        this.model.foreignLegalFormCode = null;
        this.model.legalForm = null;
    }

    checkIfOtherRegisterSelected(): void {
        this.props.registerAsyncOperation(Nomenclatures.getForeignComRegistersCache()
            .then(foreignComRegisters => {
                if (this.props.viewMode == ViewMode.Edit) {
                    let registerSelected = foreignComRegisters.filter(register => register.code == this.model.foreignRegisterCode && register.isActive == true)[0];
                    this._isOtherRegisterSelected = registerSelected && registerSelected.isOther;
                } else {
                    let registerSelected = foreignComRegisters.filter(register => register.code == this.model.foreignRegisterCode)[0];
                    this._isOtherRegisterSelected = registerSelected && registerSelected.isOther;
                }
                
            }));
    }

    private get isOtherRegisterSelected(): boolean {
        this.checkIfOtherRegisterSelected();

        return this._isOtherRegisterSelected;
    }

    private checkIfOtherLegalFormSelected(): void {
        this.props.registerAsyncOperation(Nomenclatures.getForeignLegalForms()
            .then(legalForms => {
                if (this.props.viewMode == ViewMode.Edit) {
                    let legalFormSelected = legalForms.filter(legalForm => legalForm.code == this.model.foreignLegalFormCode && legalForm.isActive == true)[0];
                    this._isOtherLegalFormSelected = legalFormSelected && legalFormSelected.isOther;
                } else {
                    let legalFormSelected = legalForms.filter(legalForm => legalForm.code == this.model.foreignLegalFormCode)[0];
                    this._isOtherLegalFormSelected = legalFormSelected && legalFormSelected.isOther;
                }
            }));
    }

    private get isOtherLegalFormSelected(): boolean {
        this.checkIfOtherLegalFormSelected();

        return this._isOtherLegalFormSelected;
    }

    private onUICChange(): void {
        this.model.nameAndLegalFormText = "";

        this.props.onUICChange && this.props.onUICChange(this.model.indent);
    }

    private initializeFor702a802a(): void {
        if (this.model.isForeignTrader && this.props.PersonType == PersonTypes.TransformingCompany702a802a) {
            this.getForeignLegalForms();
            this.getForeignRegisters();
            this.checkIfOtherRegisterSelected();
            this.checkIfOtherLegalFormSelected();
            this.checkIfAutocompleteForRegisterShouldBeRendered();
            this.checkIfAutocompleteForLegalFormShouldBeRendered();
        }
    }

    private getForeignLegalForms(): void {
        this.props.registerAsyncOperation(Nomenclatures.getForeignLegalForms()
            .then(legalForms => {
                runInAction(() => {
                    if (this.props.viewMode == ViewMode.Edit) {
                        this._foreignLegalForms = ArrayHelper.queryable.from(legalForms).where(lf => lf.isActive == true).toArray();

                        if (!ObjectHelper.isStringNullOrEmpty(this.model.foreignLegalFormCode)
                            && ArrayHelper.queryable.from(this._foreignLegalForms).count(lf => lf.code == this.model.foreignLegalFormCode) == 0) {
                            this.model.foreignLegalFormCode = null;
                            this.model.foreignLegalForm = null;
                        }
                    } else {
                        this._foreignLegalForms = legalForms;
                    }
                });
            }));
    }

    private getForeignRegisters(): void {
        Nomenclatures.getForeignComRegistersCache()
            .then(foreignComRegisters => {
                runInAction(() => {
                    if (this.props.viewMode == ViewMode.Edit) {
                        this._foreignRegisters = ArrayHelper.queryable.from(foreignComRegisters).where(r => r.isActive == true).toArray();

                        if (!ObjectHelper.isStringNullOrEmpty(this.model.foreignRegisterCode)
                            && ArrayHelper.queryable.from(this._foreignRegisters).count(r => r.code == this.model.foreignRegisterCode) == 0) {
                            this.model.foreignRegister = null;
                            this.model.foreignRegisterCode = null;
                        }
                    } else {
                        this._foreignRegisters = foreignComRegisters;
                    }
                });
            });
    }

    private checkIfAutocompleteForRegisterShouldBeRendered(): void {
        let that = this;

        this.props.registerAsyncOperation(Nomenclatures.getForeignComRegistersCache()
            .then(foreignComRegisters => {
                if (foreignComRegisters && foreignComRegisters.length > 0) {
                    if (this.props.viewMode == ViewMode.Edit) {
                        let allCountryRegisters = foreignComRegisters.filter(register => that.model.countryCodeBRIS == register.countryCode && register.isActive == true);
                        that._shouldRenderAutocompleteForRegister = allCountryRegisters.length != 0;
                    } else {
                        let allCountryRegisters = foreignComRegisters.filter(register => that.model.countryCodeBRIS == register.countryCode);
                        that._shouldRenderAutocompleteForRegister = allCountryRegisters.length != 0;
                    }
                } else {
                    that._shouldRenderAutocompleteForRegister = false;
                }
            }));
    }

    private checkIfAutocompleteForLegalFormShouldBeRendered(): void {
        let that = this;

        this.props.registerAsyncOperation(Nomenclatures.getForeignLegalForms()
            .then(legalForms => {
                if (legalForms && legalForms.length > 0) {
                    if (this.props.viewMode == ViewMode.Edit) {
                        let allCountryRegisters = legalForms.filter(legalForm => that.model.countryCodeBRIS == legalForm.countryCode && legalForm.isActive == true);
                        that._shouldRenderAutocompleteForLegalForm = allCountryRegisters.length != 0;
                    } else {
                        let allCountryLegalForms = legalForms.filter(legalForm => that.model.countryCodeBRIS == legalForm.countryCode);
                        that._shouldRenderAutocompleteForLegalForm = allCountryLegalForms.length != 0;
                    }
                } else {
                    that._shouldRenderAutocompleteForLegalForm = false;
                }
            }));
    }
}

export const PersonUI = withAsyncFrame(PersonUIImpl);