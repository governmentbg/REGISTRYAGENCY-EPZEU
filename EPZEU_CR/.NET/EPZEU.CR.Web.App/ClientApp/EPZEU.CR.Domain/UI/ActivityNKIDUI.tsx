import { BindableReference, SelectListItem, ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, ViewMode, withAsyncFrame } from "Cnsys.UI.React";
import { AutoComplete, EPZEUBaseComponent, NKID, Nomenclatures } from 'EPZEU.Core';
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { FieldContainerProps } from ".";
import { ActivityNKIDField } from '../Models/ModelsAutoGenerated';

interface ActivityNKIDProps extends BaseProps, AsyncUIProps {

}

var attributesClassFormControl = { className: 'form-control' };

@observer class ActivityNKIDImpl extends EPZEUBaseComponent<ActivityNKIDProps, ActivityNKIDField> {

    @observable possibleNkids: SelectListItem[];
    @observable parentNkid: NKID;
    @observable nkidId: string;

    constructor(props?: FieldContainerProps) {
        super(props);

        this.componentWillUpdate = this.componentWillUpdate.bind(this);
        this.initParentNkids = this.initParentNkids.bind(this);
        this.clearSelectedNkid = this.clearSelectedNkid.bind(this);
        this.handleNKIDClassSelect = this.handleNKIDClassSelect.bind(this);
        this.possibleNkids = [];
        this.parentNkid = new NKID();
        this.initNKID();
    }

    componentWillUpdate(nextProps: FieldContainerProps, nextState: any, nextContext: any): void {

        super.componentWillUpdate(nextProps, nextState, nextContext);

        if (this.props.viewMode == ViewMode.Edit)
            this.initNKID();
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m, 'CR_GL_NKID_GROUP_L')}
                        <AutoComplete modelReference={new BindableReference(this.parentNkid, m => m.text)} fullHtmlName="parentNkid"
                            selector={this.nkidSelector}
                            showValue={this.showValue}
                            hasSelectedValue={!!this.parentNkid.id}
                            handleSelectCallback={this.initParentNkids}
                            handleChangeCallback={this.clearSelectedNkid}
                            triggerLength={0}
                            attributes={attributesClassFormControl} />
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.idNkid, 'CR_GL_NKID_CLASS_L')}
                        {
                            this.model.idNkid || (this.possibleNkids && this.possibleNkids.length > 0)
                                ? this.dropDownListFor(m => m.idNkid, this.possibleNkids, attributesClassFormControl, this.handleNKIDClassSelect, true)
                                : <select className="form-control" disabled={true}></select>
                        }
                    </div>
                </div>
            </>);
    }

    renderDisplay(): JSX.Element {
        return (<>{this.model.codeNkid && (this.getResource('CR_GL_NKID_GROUP_L') + ": " + this.model.codeNkid)}
            {this.model.codeNkid && <br />}
            {this.model.textNkid && (this.getResource('CR_GL_NKID_CLASS_L') + ": " + this.model.textNkid)}
        </>);
    }

    //#region
    //Private helpers

    @action initNKID() {

        if (this.nkidId != this.model.idNkid && !this.model.idNkid && this.parentNkid.id) {
            this.parentNkid.id = null;
            this.parentNkid.code = null;
            this.parentNkid.text = null;
            this.nkidId = this.model.idNkid

        } else if (this.nkidId != this.model.idNkid) {
            this.nkidId = this.model.idNkid

            if (this.model.idNkid) {
                this.props.registerAsyncOperation(Nomenclatures.getNKID(n => n.id == +this.model.idNkid).then((currentNkid) => {

                    if (currentNkid && currentNkid.length > 0) {
                        return Nomenclatures.getNKID(x => x.id == currentNkid[0].parentID).then((parentNkid) => {

                            if (parentNkid && parentNkid.length > 0)
                                this.initParentNkids(parentNkid[0]);
                        })
                    }
                }))
            }
        }
    }

    private nkidSelector(value?: string): Promise<NKID[]> {
        var searchedNKID = value.toLowerCase().trim();

        return Nomenclatures.getNKID().then((nkid) => {
            return nkid.filter(filteredNkid => !filteredNkid.parentID &&
                (filteredNkid.text.toLocaleLowerCase().indexOf(searchedNKID) != -1 || filteredNkid.code.indexOf(searchedNKID) != -1));
        });
    }

    private showValue(nkid: NKID): string {
        return nkid.code + ' ' + nkid.text;
    }

    @action private clearSelectedNkid() {
        this.model.idNkid = null;
        this.model.codeNkid = null;
        this.model.textNkid = null;
        this.nkidId = null;
        this.possibleNkids = [];
        this.parentNkid.id = null;
        this.parentNkid.code = null;
    }

    @action private initParentNkids(value: NKID) {
        this.parentNkid.copyFrom(JSON.parse(JSON.stringify(value)));
        this.parentNkid.text = this.parentNkid.code + " " + this.parentNkid.text;

        if (!this.model.codeNkid)
            this.clearNKIDData();

        return Nomenclatures.getNKID(nkid => nkid.parentID == value.id).then((nkidFiltered) => {

            runInAction(() => {
                this.possibleNkids = [];
                nkidFiltered.map(nkidChild => {
                    this.possibleNkids.push(new SelectListItem({ selected: nkidChild.id.toString() == this.model.idNkid, text: nkidChild.text, value: nkidChild.id }))
                })
            })
        });
    }

    private handleNKIDClassSelect(e: any) {
        var value = e.target.value;

        if (!ObjectHelper.isStringNullOrEmpty(value)) {
            this.props.registerAsyncOperation(Nomenclatures.getNKID().then((nkid) => {
                var nkidsFiltered = nkid.filter(filteredNkid => value == filteredNkid.id);

                if (nkidsFiltered && nkidsFiltered.length > 0) {
                    runInAction(() => {
                        this.model.idNkid = nkidsFiltered[0].id.toString();
                        this.model.codeNkid = nkidsFiltered[0].code;
                        this.model.textNkid = nkidsFiltered[0].text;
                        this.nkidId = nkidsFiltered[0].id.toString();
                    })
                } else
                    this.clearNKIDData();
            }));
        } else
            this.clearNKIDData();

    }

    @action private clearNKIDData() {
        this.model.codeNkid = undefined;
        this.model.idNkid = undefined;
        this.model.textNkid = undefined;
        this.nkidId = undefined;
    }

    //#endregion
}

export const ActivityNKIDUI = withAsyncFrame(ActivityNKIDImpl);