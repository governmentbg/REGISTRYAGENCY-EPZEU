import { ErrorHelper } from 'Cnsys.Core';
import { BaseProps } from 'Cnsys.UI.React';
import { EPZEUBaseComponent } from 'EPZEU.Core';
import * as React from "react";
import { DomainModelHepler } from '../../DomainModelHepler'
import { RecordOperations } from '../../Models/ModelsAutoGenerated';
import { SectionInfoUI } from "../CommonInfoComponents";

export interface FieldContainerProps extends BaseProps {
    fieldLabelTextKey?: string;
    isMandatoryField?: boolean;
    fieldLabelFor?: (model: any) => any;
    fieldInfoKeys?: string[];
    skipFieldContainer?: boolean;

}

export function withFieldContainer<C extends React.ComponentClass<FieldContainerProps>>(Component: C, fieldProps?: FieldContainerProps): C {

    var mandatoryFieldAttributes = { className: `field-title field-title--form required-field` };
    var nonMandatoryFieldAttributes = { className: `field-title field-title--form` };

    class Wrapper extends EPZEUBaseComponent<FieldContainerProps, any> {

        constructor(props: any) {
            super(props);
        }

        renderEdit() {

            let allProps: any = { ...fieldProps, ...this.props }
            let fieldLabel: any = null;
            let fieldHelpText: any = null;

            if (this.props.fieldLabelTextKey || fieldProps.fieldLabelTextKey) {
                fieldLabel = this.labelFor(this.props.fieldLabelFor || fieldProps.fieldLabelFor,
                    this.props.fieldLabelTextKey || fieldProps.fieldLabelTextKey,
                    this.props.isMandatoryField || fieldProps.isMandatoryField ? mandatoryFieldAttributes : nonMandatoryFieldAttributes);
            }

            if (this.props.fieldInfoKeys || fieldProps.fieldInfoKeys) {
                fieldHelpText = <SectionInfoUI infoTextKey={this.props.fieldInfoKeys || fieldProps.fieldInfoKeys} />
            }

            if (this.props.skipFieldContainer || fieldProps.skipFieldContainer) {
                return <>
                        {fieldLabel}
                        {fieldHelpText}
                        <Component {...allProps}></Component>
                </>
            }

            return (
                        <div className="field-container">
                            {fieldLabel}
                            {fieldHelpText}
                            <Component {...allProps}></Component>
                        </div>
            )
        }

        renderDisplay() {

            var doDisplay = false;

            if (DomainModelHepler.isRecord(this.model)) {
                doDisplay = (this.model.recordOperation == RecordOperations.Add ||
                    this.model.recordOperation == RecordOperations.Erase);
            }
            else
                doDisplay = (DomainModelHepler.getAllRecordsFromField(this.model).some(r => r.recordOperation == RecordOperations.Add || r.recordOperation == RecordOperations.Erase));

            if (!doDisplay) {
                var errors = ErrorHelper.getErrorsRecursive(this.model);
                doDisplay = errors && errors.length > 0;
            }

            if (doDisplay) {

                if (this.props.skipFieldContainer || fieldProps.skipFieldContainer) {
                    return (<>
                        {
                            (this.props.fieldLabelTextKey || fieldProps.fieldLabelTextKey) &&
                            <h3 key="title" className="field-title field-title--preview">{this.getResource(this.props.fieldLabelTextKey || fieldProps.fieldLabelTextKey)}</h3>
                        }
                        <Component {...this.props}></Component>
                    </>)
                }

                return (<div className="field-container">
                    {
                        (this.props.fieldLabelTextKey || fieldProps.fieldLabelTextKey) &&
                        <h3 key="title" className="field-title field-title--preview">{this.getResource(this.props.fieldLabelTextKey || fieldProps.fieldLabelTextKey)}</h3>
                    }
                    <Component {...this.props}></Component>
                </div>)

            } else
                return null;
        }
    };


    (Wrapper as any).displayName = `withFieldContainer(${Component.displayName || (Component as any).name || "Component"})`;

    return Wrapper as any;
}
