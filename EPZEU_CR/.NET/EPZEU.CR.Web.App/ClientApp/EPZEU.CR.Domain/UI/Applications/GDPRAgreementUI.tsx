import { ObjectHelper } from 'Cnsys.Core';
import { BaseProps, RawHTML, withAsyncFrame } from 'Cnsys.UI.React';
import { EPZEUBaseComponent, ValidationSummary, ValidationSummaryStrategy, withDataServiceProvider } from 'EPZEU.Core';
import { observer } from "mobx-react";
import * as React from "react";
import { GDPRAgreement } from '../../Models/ModelsAutoGenerated';
import { SectionTitleUI } from '../../UI/CommonInfoComponents';
import { ApplicationFormContextProviderProps, withApplicationFormContext } from './ApplicationFormContextProviderUI';

const valSummaryPropNameIsGDPRAgreementAccepted = ["isGDPRAgreementAccepted"];

export interface GDPRAgreementUIProps extends BaseProps, ApplicationFormContextProviderProps {
}

@observer class GDPRAgreementUIImpl extends EPZEUBaseComponent<GDPRAgreementUIProps, GDPRAgreement> {

    constructor(props?: GDPRAgreementUIProps) {
        super(props);
    }

    renderEdit(): JSX.Element {
        return <>
            <SectionTitleUI anchor={"gdpr"} title={this.getResource('GL_INFORMED_AGREEMENT_L')} />
            <ValidationSummary {...this.props} propNames={valSummaryPropNameIsGDPRAgreementAccepted} strategy={ValidationSummaryStrategy.excludeAllExcept} />

            <RawHTML divClassname="field-container" rawHtmlText={ObjectHelper.isStringNullOrEmpty(this.model.gdprAgreementText) ? this.getResource('CR_APP_INFORMED_AGREEMENT_TEXT_L') : this.model.gdprAgreementText} />

            <div className="field-container">
                <div className="row">
                    <div className="col-12 form-group">
                        <div className="custom-control custom-checkbox">
                            {this.checkBoxFor(m => m.isGDPRAgreementAccepted, 'GL_CONFORMATION_INFORMED_AGREEMENT_L')}
                        </div>
                    </div>
                </div>
            </div>
        </>;
    }

    renderDisplay(): JSX.Element {
        return (<>
            <SectionTitleUI anchor={"gdpr"} title={this.getResource('GL_INFORMED_AGREEMENT_L')} isForPreview />
            {(this.model ||
                this.props.applicationManager.processContext.isDraftApplicationProcess()) &&
                <>
                    <RawHTML divClassname="field-container" rawHtmlText={(this.model && !ObjectHelper.isStringNullOrEmpty(this.model.gdprAgreementText)) ? this.model.gdprAgreementText : this.getResource('CR_APP_INFORMED_AGREEMENT_TEXT_L')} />

                    <div className="field-container">
                        <p className="field-text">{this.model && this.model.isGDPRAgreementAccepted && this.getResource('GL_CONFORMATION_INFORMED_AGREEMENT_L')}</p>
                    </div>

                    <ValidationSummary {...this.props} propNames={valSummaryPropNameIsGDPRAgreementAccepted} strategy={ValidationSummaryStrategy.excludeAllExcept} />
                </>
            }
        </>);
    }

    //#endregion
}

export const GDPRAgreementUI = withApplicationFormContext(withDataServiceProvider(withAsyncFrame(GDPRAgreementUIImpl)));