import { moduleContext, ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from 'Cnsys.UI.React';
import { Constants, EPZEUBaseComponent, IDataServiceProviderProps, ValidationSummary, withDataServiceProvider } from 'EPZEU.Core';
import { action, observable } from 'mobx';
import { observer } from "mobx-react";
import * as React from "react";
import { Address } from '../../Models/Address';
import { ApplicantExchange } from '../../Models/ModelsAutoGenerated';
import { AddressUI } from '../../UI/AddressUI';
import { SectionTitleUI, InputInfoUI } from '../../UI/CommonInfoComponents';
import { ApplicationFormContextProps, withApplicationFormContext } from './ApplicationFormContextProviderUI';

interface ApplicantExchangeProps extends ApplicationFormContextProps, BaseProps, IDataServiceProviderProps, AsyncUIProps {
    titleKey?: string;
    anchor?: string;
}


var infoTextKeys1 = ["CR_APP_00259_I"];
const attributesClassFormControlDisabled = { className: 'form-control', disabled: true };

@observer class ApplicantExchangeUIImpl extends EPZEUBaseComponent<ApplicantExchangeProps, ApplicantExchange> {
    private groupName: string;

    @observable seatAddressNotInBg: boolean = false;

    constructor(props?: ApplicantExchangeProps) {
        super(props);

        this.groupName = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
        this.extractAddressData = this.extractAddressData.bind(this);
    }

    renderEdit(): JSX.Element {
        return <>
            <SectionTitleUI anchor={this.props.anchor} titleKey={this.props.titleKey ? this.props.titleKey : 'CR_APP_00001_L'} />
            <div className="field-container">
                <div className="interactive-container interactive-container--form">
                    <div className="interactive-container__content record-container">
                        <div className="row">
                            <div className="col">
                                {this.labelFor(m => m, 'CR_APP_AGREE_RECEIVING_REFUSAL_INSTRUCTION_ELECTRONIC_L', { className: "field-title field-title--form required-field" })}
                            </div>
                        </div>
                        <div className="row">
                            <div className="col-12 form-group">
                                <div className="custom-control custom-radio">
                                    <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_agree'} name={this.groupName} value={'agree'} checked={this.model.agree} />
                                    <label className={"custom-control-label"} htmlFor={this.groupName + '_agree'}>{this.getResource('GL_AGREE_L')}</label>
                                </div>
                                <div className="custom-control custom-radio">
                                    <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_notAgree'} name={this.groupName} value={'notAgree'} checked={this.model.notAgree} />
                                    <label className={"custom-control-label"} htmlFor={this.groupName + '_notAgree'}>{this.getResource('GL_DISAGREE_L')}</label>
                                </div>
                            </div>
                        </div>
                        <div className="row">
                            <div className="form-group col">
                                <label>{(this.getResource("CR_APP_EMAIL_ADDRESSES_L"))}</label>
                                {this.model.agree && this.textBoxFor(m => m.email)}
                                {this.model.notAgree && this.textBoxFor(m => m.email, attributesClassFormControlDisabled)}
                                <InputInfoUI infoTextKey={infoTextKeys1} />
                            </div>
                        </div>
                    </div>
                    <div className="interactive-container__controls">
                    </div>
                </div>
            </div>
            <div className="field-container">
                <div className="interactive-container interactive-container--form">
                    <div className="interactive-container__content record-container">
                        <div className="row">
                            <div className={this.props.applicationManager.canFillAppExchangeAddress == true ? "form-group col-12" : "col-12"}>
                                {this.labelFor(m => m.address, 'CR_APP_00003_L', { className: "field-title field-title--form required-field" })}
                            </div>
                        </div>
                        {this.props.applicationManager.canFillAppExchangeAddress == true ? (<div className="row">
                            <div className="form-group col-12">
                                <button className="btn btn-outline-light text-dark" onClick={this.extractAddressData}>
                                    <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i>
                                    {this.getResource('GL_EXTRACT_ADDRESS_L')}
                                </button>
                            </div></div>) : null}
                        {this.seatAddressNotInBg ?
                            <div className="alert alert-warning" role="alert">
                                {moduleContext.resourceManager.getResourceByKey('CR_APP_00232_I')}
                            </div>
                            : null}
                        <AddressUI {...this.bind(m => m.address)} disabledCountry={true} />
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.addressee, 'CR_APP_EMAIL_ADDRESSEE_L', { className: "required-field" })}
                                {this.textBoxFor(m => m.addressee)}
                            </div>
                        </div>
                    </div>
                    <div className="interactive-container__controls">
                    </div>
                </div>
            </div>
        </>;
    }

    renderDisplay(): JSX.Element {
        return (<>
            <SectionTitleUI anchor={this.props.anchor} titleKey={this.props.titleKey ? this.props.titleKey : 'CR_APP_00001_L'} isForPreview />
            <div className="field-container">
                <div className="record-container record-container--preview">
                    <h3 className="field-title field-title--preview">{this.getResource('CR_APP_AGREE_RECEIVING_REFUSAL_INSTRUCTION_ELECTRONIC_L')}</h3>
                    <p className="field-text">{this.model.agree ? this.getResource('GL_AGREE_L') : this.getResource('GL_DISAGREE_L')}</p>
                </div>
            </div>
            {this.model.email &&
                <div className="field-container">
                    <div className="record-container record-container--preview">
                        <h3 className="field-title field-title--preview">{this.getResource('GL_APP_EMAIL_ADDRESS_L')}</h3>
                        <p className="field-text">{this.model.email}</p>
                    </div>
                </div>
            }
            <div className="field-container">
                <div className="record-container record-container--preview">
                    <h3 className="field-title field-title--preview">{this.getResource('CR_APP_00003_L')}</h3>
                    <p className="field-text">
                        <AddressUI {...this.bind(m => m.address)} />
                    </p>
                </div>
            </div>
            {this.model.addressee &&
                <div className="field-container">
                    <div className="record-container record-container--preview">
                        <h3 className="field-title field-title--preview">{this.getResource('CR_APP_EMAIL_ADDRESSEE_L')}</h3>
                        <p className="field-text">{this.model.addressee}</p>
                    </div>
                </div>
            }
            <ValidationSummary {...this.props} includeErrorsRecursive={true} model={this.model} />
        </>);
    }

    @action private handleChange(e: any) {
        if (e.target.value == 'agree') {
            this.model.agree = true;
            this.model.notAgree = false;
        } else if (e.target.value == 'notAgree') {
            this.model.agree = false;
            this.model.notAgree = true;
            this.model.email = "";
            this.model.clearErrors();
        }
    }

    //#region Extract Address helpers

    @action extractAddressData(e: any) {
        this.props.registerAsyncOperation(this.props.applicationManager.getSeatAddress().bind(this).then(seatAddress => {
            this.setSeatAddress(seatAddress);
        }));
    }

    @action setSeatAddress(seatAddress: Address): void {
        if (seatAddress) {
            if (seatAddress.countryCode != Constants.BG_COUNTRY_CODE)
                this.seatAddressNotInBg = true;
            else {
                let seatAddressClean = JSON.parse(JSON.stringify(seatAddress));
                this.model.address.copyFrom(seatAddressClean);
                this.seatAddressNotInBg = false;
                this.forceUpdate();
            }
        }
    }

    //#endregion
}

export const ApplicantExchangeUI = withApplicationFormContext(withDataServiceProvider(withAsyncFrame(ApplicantExchangeUIImpl)));