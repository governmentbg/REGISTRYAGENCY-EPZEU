import { ObjectHelper } from 'Cnsys.Core';
import { BaseProps } from 'Cnsys.UI.React';
import { EPZEUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from 'EPZEU.Core';
import { action } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { ApplicantCapacity } from '../Models/ModelsAutoGenerated';
import { ApplicationFormContextProviderProps, withApplicationFormContext } from './Applications/ApplicationFormContextProviderUI';

//Ако потрябват и другите опции, да се разкоментират и да се добавят в radioButtonLabelResource
export enum ApplicantCapacityType {
    trader,
    lawyerWithLetter,
    financialAccountCreator,
    procurator,
    anotherFace,
    assignmentApplicant,
    applicantLawyerWithPower,
    assignedExpert,
    personRepresentingTheFoundation,
    personRepresentingTheAssociation,
    personRepresentingCommunityCentrer,
    personRepresentingBranchOfNonProfitForeignLegalEntity
}

interface ApplicantCapacityUIProps extends BaseProps, ApplicationFormContextProviderProps {
    titleKey?: string;
    possibleApplicantCapacities?: ApplicantCapacityType[];
}

//TODO: Да се добави рамка от дизайна
@observer class ApplicantCapacityImpl extends EPZEUBaseComponent<ApplicantCapacityUIProps, ApplicantCapacity> {
    private groupName: string;

    constructor(props?: ApplicantCapacityUIProps) {
        super(props);

        this.groupName = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
    }

    renderEdit(): JSX.Element {

        return <>
            <div className="field-container">
                <div className="row">
                    <div className="col-12">
                        <label className="field-title field-title--form required-field">
                            {this.getResource(this.props.titleKey ? this.props.titleKey : 'GL_QUALITY_APPLICANT_L')}
                        </label>
                    </div>
                </div>
                <ValidationSummary {...this.props} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                <div className="row">
                    <div className="col-12  form-group">
                        {this.renderRadioButtons()}
                    </div>
                </div>
            </div>
        </>;
    }

    renderDisplay(): JSX.Element {

        const resourceKey = this.getApplicantCapacityResourceKey();

        if (resourceKey) {
            return (<>
                <div className="record-container record-container--preview">
                    <h3 className="field-title field-title--preview">
                        {this.getResource(this.props.titleKey ? this.props.titleKey : 'GL_QUALITY_APPLICANT_L')}
                    </h3>
                    {resourceKey && this.getResource(resourceKey)}
                </div>
            </>);
        }
        if (this.model.getModelErrors().length > 0) {
            return (
                <>
                    <div className="record-container record-container--preview">
                        <h3 className="field-title field-title--preview">
                            {this.getResource(this.props.titleKey ? this.props.titleKey : 'GL_QUALITY_APPLICANT_L')}
                        </h3>
                    </div>
                    <ValidationSummary {...this.props} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />
                </>
            );         
        }
        return <ValidationSummary {...this.props} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} />;
    }

    //#region render helpers

    private renderRadioButtons() {
        var applicantCapacities = this.props.possibleApplicantCapacities ? this.props.possibleApplicantCapacities : this.props.applicationManager.possibleApplicantCapacities();

        if (applicantCapacities.length == 1) {
            const resourceKey = this.getApplicantCapacityResourceKey();

            return resourceKey && this.getResource(resourceKey)
        }

        return applicantCapacities.map(applicantCapacity => {
            let appCapacityType = ApplicantCapacityType[applicantCapacity];

            return <div className="custom-control custom-radio" key={appCapacityType}>
                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + "_" + appCapacityType} name={this.groupName} value={appCapacityType} checked={(this.model as any)[appCapacityType]} />
                <label className={"custom-control-label"} htmlFor={this.groupName + "_" + appCapacityType}>{this.radioButtonLabelResource(applicantCapacity)}</label>
            </div>
        })
    }

    private radioButtonLabelResource(applicantCapacityType: ApplicantCapacityType) {
        switch (applicantCapacityType) {
            case ApplicantCapacityType.trader:
                return this.getResource("CR_GL_TRADER_REPRESENTING_L");
            case ApplicantCapacityType.lawyerWithLetter:
                return this.getResource("GL_LAWYER_EXPL_ATTORNEY_L");
            case ApplicantCapacityType.financialAccountCreator:
                return this.getResource("CR_GL_COMPILER_FINANCIAL_STATEMENTS_L");
            case ApplicantCapacityType.procurator:
                return this.getResource("CR_GL_PROCURATOR_L");
            case ApplicantCapacityType.anotherFace:
                return this.getResource("GL_ANOTHER_PERSON_L");
            case ApplicantCapacityType.assignmentApplicant:
                return this.getResource("GL_APPLICANT_INITIAL_REQUEST_L");
            case ApplicantCapacityType.applicantLawyerWithPower:
                return this.getResource("GL_LAWYER_EXPL_ATTORNEY_L");
            case ApplicantCapacityType.assignedExpert:
                return this.getResource("CR_GL_APPOINTED_PERSON_L");
            case ApplicantCapacityType.personRepresentingBranchOfNonProfitForeignLegalEntity:
                return this.getResource("CR_GL_BRANCH_NPLE_REPRESENTING_L");
            case ApplicantCapacityType.personRepresentingCommunityCentrer:
                return this.getResource("CR_GL_COMMUNITY_CENTER_REPRESENTING_L");
            case ApplicantCapacityType.personRepresentingTheFoundation:
                return this.getResource("CR_GL_FUNDATION_REPRESENTING_L");
            case ApplicantCapacityType.personRepresentingTheAssociation:
                return this.getResource("CR_GL_PERSON_REPRESENTING_ASSOCIATION_L");
            default: return "ApplicantCapacityType_Key_NotFound"
        }
    }

    //#region

    private getApplicantCapacityResourceKey() {
        return (this.model.trader && 'CR_GL_TRADER_REPRESENTING_L')
            || (this.model.lawyerWithLetter && 'GL_LAWYER_EXPL_ATTORNEY_L')
            || (this.model.financialAccountCreator && 'CR_GL_COMPILER_FINANCIAL_STATEMENTS_L')
            || (this.model.procurator && 'CR_GL_PROCURATOR_L')
            || (this.model.assignmentApplicant && 'GL_APPLICANT_INITIAL_REQUEST_L')
            || (this.model.applicantLawyerWithPower && 'GL_LAWYER_EXPL_ATTORNEY_L')
            || (this.model.assignedExpert && 'CR_GL_APPOINTED_PERSON_L')
            || (this.model.anotherFace && 'GL_ANOTHER_PERSON_L')
            || (this.model.personRepresentingBranchOfNonProfitForeignLegalEntity && 'CR_GL_BRANCH_NPLE_REPRESENTING_L')
            || (this.model.personRepresentingCommunityCentrer && 'CR_GL_COMMUNITY_CENTER_REPRESENTING_L')
            || (this.model.personRepresentingTheFoundation && 'CR_GL_FUNDATION_REPRESENTING_L')
            || (this.model.personRepresentingTheAssociation && 'CR_GL_PERSON_REPRESENTING_ASSOCIATION_L');
    }

    @action private handleChange(e: any) {
        for (var appCapacityType in ApplicantCapacityType) {
            (this.model as any)[ApplicantCapacityType[appCapacityType]] = false;
        }

        (this.model as any)[e.target.value] = true;
    }
}

export const ApplicantCapacityUI = withApplicationFormContext(ApplicantCapacityImpl);