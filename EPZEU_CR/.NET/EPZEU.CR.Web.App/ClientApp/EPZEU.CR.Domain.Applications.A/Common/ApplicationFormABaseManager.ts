import { ObjectHelper } from 'Cnsys.Core';
import { DocumentTemplateFields } from 'EPZEU.Core';
import { LegalForms } from 'EPZEU.CR.Core';
import { Address, ApplicationWithFieldsFormBaseManager, IApplicationWithFieldsFormManager } from 'EPZEU.CR.Domain';
import { ApplicationFormABase } from '../Models/ApplicationForms/ApplicationFormsA';
import { ApplicationFormAFieldsBase } from '../Models/ApplicationForms/ModelsAutoGenerated';

export interface IApplicationFormAManager extends IApplicationWithFieldsFormManager {
    possibleLegalForms: () => LegalForms[];
}

export abstract class ApplicationFormABaseManager<TAppl extends ApplicationFormABase<ApplicationFormAFieldsBase>> extends ApplicationWithFieldsFormBaseManager<TAppl> implements IApplicationFormAManager {

    public get canFillAppExchangeAddress(): boolean {
        return true;
    }

    public getSeatAddress(): Promise<Address> {
        return Promise.resolve(this.application.fields.seat.address);
    }

    public possibleLegalForms(): LegalForms[] {
        return null;
    }

    public getTemplateFieldData(templateFields: DocumentTemplateFields): string {

        switch (templateFields) {
            case DocumentTemplateFields.COMPANY_NAME: {
                return this.application.fields.company ?
                    this.application.fields.company.text : null;
            }
            case DocumentTemplateFields.MNG_ADDRESS: {
                if (this.application.fields.seat && this.application.fields.seat.address) {
                    return this.convertAddressToString(this.application.fields.seat.address);
                }
                break;
            }
            case DocumentTemplateFields.EIK_BULSTAT_PIK: {
                if (this.application.fields.uic) {
                    return this.application.fields.uic.text;
                }
                break;
            }
        }

        return super.getTemplateFieldData(templateFields);
    }
}

export function isApplicationFormAManager(obj: IApplicationFormAManager | any): obj is IApplicationFormAManager {
    return obj && ObjectHelper.isSubClassOf(obj, ApplicationFormABaseManager);
}