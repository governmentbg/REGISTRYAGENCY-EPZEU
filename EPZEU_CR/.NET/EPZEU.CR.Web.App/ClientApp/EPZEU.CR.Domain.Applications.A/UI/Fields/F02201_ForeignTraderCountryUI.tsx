import { ObjectHelper } from 'Cnsys.Core';
import { attributesClassFormControl, AutoComplete, Country, EPZEUBaseComponent, Nomenclatures } from 'EPZEU.Core';
import { RecordContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { F02201_ForeignTraderCountry } from '../../Models/Fields/ModelsAutoGenerated';

interface F02201_ForeignTraderCountryProps extends RecordContainerProps {
    handleChangeCallBack?: () => any;
    handleSelectCallBack?: () => any;
}

@observer class F02201_ForeignTraderCountryUIImpl extends EPZEUBaseComponent<F02201_ForeignTraderCountryProps, F02201_ForeignTraderCountry> {

    constructor(props?: F02201_ForeignTraderCountryProps) {
        super(props);

        this.selectCountry = this.selectCountry.bind(this);
        this.showCountryValue = this.showCountryValue.bind(this);
        this.handleCountrySelectOption = this.handleCountrySelectOption.bind(this);
        this.handleCountryChange = this.handleCountryChange.bind(this);
    }

    componentWillUpdate() {
        if (!ObjectHelper.isStringNullOrEmpty(this.model.countryCode) && !ObjectHelper.isNullOrUndefined(this.props.handleSelectCallBack))
            this.props.handleSelectCallBack();
    }

    renderEdit() {
        return (<div className="row">
            <div className="form-group col-sm-6">
                {this.labelFor(m => m.country, 'GL_COUNTRY_L')}
                <AutoComplete {...this.bind(m => m.country)}
                    selector={this.selectCountry}
                    showValue={this.showCountryValue}
                    handleSelectCallback={this.handleCountrySelectOption}
                    hasSelectedValue={this.model.countryCode ? true : false}
                    handleChangeCallback={this.handleCountryChange}
                    triggerLength={1}
                    attributes={attributesClassFormControl}/>
            </div>
        </div>);
    }

    renderDisplay() {
        return <div>
            {!ObjectHelper.isArrayNullOrEmpty(this.model.countryCode) ? <div>{this.getResource("GL_COUNTRY_L") + ": " + this.model.country}</div> : null}
        </div>
    }

    //#region AutoComplete helpers

    selectCountry(value: string): Promise<Country[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "") {
            return Nomenclatures.getCountries().then(s => s.filter(s => s.name.toLowerCase().indexOf(valueLowerCase) > -1));
        }
        else
            return Promise.resolve([]);
    }

    showCountryValue(value: Country): string {
        return value.name;
    }

    @action handleCountryChange() {
        this.model.countryCode = null;
        this.model.countryCodeBRIS = null;
        this.model.isEUCountry = false;
        this.model.otherCountr = false;

        this.props.handleChangeCallBack();
    }

    @action handleCountrySelectOption(value?: Country) {
        if (value) {
            this.model.country = value.name;
            this.model.countryCode = value.code;
            this.model.countryCodeBRIS = value.brisCountryCode;
            this.model.isEUCountry = value.isEUCountry;
            this.model.otherCountr = !value.isEUCountry;
            this.props.handleSelectCallBack();
        }
    }

    //#endregion
}

export const F02201_ForeignTraderCountryUI = withFieldRecordContainer(F02201_ForeignTraderCountryUIImpl, {});