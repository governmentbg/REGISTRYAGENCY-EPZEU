import { ObjectHelper } from 'Cnsys.Core';
import { ViewMode } from 'Cnsys.UI.React';
import { EPZEUBaseComponent } from 'EPZEU.Core';
import { ApplicationFormContextProps, FieldContainerProps, ProcessStates, SectionSubTitle, withApplicationFormContext, withFieldContainer } from 'EPZEU.CR.Domain';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { isIF22ApplicationFormManager } from '../../Common/A8FormManager';
import { F022_ForeignTraders } from '../../Models/Fields/ModelsAutoGenerated';
import { F02203_ForeignTraderWayOfRepresentationUI } from './F011_WayOfRepresentationUI';
import { F02200_ForeignTraderRegistrationUI } from './F02200_ForeignTraderRegistrationUI';
import { F02201_ForeignTraderCountryUI } from "./F02201_ForeignTraderCountryUI";
import { F02204_AddemptionOfForeignTraderUI } from './F02204_AddemptionOfForeignTraderUI';
import { F0220_ForeignTraderUI } from './F0220_ForeignTraderUI';

interface F022_ForeignTradersProps extends ApplicationFormContextProps, FieldContainerProps {
}

@observer class F022_ForeignTradersUI extends EPZEUBaseComponent<F022_ForeignTradersProps, F022_ForeignTraders> {
    @observable hasForeignTraderSelectedCountryCode?: boolean;
    @observable hasForeignTraderCountryRegistry?: boolean;
    @observable hasForeignTraderCountryLegalForms?: boolean;
    @observable foreignTraderRegistrationCmpKey: string;

    constructor(props: F022_ForeignTradersProps) {
        super(props)

        this.handleCountryChange = this.handleCountryChange.bind(this);
        this.handleCountrySelect = this.handleCountrySelect.bind(this);
        this.prepareForeignTraderRegistration = this.prepareForeignTraderRegistration.bind(this);

        this.foreignTraderRegistrationCmpKey = ObjectHelper.newGuid();
    }

    componentWillMount() {
        if (this.props.viewMode == ViewMode.Edit)
            this.prepareForeignTraderRegistration();
    }

    renderEdit(): JSX.Element {
        return (<>
            <F02201_ForeignTraderCountryUI handleChangeCallBack={this.handleCountryChange} handleSelectCallBack={this.handleCountrySelect} {...this.bind(m => m.foreignTraderCountry)} skipFieldContainer />
            <F02200_ForeignTraderRegistrationUI
                key={this.foreignTraderRegistrationCmpKey}
                skipFieldContainer
                hasForeignTraderSelectedCountryCode={this.hasForeignTraderSelectedCountryCode}
                hasForeignTraderCountryRegistry={this.hasForeignTraderCountryRegistry}
                hasForeignTraderCountryLegalForms={this.hasForeignTraderCountryLegalForms}
                {...this.bind(m => m.foreignTraderRegistration)} />
            <SectionSubTitle subTitleTextKey={"CR_GL_NAME_OF_REPRESENTATIVES_L"} />
            <F0220_ForeignTraderUI {...this.bind(m => m.foreignTraderList)} skipFieldContainer />

            <F02203_ForeignTraderWayOfRepresentationUI {...this.bind(m => m.foreignTraderWayOfRepresentation)} skipFieldContainer />
            <F02204_AddemptionOfForeignTraderUI {...this.bind(m => m.addemptionOfForeignTrader)} />
        </>);
    }

    renderDisplay(): JSX.Element {
        return (<>
            <F02201_ForeignTraderCountryUI {...this.bind(m => m.foreignTraderCountry)} skipFieldContainer />
            <F02200_ForeignTraderRegistrationUI {...this.bind(m => m.foreignTraderRegistration)} skipFieldContainer />
            <F0220_ForeignTraderUI {...this.bind(m => m.foreignTraderList)} skipFieldContainer />
            <F02203_ForeignTraderWayOfRepresentationUI skipFieldContainer labelKey={!ObjectHelper.isNullOrUndefined(this.model.foreignTraderWayOfRepresentation) &&
                (this.model.foreignTraderWayOfRepresentation.jointly || this.model.foreignTraderWayOfRepresentation.severally || this.model.foreignTraderWayOfRepresentation.otherWay)
                ? 'CR_APP_00094_L'
                : null
            }
                {...this.bind(m => m.foreignTraderWayOfRepresentation)} />
            <F02204_AddemptionOfForeignTraderUI {...this.bind(m => m.addemptionOfForeignTrader)} />
        </>);
    }

    //#region Helpers 

    @action private handleCountryChange() {
        this.model.foreignTraderRegistration.foreignLegalFormCode = null;
        this.model.foreignTraderRegistration.foreignRegisterCode = null;
        this.model.foreignTraderRegistration.legalForm = null;
        this.model.foreignTraderRegistration.name = null;
        this.model.foreignTraderRegistration.register = null;
        this.model.foreignTraderRegistration.entryNumber = null;

        if (this.props.applicationManager.processState == ProcessStates.New) {
            this.model.foreignTraderList.splice(1, this.model.foreignTraderList.length - 1);
            this.model.foreignTraderList[0].text = "";
        }

        this.hasForeignTraderSelectedCountryCode = false;
        this.hasForeignTraderCountryRegistry = false;
        this.hasForeignTraderCountryLegalForms = false;
        this.foreignTraderRegistrationCmpKey = ObjectHelper.newGuid();
    }

    @action private handleCountrySelect() {
        this.prepareForeignTraderRegistration();
    }

    @action private prepareForeignTraderRegistration() {
        if (isIF22ApplicationFormManager(this.props.applicationManager)) {

            this.props.applicationManager.hasForeignTraderCountryRegistry().then((hasRegistry) => {
                this.hasForeignTraderCountryRegistry = hasRegistry;
            });

            this.props.applicationManager.hasForeignTraderCountryLegalForms().then((hasLegalForms) => {
                this.hasForeignTraderCountryLegalForms = hasLegalForms;
            });

            this.hasForeignTraderSelectedCountryCode = this.model.foreignTraderCountry && this.model.foreignTraderCountry.countryCode ? true : false;
        }
    }

    //#endregion
}

export const F022_ForeignTradersFieldUI = withFieldContainer(withApplicationFormContext(F022_ForeignTradersUI), {
    fieldLabelTextKey: "CR_F_22_L",
    isMandatoryField: true
});