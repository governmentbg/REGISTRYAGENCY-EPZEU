import { attributesClassFormControl, attributesClassFormControlMaxL10, attributesClassFormControlMaxL13TextRight, AutoComplete, Country, EPZEUBaseComponent, Nomenclatures, ValidationSummary, ValidationSummaryStrategy } from 'EPZEU.Core';
import { IndentTypes, InputInfoUI, ListRecordsContainerProps, SectionSubTitle, withFieldSingleListRecordsContainer } from 'EPZEU.CR.Domain';
import { action } from "mobx";
import * as React from "react";
import { F0240_ShareTransfer } from '../../Models/Fields/ModelsAutoGenerated';

var infoTextKeys1 = ["CR_APP_00081_I"];

class F024_ShareTransfersUI extends EPZEUBaseComponent<ListRecordsContainerProps, F0240_ShareTransfer> {

    constructor(props?: any) {
        super(props);

        this.showCountryValue = this.showCountryValue.bind(this);
        this.handleNewOwnerCountrySelect = this.handleNewOwnerCountrySelect.bind(this);
        this.handleOldOwnerCountrySelect = this.handleOldOwnerCountrySelect.bind(this);
        this.handleOldOwnerCountryChange = this.handleOldOwnerCountryChange.bind(this);
        this.handleNewOwnerCountryChange = this.handleNewOwnerCountryChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <SectionSubTitle subTitleTextKey={"CR_GL_TRANSFERER_L"} />
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.oldOwner.name, 'CR_GL_00005_L')}
                        {this.textBoxFor(m => m.oldOwner.name)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.oldOwner.indent, 'CR_APP_00004_L')}
                        {this.textBoxFor(m => m.oldOwner.indent, attributesClassFormControlMaxL10)}
                        <InputInfoUI infoTextKey={infoTextKeys1} />
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.shareAmount, 'CR_GL_PARTICIPATION_AMOUND_L')}
                        <div className="row">
                            <div className="form-group col">
                                <div className="form-row">
                                    <div className="form-group col">
                                        {this.textBoxFor(x => x.shareAmount, attributesClassFormControlMaxL13TextRight, null)}
                                    </div>
                                    <div className="col-auto">
                                        <div className="col-form-label">{this.getResource("GL_BGN_ABBRAVETION_L")}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 inline-control">
                        <label className="d-none d-sm-block d-md-block" aria-hidden="true">&nbsp;</label>
                        <div className="form-inline">
                            <div className="custom-control-inline custom-control custom-checkbox">
                                {this.checkBoxFor(m => m.oldOwner.isForeignTrader, "CR_GL_FOREIGN_LEGAL_ENTITY_L")}
                            </div>
                        </div>
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.oldOwnerCountryName, 'GL_COUNTRY_L')}
                        <AutoComplete {...this.bind(m => m.oldOwnerCountryName)}
                            selector={this.getCountries}
                            showValue={this.showCountryValue}
                            handleSelectCallback={this.handleOldOwnerCountrySelect}
                            handleChangeCallback={this.handleOldOwnerCountryChange}
                            hasSelectedValue={!!this.model.oldOwnerCountryID}
                            triggerLength={1}
                            attributes={attributesClassFormControl}/>
                    </div>
                </div>
                <ValidationSummary {...this.bind(x => x.newOwner)} strategy={ValidationSummaryStrategy.includeOnlyModelErrors} includeErrorsRecursive={true} />
                <SectionSubTitle subTitleTextKey={"CR_GL_ASSIGNEE_L"} />
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.newOwner.name, 'CR_GL_00005_L')}
                        {this.textBoxFor(m => m.newOwner.name)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.newOwner.indent, 'CR_APP_00004_L')}
                        {this.textBoxFor(m => m.newOwner.indent, attributesClassFormControlMaxL10)}
                        <InputInfoUI infoTextKey={infoTextKeys1} />
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 inline-control">
                        <label className="d-none d-sm-block d-md-block" aria-hidden="true">&nbsp;</label>
                        <div className="form-inline">
                            <div className="custom-control-inline custom-control custom-checkbox">
                                {this.checkBoxFor(m => m.newOwner.isForeignTrader, "CR_GL_FOREIGN_LEGAL_ENTITY_L")}
                            </div>
                        </div>
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.newOwnerCountryName, 'GL_COUNTRY_L')}
                        <AutoComplete {...this.bind(m => m.newOwnerCountryName)}
                            selector={this.getCountries}
                            showValue={this.showCountryValue}
                            handleSelectCallback={this.handleNewOwnerCountrySelect}
                            handleChangeCallback={this.handleNewOwnerCountryChange}
                            hasSelectedValue={!!this.model.newOwnerCountryID}
                            triggerLength={1}
                            attributes={attributesClassFormControl}/>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.transferDate, 'CR_APP_00002_L')}
                        {this.dateFor(x => x.transferDate)}
                    </div>
                </div>
            </>
        );
    }

    renderDisplay(): JSX.Element {
        const hasAnyInfoForOldOwner = this.model.oldOwner.name || this.model.oldOwner.indent || this.model.oldOwner.countryName || this.model.oldOwner.isForeignTrader;
        const hasAnyInfoForNewOwner = this.model.newOwner.name || this.model.newOwner.indent || this.model.newOwner.countryName || this.model.newOwner.isForeignTrader;

        return (
            <>
                {
                    /* рисуваме ПРЕХВЪРЛИТЕЛ, ако имаме някаква информация */
                    hasAnyInfoForOldOwner &&
                    <>{this.getResource('CR_GL_TRANSFERER_L').toUpperCase()}:<br /></>
                }

                {this.model.oldOwner.name && <>{this.model.oldOwner.name}</>}
                {/*дали да покаже запетайка*/(this.model.oldOwner.name && (this.model.oldOwner.indent || this.model.oldOwnerCountryName)) && <>, </>}
                {this.model.oldOwner.indent && <>{this.getResource(this.getIdentResourceKeyForDisplay(this.model.oldOwner.indentType))}: {this.model.oldOwner.indent}</>}
                {/*дали да покаже запетайка*/(this.model.oldOwner.indent && this.model.oldOwnerCountryName) && <>, </>}
                {this.model.oldOwnerCountryName && <>{this.getResource('GL_COUNTRY_L')}: {this.model.oldOwnerCountryName}</>}
                {
                    /* слагаме br само ако сме показали нещо за ПРЕХВЪРЛИТЕЛ  и ще покажем нещо за isForeignTrader, shareAmount, transferDate или ПРАВОПРИЕМНИК */
                    ((this.model.oldOwner.name || this.model.oldOwner.indent || this.model.oldOwnerCountryName)
                        && (this.model.oldOwner.isForeignTrader || this.model.shareAmount || hasAnyInfoForNewOwner || this.model.transferDate)) && <br />
                }
                {this.model.oldOwner.isForeignTrader && <>{this.getResource("CR_GL_FOREIGN_LEGAL_ENTITY_L")}</>}
                {
                    /* слагаме br само ако сме показали isForeignTrader за ПРЕХВЪРЛИТЕЛ  и ще покажем нещо за shareAmount, transferDate или ПРАВОПРИЕМНИК*/
                    (this.model.oldOwner.isForeignTrader && (this.model.shareAmount || hasAnyInfoForNewOwner || this.model.transferDate)) && <br />
                }


                {this.model.shareAmount &&
                    <>{this.getResource('CR_GL_PARTICIPATION_AMOUND_L')}: {this.model.shareAmount} {this.getResource('GL_BGN_ABBRAVETION_L')}</>}

                {
                    /* слагаме br само ако сме показали нещо за shareAmount и ще покажем нещо за ПРАВОПРИЕМНИК или transferDate */
                    (this.model.shareAmount && (hasAnyInfoForNewOwner || this.model.transferDate)) && <br />
                }

                {
                    /* рисуваме ПРАВОПРИЕМНИК, ако имаме някаква информация */
                    hasAnyInfoForNewOwner &&
                    <>{this.getResource('CR_GL_ASSIGNEE_L').toUpperCase()}:<br /></>
                }

                {this.model.newOwner && this.model.newOwner.name && <>{this.model.newOwner.name}</>}
                {/*дали да покаже запетайка*/(this.model.newOwner && this.model.newOwner.name && (this.model.newOwner.indent || this.model.newOwnerCountryName)) && <>, </>}
                {this.model.newOwner && this.model.newOwner.indent && <>{this.getResource(this.getIdentResourceKeyForDisplay(this.model.newOwner.indentType))}: {this.model.newOwner.indent}</>}
                {/*дали да покаже запетайка*/(this.model.newOwner.indent && this.model.newOwnerCountryName) && <>, </>}
                {this.model.newOwnerCountryName && <>{this.getResource('GL_COUNTRY_L')}: {this.model.newOwnerCountryName}</>}
                {
                    /* слагаме br само ако сме показали нещо за ПРАВОПРИЕМНИК  и ще покажем нещо за isForeignTrader или transferDate */
                    (((this.model.newOwner && this.model.newOwner.name) || (this.model.newOwner && this.model.newOwner.indent) || this.model.newOwnerCountryName)
                        && ((this.model.newOwner && this.model.newOwner.isForeignTrader) || this.model.transferDate)) && <br />
                }
                {this.model.newOwner && this.model.newOwner.isForeignTrader && <>{this.getResource("CR_GL_FOREIGN_LEGAL_ENTITY_L")}</>}
                {
                    /* слагаме br само ако сме показали isForeignTrader за ПРАВОПРИЕМНИК и ще покажем нещо за transferDate */
                    this.model.newOwner && this.model.newOwner.isForeignTrader && this.model.transferDate && <br />
                }

                {this.model.transferDate &&
                    <>{this.getResource('CR_APP_00002_L')}: {this.dateDisplayFor(this.model.transferDate, null, this.getResource('GL_YEAR_ABBREVIATION_L'))}</>}
            </>
        );
    }

    //#region
    //Country

    getCountries(value: string): Promise<Country[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCountries().then(s => s.filter(s => s.name.toLowerCase().indexOf(valueLowerCase) > -1));
        else
            return Promise.resolve([]);
    }

    showCountryValue(value: Country): string {
        return value.name;
    }

    getIdentResourceKeyForDisplay(identType: IndentTypes): string {

        if (identType == IndentTypes.EGN)
            return 'GL_BULGARIAN_PERSON_ID_L';
        else if (identType == IndentTypes.LNCH)
            return 'GL_FOREIGN_PERSON_ID_L';
        else if (identType == IndentTypes.BirthDate)
            return 'GL_BIRTH_DATE_L';
        else if (identType == IndentTypes.UIC)
            return 'GL_COMPANY_ID_L';
        else if (identType == IndentTypes.Bulstat)
            return 'GL_BULSTAT_L';
        else
            return 'CR_APP_00004_L';
    }

    handleOldOwnerCountryChange() {
        this.model.oldOwnerCountryID = null;
    }

    @action handleOldOwnerCountrySelect(value?: Country) {
        if (value) {
            this.model.oldOwnerCountryName = value.name;
            this.model.oldOwnerCountryID = value.id;
        }
        else {
            this.model.oldOwnerCountryName = null;
            this.model.oldOwnerCountryID = null;
        }
    }

    handleNewOwnerCountryChange() {
        this.model.newOwnerCountryID = null;
    }

    @action handleNewOwnerCountrySelect(value?: Country) {
        if (value) {
            this.model.newOwnerCountryName = value.name;
            this.model.newOwnerCountryID = value.id;
        }
        else {
            this.model.newOwnerCountryName = null;
            this.model.newOwnerCountryID = null;
        }
    }

    //#endregion
}

export const F024_ShareTransfersFieldUI = withFieldSingleListRecordsContainer(F024_ShareTransfersUI, F0240_ShareTransfer, {
    addButtonLabelKey: "CR_APP_ADD_TRANSFER_L",
    listSelector: m => m.shareTransfersList,
    fieldLabelTextKey: "CR_F_24_L",
    hasAtLeastOneRecord: true,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "oldOwner."],
    newRecordCtor: () => {
        return Nomenclatures.getBGCountry().then(bgCountry => {
            var shareTransferer = new F0240_ShareTransfer();

            shareTransferer.newOwnerCountryID = bgCountry.id;
            shareTransferer.newOwnerCountryName = bgCountry.name;

            shareTransferer.oldOwnerCountryID = bgCountry.id;
            shareTransferer.oldOwnerCountryName = bgCountry.name;

            return shareTransferer;
        })
    }
})