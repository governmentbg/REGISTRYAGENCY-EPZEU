import * as React from "react";
import { observer } from "mobx-react";
import { action } from "mobx";
import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseComponent } from 'EPZEU.Core'
import { F011_WayOfRepresentation, F02203_ForeignTraderWayOfRepresentation } from '../../Models/Fields/ModelsAutoGenerated'
import { withFieldRecordContainer, FieldContainerProps, withRecordContainer, SectionSubTitle } from 'EPZEU.CR.Domain';

interface WayOfRepresentationProps extends FieldContainerProps {
    labelKey?: string;
}

@observer class WayOfRepresentationUIImpl extends EPZEUBaseComponent<WayOfRepresentationProps, F011_WayOfRepresentation | F02203_ForeignTraderWayOfRepresentation> {
    private groupName: string;

    constructor(props?: FieldContainerProps) {
        super(props);

        this.groupName = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
    }

    renderEdit(): JSX.Element {
        let result: any = null;

        if (this.model) {
            result = (
                <>
                    {this.props.fieldLabelTextKey ? null :
                        <SectionSubTitle subTitleTextKey={"CR_APP_00094_L"} />
                    }
                    <div className="row">
                        <div className="form-group col-12">
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_jointly'} name={this.groupName} value={'jointly'} checked={this.model.jointly} />
                                <label className={"custom-control-label"} htmlFor={this.groupName + '_jointly'}>{this.getResource('GL_TOGETHER_L')}</label>
                            </div>
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_severally'} name={this.groupName} value={'severally'} checked={this.model.severally} />
                                <label className={"custom-control-label"} htmlFor={this.groupName + '_severally'}>{this.getResource('GL_SEPARATELY_L')}</label>
                            </div>
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_otherWay'} name={this.groupName} value={'otherWay'} checked={this.model.otherWay} />
                                <label className={"custom-control-label"} htmlFor={this.groupName + '_otherWay'}>{this.getResource('GL_OTHER_WAY_L')}</label>
                            </div>

                        </div>
                        {this.model.otherWay ?
                            <div className="form-group col-12">
                                {this.textAreaFor(x => x.text, null, 3)}
                            </div> : null}
                    </div>
                </>
            );
        }

        return result;
    }

    renderDisplay(): JSX.Element {
        return <>{
            (this.props.labelKey
                ? this.getResource(this.props.labelKey) + ": "
                : "") + this.renderChosenWayOfRepresentation()}
            {
                this.model.otherWay
                    ? <>: {this.model.text}</>
                    : null
            }
        </>
    }

    private renderChosenWayOfRepresentation() {
        if (this.model.jointly)
            return this.getResource('GL_TOGETHER_L')
        else if (this.model.severally)
            return this.getResource('GL_SEPARATELY_L')
        else if (this.model.otherWay)
            return this.getResource('GL_OTHER_WAY_L')
        else
            return null;
    }

    @action private handleChange(e: any) {
        if (e.target.value == 'jointly') {
            this.model.jointly = true;
            this.model.severally = false;
            this.model.otherWay = false;
        } else if (e.target.value == 'severally') {
            this.model.jointly = false;
            this.model.severally = true;
            this.model.otherWay = false;
        } else if (e.target.value == 'otherWay') {
            this.model.jointly = false;
            this.model.severally = false;
            this.model.otherWay = true;
        }

        this.model.text = "";
    }
}

export const F011_WayOfRepresentationFieldUI = withFieldRecordContainer(WayOfRepresentationUIImpl, { fieldLabelTextKey: "CR_F_11_L" });

export const F02203_ForeignTraderWayOfRepresentationUI = withRecordContainer(WayOfRepresentationUIImpl);