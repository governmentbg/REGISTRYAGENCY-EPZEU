import { ObjectHelper } from "Cnsys.Core";
import { EPZEUBaseComponent } from 'EPZEU.Core';
import { FieldContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { F006_SubjectOfActivity } from '../../Models/Fields/ModelsAutoGenerated';

interface F006_SubjectOfActivityProps extends FieldContainerProps {
    showIsBank?: boolean;
    showIsInsurer?: boolean;
    bankLabelKey?: string;
    insurerLabelKey?: string;
}

@observer class F006_SubjectOfActivityUI extends EPZEUBaseComponent<F006_SubjectOfActivityProps, F006_SubjectOfActivity> {

    renderEdit(): JSX.Element {
        return (<>
            <div className="row">
                <div className="form-group col-12">
                    {this.textAreaFor(x => x.text)}
                </div>
                {this.props.showIsBank || this.props.showIsInsurer ?
                    <div className="form-group col-12">
                        {this.props.showIsBank === true ? <div className="custom-control custom-checkbox">{this.checkBoxFor(x => x.isBank, this.props.bankLabelKey ? this.props.bankLabelKey : "CR_GL_BANK_COMPANY_L", null, this.handleChange.bind(this, 'bank'))}</div> : null}
                        {this.props.showIsInsurer === true ? <div className="custom-control custom-checkbox">{this.checkBoxFor(x => x.isInsurer, this.props.insurerLabelKey ? this.props.insurerLabelKey : "CR_GL_INSURANCE_COMPANY_L", null, this.handleChange.bind(this, 'insurance'))}</div> : null}
                    </div>
                    : null}
            </div>
        </>)
    }

    renderDisplay(): JSX.Element {
        return (<>
            {!ObjectHelper.isStringNullOrEmpty(this.model.text) ? <span className="preserve-line-breaks">{this.model.text}</span> : null}
            {this.model.isBank && <div>{this.props.bankLabelKey ? this.getResource(this.props.bankLabelKey) : this.getResource("CR_GL_BANK_COMPANY_L")}</div>}
            {this.model.isInsurer && <div>{this.props.insurerLabelKey ? this.getResource(this.props.insurerLabelKey) : this.getResource("CR_GL_INSURANCE_COMPANY_L")}</div>}
        </>);
    }

    @action handleChange(type: string, event: any) {
        if (type == 'bank') {
            if (event.target.checked)
                this.model.isBankText = this.props.bankLabelKey ? this.getResource(this.props.bankLabelKey) : this.getResource("CR_GL_BANK_COMPANY_L");
            else
                this.model.isBankText = null;
        } else if (type == 'insurance') {
            if (event.target.checked)
                this.model.isInsurerText = this.props.insurerLabelKey ? this.getResource(this.props.insurerLabelKey) : this.getResource("CR_GL_INSURANCE_COMPANY_L");
            else
                this.model.isInsurerText = null;
        }
    }
}

export const F006_SubjectOfActivityFieldUI = withFieldRecordContainer(F006_SubjectOfActivityUI, {
    fieldLabelTextKey: "CR_F_6_L",
    isMandatoryField: true,
    fieldLabelFor: (model: F006_SubjectOfActivity) => model.text
});