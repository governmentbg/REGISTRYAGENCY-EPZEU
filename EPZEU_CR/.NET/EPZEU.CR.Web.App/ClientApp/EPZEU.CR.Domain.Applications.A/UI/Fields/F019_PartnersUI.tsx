import { attributesClassFormControl, attributesClassFormControlMaxL10, attributesClassFormControlMaxL13TextRight, AutoComplete, Country, EPZEUBaseComponent, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { IndentTypes, InputInfoUI, ListRecordsContainerProps, Person, withFieldSingleListRecordsContainer } from 'EPZEU.CR.Domain';
import { action } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F0190_Partner } from '../../Models/Fields/ModelsAutoGenerated';

var infoTextKeys1 = ["CR_APP_00081_I"];

@observer class F019_PartnerUI extends EPZEUBaseComponent<ListRecordsContainerProps, F0190_Partner> {

    constructor(props?: any) {
        super(props);

        this.selectCountry = this.selectCountry.bind(this);
        this.showCountryValue = this.showCountryValue.bind(this);
        this.handleCountrySelectOption = this.handleCountrySelectOption.bind(this);
        this.handleCountryChangeCallBack = this.handleCountryChangeCallBack.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.subject.name, 'CR_GL_00005_L')}
                        {this.textBoxFor(m => m.subject.name)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.subject.indent, 'CR_APP_00004_L')}
                        {this.textBoxFor(m => m.subject.indent, attributesClassFormControlMaxL10)}
                        <InputInfoUI infoTextKey={infoTextKeys1} />
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.share, 'CR_GL_PARTICIPATION_AMOUND_L')}
                        <div className="row">
                            <div className="form-group col">
                                <div className="form-row">
                                    <div className="form-group col">
                                        {this.textBoxFor(x => x.share, attributesClassFormControlMaxL13TextRight, null)}
                                    </div>
                                    <div className="col-auto">
                                        <div className="col-form-label">{this.getResource("GL_BGN_ABBRAVETION_L")}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 inline-control">
                        <label className="d-none d-sm-block d-md-block" aria-hidden="true">&nbsp;</label>
                        <div className="form-inline">
                            <div className="custom-control-inline custom-control custom-checkbox">
                                {this.checkBoxFor(m => m.subject.isForeignTrader, "CR_GL_FOREIGN_LEGAL_ENTITY_L")}
                            </div>
                        </div>
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.subject.countryName, 'GL_COUNTRY_L')}
                        <AutoComplete {...this.bind(m => m.subject.countryName)}
                            selector={this.selectCountry}
                            showValue={this.showCountryValue}
                            handleSelectCallback={this.handleCountrySelectOption}
                            handleChangeCallback={this.handleCountryChangeCallBack}
                            hasSelectedValue={!!this.model.subject.countryID}
                            triggerLength={1}
                            attributes={attributesClassFormControl}/>
                    </div>
                </div>
            </>);
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {this.model.subject && this.model.subject.name && <>{this.model.subject.name}</>}
                {/*дали да покаже запетайка*/(this.model.subject.name && (this.model.subject.indent || this.model.share || this.model.subject.countryName)) && <>, </>}
                {this.model.subject && this.model.subject.indent && <>{this.getResource(this.getIdentResourceKeyForDisplay())}: {this.model.subject.indent}</>}
                {/*дали да покаже запетайка*/(this.model.subject.indent && (this.model.subject.countryName || this.model.share)) && <>, </>}
                {this.model.share && <>{` ${this.getResource("CR_GL_PARTICIPATION_AMOUND_L")}: ${this.model.share} ${this.getResource('GL_BGN_ABBRAVETION_L')}`}</>}
                {/*дали да покаже запетайка*/(this.model.share && this.model.subject.countryName) && <>, </>}
                {this.model.subject && this.model.subject.countryName && <>{this.getResource('GL_COUNTRY_L')}: {this.model.subject.countryName}</>}
                {this.model.subject && this.model.subject.isForeignTrader && <><br />{this.getResource("CR_GL_FOREIGN_LEGAL_ENTITY_L")}</>}
            </>
        );
    }

    getIdentResourceKeyForDisplay() {
        if (this.model.subject == null || this.model.subject == undefined)
            return 'CR_APP_00004_L';//ЕГН/ЛНЧ/ЕИК/БУЛСТАТ/Дата на раждане
        else if (this.model.subject.indentType == IndentTypes.EGN)
            return 'GL_BULGARIAN_PERSON_ID_L';
        else if (this.model.subject.indentType == IndentTypes.LNCH)
            return 'GL_FOREIGN_PERSON_ID_L';
        else if (this.model.subject.indentType == IndentTypes.BirthDate)
            return 'GL_BIRTH_DATE_L';
        else if (this.model.subject.indentType == IndentTypes.UIC)
            return 'GL_COMPANY_ID_L';
        else if (this.model.subject.indentType == IndentTypes.Bulstat)
            return 'GL_BULSTAT_L';
        else
            return 'CR_APP_00004_L';//ЕГН/ЛНЧ/ЕИК/БУЛСТАТ/Дата на раждане
    }

    //#region
    //Country

    selectCountry(value: string): Promise<Country[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCountries().then(s => s.filter(s => s.name.toLowerCase().indexOf(valueLowerCase) > -1));
        else
            return Promise.resolve([]);
    }

    showCountryValue(value: Country): string {
        return value.name;
    }

    @action handleCountryChangeCallBack() {
        this.model.subject.countryID = null;
        this.model.subject.countryCode = null;
    }

    @action handleCountrySelectOption(value?: Country) {
        if (value) {
            this.model.subject.countryName = value.name;
            this.model.subject.countryID = value.id;
            this.model.subject.countryCode = value.code;
        }
    }

    //#endregion
}
export const F019_PartnersFieldUI = withFieldSingleListRecordsContainer(F019_PartnerUI, F0190_Partner, {
    addButtonLabelKey: "CR_APP_ADD_PARTNER_L",
    listSelector: m => m.partnersList,
    fieldLabelTextKey: "CR_F_19_L",
    hasAtLeastOneRecord: true,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "subject."],
    newRecordCtor: () => {
        return Nomenclatures.getBGCountry().then(bgCountry => {
            var partner = new F0190_Partner();

            partner.subject = new Person();
            partner.subject.countryCode = bgCountry.code;
            partner.subject.countryID = bgCountry.id;
            partner.subject.countryName = bgCountry.name;

            return partner;
        })
    }
})