import { TypeSystem } from 'Cnsys.Core'
import { ApplicationWithFieldsFormBase } from 'EPZEU.CR.Domain'
import { moduleContext } from '../../ModuleContext'
import { ApplicationFormAFieldsBase, A4Fields, A1Fields, A2Fields, A3Fields, A5Fields, A6Fields, A7Fields, A8Fields, A9Fields, A10Fields, A11Fields, A12Fields, A13Fields, A14Fields, A15Fields, A16Fields, A17Fields, A18Fields } from './ModelsAutoGenerated'

@TypeSystem.typeDecorator('ApplicationFormABase', moduleContext.moduleName)
export class ApplicationFormABase<T extends ApplicationFormAFieldsBase> extends ApplicationWithFieldsFormBase<T> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}

@TypeSystem.typeDecorator('A1', moduleContext.moduleName)
export class A1 extends ApplicationFormABase<A1Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A1Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A2', moduleContext.moduleName)
export class A2 extends ApplicationFormABase<A2Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A2Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A3', moduleContext.moduleName)
export class A3 extends ApplicationFormABase<A3Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A3Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A4', moduleContext.moduleName)
export class A4 extends ApplicationFormABase<A4Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A4Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A5', moduleContext.moduleName)
export class A5 extends ApplicationFormABase<A5Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A5Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A6', moduleContext.moduleName)
export class A6 extends ApplicationFormABase<A6Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A6Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A7', moduleContext.moduleName)
export class A7 extends ApplicationFormABase<A7Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A7Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A8', moduleContext.moduleName)
export class A8 extends ApplicationFormABase<A8Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A8Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A9', moduleContext.moduleName)
export class A9 extends ApplicationFormABase<A9Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A9Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A10', moduleContext.moduleName)
export class A10 extends ApplicationFormABase<A10Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A10Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A11', moduleContext.moduleName)
export class A11 extends ApplicationFormABase<A11Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A11Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A12', moduleContext.moduleName)
export class A12 extends ApplicationFormABase<A12Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A12Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A13', moduleContext.moduleName)
export class A13 extends ApplicationFormABase<A13Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A13Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A14', moduleContext.moduleName)
export class A14 extends ApplicationFormABase<A14Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A14Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A15', moduleContext.moduleName)
export class A15 extends ApplicationFormABase<A15Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A15Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A16', moduleContext.moduleName)
export class A16 extends ApplicationFormABase<A16Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A16Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A17', moduleContext.moduleName)
export class A17 extends ApplicationFormABase<A17Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A17Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('A18', moduleContext.moduleName)
export class A18 extends ApplicationFormABase<A18Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new A18Fields(obj.fields);
        }
    }
}