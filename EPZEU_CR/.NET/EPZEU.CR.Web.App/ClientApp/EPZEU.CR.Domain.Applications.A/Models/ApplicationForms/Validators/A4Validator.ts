import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A4 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F007_ManagersValidator } from '../../Fields/Validators/F007_ManagersValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F016_TermsOfPartnershipValidator } from '../../Fields/Validators/F016_TermsOfPartnershipValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F019_PartnersValidator } from '../../Fields/Validators/F019_PartnersValidator';
import { F023_SoleCapitalOwnerValidator } from '../../Fields/Validators/F023_SoleCapitalOwnerValidator';
import { F024_ShareTransfersValidator } from '../../Fields/Validators/F024_ShareTransfersValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { F031_FundsValidator } from '../../Fields/Validators/F031_FundsValidator';
import { F032_DepositedFundsValidator } from '../../Fields/Validators/F032_DepositedFundsValidator';
import { F033_NonMonetaryDepositsValidator } from '../../Fields/Validators/F033_NonMonetaryDepositsValidator';
import { A4Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A4Validator extends ApplicationFormAValidator<A4> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A4FieldsValidator());
    }

    public validate(obj: A4): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A4FieldsValidator extends ApplicationFormAFieldsBaseValidator<A4Fields>{
    constructor() {
        super();

        //Осн. обстоятелства 1
        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());

        //Осн. обстоятелства 2
        this.ruleFor(m => m.managers).setValidator(new F007_ManagersValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.termsOfPartnership).setValidator(new F016_TermsOfPartnershipValidator());
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator);

        //Осн. обстоятелства 3
        this.ruleFor(m => m.partners).setValidator(new F019_PartnersValidator());
        this.ruleFor(m => m.soleCapitalOwner).setValidator(new F023_SoleCapitalOwnerValidator());
        this.ruleFor(m => m.shareTransfers).setValidator(new F024_ShareTransfersValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());

        //Капитал
        this.ruleFor(m => m.funds).setValidator(new F031_FundsValidator());
        this.ruleFor(m => m.depositedFunds).setValidator(new F032_DepositedFundsValidator());
        this.ruleFor(m => m.nonMonetaryDeposits).setValidator(new F033_NonMonetaryDepositsValidator());
    }

    public validate(obj: A4Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let cntNotEmptyManagers: number = ArrayHelper.queryable.from(obj.managers.managersList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
        let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.managers.managersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                if (cntNotEmptyManagers > 1 && !wayOfRepresentationSelected) {
                    //Когато са налични повече от един менаджъра трябва да бъде избран "Начин на представяне"
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00020_E'));
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyManagers < 2) {
                    //"Начин на представяне" може да бъде избран само когато има повече от един менаджъра.
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00007_E'));
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.partners.partnersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.soleCapitalOwner], true)) {

            let cntNotEmptyPartners: number = ArrayHelper.queryable.from(obj.partners.partnersList).where(m => !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject") && m.recordOperation != RecordOperations.Erase).count();
            if ((this.validationContext.processStates != ProcessStates.ForChange) && (cntNotEmptyPartners < 2) && (ValidatorHelpers.isObjectWithPersonEmpty(obj.soleCapitalOwner, "subject"))) {
                // Задължително е да има попълнен или едноличен собственик или поне 2 съдружници.   
                obj.soleCapitalOwner.clearErrors();
                obj.soleCapitalOwner.addError(this.getMessage('CR_APP_00011_E')); //Попълнете поле "Едноличен собственик на капитала" или го оставете празно и попълнете поне двама съдружника. 
                isValid = false;
            }

            let ident: string = obj.soleCapitalOwner.subject.indent;
            let cntPartnersWithSomeIdent = ArrayHelper.queryable.from(obj.partners.partnersList).where(m => m.subject.indent == ident && m.recordOperation != RecordOperations.Erase && m.subject.indent != "").count();
            if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.soleCapitalOwner, "subject") && obj.soleCapitalOwner.recordOperation != RecordOperations.Erase && cntPartnersWithSomeIdent > 0) {
                // Това е подсказка, че системата ще запази само едноличния собственик на капитала.
                obj.soleCapitalOwner.clearErrors();
                obj.soleCapitalOwner.addError(this.getMessage('CR_APP_00019_E'));//Има съвпадение на въведените данни в поле 19. "Съдружници" и в поле 23. "Едноличен собственик на капитала". 
                isValid = false;
            }
        }

        //Поле 31
        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.funds], true)) {
            if (ObjectHelper.isStringNullOrEmpty(obj.funds.text)) {
                obj.funds.addError('text', this.getMessage('GL_INPUT_FIELD_MUST_E'));
                isValid = false;
            }
        }

        return isValid;
    }
}