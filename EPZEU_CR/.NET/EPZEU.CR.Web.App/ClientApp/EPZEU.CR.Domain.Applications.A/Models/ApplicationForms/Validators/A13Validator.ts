import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A13 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F010_RepresentativesValidator } from '../../Fields/Validators/F010_RepresentativesValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F012a_BoardOfManagers3Validator } from '../../Fields/Validators/F012a_BoardOfManagers3Validator';
import { F012b_AdministrativeBoardValidator } from '../../Fields/Validators/F012b_AdministrativeBoardValidator';
import { F012v_AdministrativeBoardSupportersValidator } from '../../Fields/Validators/F012v_AdministrativeBoardSupportersValidator';
import { F013v_BoardOfManagersSupporters2Validator } from '../../Fields/Validators/F013v_BoardOfManagersSupporters2Validator';
import { F014b_SupervisingBoard2Validator } from '../../Fields/Validators/F014b_SupervisingBoard2Validator';
import { F014v_SupervisingBoardSupportersValidator } from '../../Fields/Validators/F014v_SupervisingBoardSupportersValidator';
import { F016_TermsOfPartnershipValidator } from '../../Fields/Validators/F016_TermsOfPartnershipValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F025_SharePaymentResponsibilityValidator } from '../../Fields/Validators/F025_SharePaymentResponsibilityValidator';
import { F027a_AddemptionOfTraderSeatChangeValidator } from '../../Fields/Validators/F027a_AddemptionOfTraderSeatChangeValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { F031b_MinimumAmountValidator } from '../../Fields/Validators/F031b_MinimumAmountValidator';
import { F032_DepositedFundsValidator } from '../../Fields/Validators/F032_DepositedFundsValidator';
import { F033_NonMonetaryDepositsValidator } from '../../Fields/Validators/F033_NonMonetaryDepositsValidator';
import { F070a_WayOfEstablishingEuropeanCooperativeSocietyValidator } from '../../Fields/Validators/F070a_WayOfEstablishingEuropeanCooperativeSocietyValidator';
import { F071_SeatChangeValidator } from '../../Fields/Validators/F071_SeatChangeValidator';
import { A13Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A13Validator extends ApplicationFormAValidator<A13> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A13FieldsValidator());
    }

    public validate(obj: A13): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A13FieldsValidator extends ApplicationFormAFieldsBaseValidator<A13Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.representatives).setValidator(new F010_RepresentativesValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.boardOfManagers3).setValidator(new F012a_BoardOfManagers3Validator());
        this.ruleFor(m => m.administrativeBoard).setValidator(new F012b_AdministrativeBoardValidator());
        this.ruleFor(m => m.administrativeBoardSupporters).setValidator(new F012v_AdministrativeBoardSupportersValidator());
        this.ruleFor(m => m.boardOfManagersSupporters2).setValidator(new F013v_BoardOfManagersSupporters2Validator());
        this.ruleFor(m => m.supervisingBoardSupporters).setValidator(new F014v_SupervisingBoardSupportersValidator());
        this.ruleFor(m => m.supervisingBoard2).setValidator(new F014b_SupervisingBoard2Validator());
        this.ruleFor(m => m.termsOfPartnership).setValidator(new F016_TermsOfPartnershipValidator());
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
        this.ruleFor(m => m.addemptionOfTraderSeatChange).setValidator(new F027a_AddemptionOfTraderSeatChangeValidator());
        this.ruleFor(m => m.wayOfEstablishingEuropeanCooperativeSociety).setValidator(new F070a_WayOfEstablishingEuropeanCooperativeSocietyValidator());
        this.ruleFor(m => m.seatChange).setValidator(new F071_SeatChangeValidator());
        this.ruleFor(m => m.minimumAmount).setValidator(new F031b_MinimumAmountValidator());
        this.ruleFor(m => m.depositedFunds).setValidator(new F032_DepositedFundsValidator());
        this.ruleFor(m => m.nonMonetaryDeposits).setValidator(new F033_NonMonetaryDepositsValidator());
        this.ruleFor(m => m.sharePaymentResponsibility).setValidator(new F025_SharePaymentResponsibilityValidator());
    }

    public validate(obj: A13Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let cntNotEmptyAdministrativeBoard: number = ArrayHelper.queryable.from(obj.administrativeBoard.administrativeBodyList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptyAdministrativeBoardSupporters: number = ArrayHelper.queryable.from(obj.administrativeBoardSupporters.administrativeBoardSupporterList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptyBoardOfManagers3: number = ArrayHelper.queryable.from(obj.boardOfManagers3.boardManagersList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptyBoardOfManagersSupporters2: number = ArrayHelper.queryable.from(obj.boardOfManagersSupporters2.f01340_BoardManagersSupporter2List).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptySupervisingBoard2: number = ArrayHelper.queryable.from(obj.supervisingBoard2.supervisor2List).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptySupervisingBoardSupporters: number = ArrayHelper.queryable.from(obj.supervisingBoardSupporters.supervisingBoardSupporterList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();

        let EmptyBoardOfManagers3 = cntNotEmptyBoardOfManagers3 < 1; //12а
        let EmptyBoardOfManagersSupporters2 = cntNotEmptyBoardOfManagersSupporters2 < 1; //13v
        let EmptyAdministrativeBoard = cntNotEmptyAdministrativeBoard < 1; //12б
        let EmptyAdministrativeBoardSupporters = cntNotEmptyAdministrativeBoardSupporters < 1; //12в
        let EmptySupervisors = cntNotEmptySupervisingBoard2 < 1; //14б
        let EmptySupervisingBoardSupporters = cntNotEmptySupervisingBoardSupporters < 1; //14v

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfManagers3.boardManagersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.administrativeBoard.administrativeBodyList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.supervisingBoard2.supervisor2List, true)) {

            //12-а - задължително за попълване ако не е попълнено поле 12б. Административен орган
            //В случай, че е попълнено 12б, полета 12а и 14б трябва да са празни и обратно
            if ((EmptyBoardOfManagers3 && EmptyAdministrativeBoard) ||
                (!EmptyAdministrativeBoard && (!EmptyBoardOfManagers3 || !EmptySupervisors))) {
                obj.boardOfManagers3.clearErrors();
                obj.boardOfManagers3.addError(this.getMessage('CR_APP_00126_E'));
                isValid = false;
            }

            //12-б - Задължително за попълване ако не са попълнени полета 13б. Ръководен орган и 14б. Надзорен орган
            //В случай, че е попълнено 12б, полета 12а и 14б трябва да са празни и обратно
            if ((EmptyAdministrativeBoard && (EmptyBoardOfManagers3 || EmptySupervisors)) ||
                (!EmptyAdministrativeBoard && (!EmptyBoardOfManagers3 || !EmptySupervisors))) {
                obj.administrativeBoard.clearErrors();
                obj.administrativeBoard.addError(this.getMessage('CR_APP_00126_E'));
                isValid = false;
            }

            //14b - задължително за попълване ако не е попълнено поле 12б. Управителен орган 
            //В случай, че е попълнено 12б, полета 12а и 14б трябва да са празни и обратно
            if ((EmptyAdministrativeBoard && EmptySupervisors) ||
                (!EmptyAdministrativeBoard && (!EmptyBoardOfManagers3 || !EmptySupervisors))) {
                obj.supervisingBoard2.clearErrors();
                obj.supervisingBoard2.addError(this.getMessage('CR_APP_00126_E'));
                isValid = false;
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives.representativeList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
                let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.seatChange, obj.wayOfEstablishingEuropeanCooperativeSociety], true)) {
            //Показваме грешка, когато не е попълнено нито поле 70а, нито поле 71
            //или когато едно от полетата е маркирано за заличаване а другото не е попълнено.
            if ((this.validationContext.isRecordEmpty(obj.wayOfEstablishingEuropeanCooperativeSociety) && this.validationContext.isRecordEmpty(obj.seatChange))
                || (this.validationContext.isRecordEmpty(obj.wayOfEstablishingEuropeanCooperativeSociety) && obj.seatChange.recordOperation == RecordOperations.Erase)
                || (this.validationContext.isRecordEmpty(obj.seatChange) && obj.wayOfEstablishingEuropeanCooperativeSociety.recordOperation == RecordOperations.Erase)) {

                isValid = false;
                obj.wayOfEstablishingEuropeanCooperativeSociety.addError(this.getMessage('CR_APP_00131_E')); //Попълнете начин на учредяване на ЕКД или преместване на седалището от друга държава членка в Република България.
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.administrativeBoardSupporters.administrativeBoardSupporterList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.administrativeBoard.administrativeBoardMandate], true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.administrativeBoard.administrativeBodyList, true)) {

            if (this.validationContext.isRecordEmpty(obj.administrativeBoard.administrativeBoardMandate) && EmptyAdministrativeBoard && !(EmptyAdministrativeBoardSupporters)) {

                isValid = false;
                obj.administrativeBoardSupporters.clearErrors();
                obj.administrativeBoardSupporters.addError(this.getMessage('CR_APP_00250_E'));
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.boardOfManagers3.managerMandate3], true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfManagers3.boardManagersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfManagersSupporters2.f01340_BoardManagersSupporter2List, true)) {

            if (this.validationContext.isRecordEmpty(obj.boardOfManagers3.managerMandate3) && EmptyBoardOfManagers3 && !(EmptyBoardOfManagersSupporters2)) {

                isValid = false;
                obj.boardOfManagersSupporters2.clearErrors();
                obj.boardOfManagersSupporters2.addError(this.getMessage('CR_APP_00252_E'));
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.supervisingBoard2.supervisingBoard2Mandate], true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.supervisingBoard2.supervisor2List, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.supervisingBoardSupporters.supervisingBoardSupporterList, true)) {

            if (this.validationContext.isRecordEmpty(obj.supervisingBoard2.supervisingBoard2Mandate) && EmptySupervisors && !(EmptySupervisingBoardSupporters)) {
                isValid = false;
                obj.supervisingBoardSupporters.clearErrors();
                obj.supervisingBoardSupporters.addError(this.getMessage('CR_APP_00253_E'));
            }
        }

        return isValid;
    }
}