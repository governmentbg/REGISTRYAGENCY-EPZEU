import { ObjectHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A1 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F018_PhysicalPersonTraderValidator } from '../../Fields/Validators/F018_PhysicalPersonTraderValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { A1Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A1Validator extends ApplicationFormAValidator<A1> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A1FieldsValidator());
    }

    public validate(obj: A1): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A1FieldsValidator extends ApplicationFormAFieldsBaseValidator<A1Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.physicalPersonTrader).setValidator(new F018_PhysicalPersonTraderValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
    }

    public validate(obj: A1Fields): boolean {
        let isValid = super.validate(obj);

        if (obj.physicalPersonTrader.recordOperation == RecordOperations.Erase
            || ValidatorHelpers.isObjectWithPersonEmpty(obj, "person")
            || (ObjectHelper.isStringNullOrEmpty(obj.physicalPersonTrader.person.indent) && ObjectHelper.isStringNullOrEmpty(obj.physicalPersonTrader.person.name))
        ) {
            obj.physicalPersonTrader.clearErrors(true);
            obj.physicalPersonTrader.addError(this.getMessage('CR_APP_00041_E')); // Полето "Физическо лице - търговец" е задължително!

            return false;
        }

        return isValid;
    }
}