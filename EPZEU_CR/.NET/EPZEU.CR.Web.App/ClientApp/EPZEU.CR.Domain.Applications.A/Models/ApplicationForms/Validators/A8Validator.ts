import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A8 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F0102_Representatives102Validator } from '../../Fields/Validators/F0102_Representatives102Validator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F022b_InsolvenciesOfForeignTraderValidator } from '../../Fields/Validators/F022b_InsolvenciesOfForeignTraderValidator';
import { F022_ForeignTradersValidator } from '../../Fields/Validators/F022_ForeignTradersValidator';
import { F054a_VolumeOfRepresentationPower541Validator } from '../../Fields/Validators/F054a_VolumeOfRepresentationPower541Validator';
import { A8Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A8Validator extends ApplicationFormAValidator<A8> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A8FieldsValidator());
    }

    public validate(obj: A8): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A8FieldsValidator extends ApplicationFormAFieldsBaseValidator<A8Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.representatives102).setValidator(new F0102_Representatives102Validator());
        this.ruleFor(m => m.volumeOfRepresentationPower541).setValidator(new F054a_VolumeOfRepresentationPower541Validator());
        this.ruleFor(m => m.foreignTraders).setValidator(new F022_ForeignTradersValidator());
        this.ruleFor(m => m.insolvenciesOfForeignTrader).setValidator(new F022b_InsolvenciesOfForeignTraderValidator());
    }

    public validate(obj: A8Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives102.representativeList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
        let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives102.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                    //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}