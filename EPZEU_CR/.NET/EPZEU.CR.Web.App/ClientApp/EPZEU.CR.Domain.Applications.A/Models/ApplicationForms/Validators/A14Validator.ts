import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A14 } from '../../ApplicationForms/ApplicationFormsA';
import { F001a_NumberNationalRegisterValidator } from '../../Fields/Validators/F001a_NumberNationalRegisterValidator';
import { F010_RepresentativesValidator } from '../../Fields/Validators/F010_RepresentativesValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { A14Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A14Validator extends ApplicationFormAValidator<A14> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A14FieldsValidator());
    }

    public validate(obj: A14): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A14FieldsValidator extends ApplicationFormAFieldsBaseValidator<A14Fields>{
    constructor() {
        super();
        this.ruleFor(m => m.numberNationalRegister).setValidator(new F001a_NumberNationalRegisterValidator());
        //Осн. обстоятелства 2
        this.ruleFor(m => m.representatives).setValidator(new F010_RepresentativesValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());

        //Осн. обстоятелства 3
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator);
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
    }

    public validate(obj: A14Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {
                let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives.representativeList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
                let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                    //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}