import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { BG_COUNTRY_ID } from 'EPZEU.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A5 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F010_RepresentativesValidator } from '../../Fields/Validators/F010_RepresentativesValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F012_BoardOfDirectorsValidator } from '../../Fields/Validators/F012_BoardOfDirectorsValidator';
import { F013_BoardOfManagers2Validator } from '../../Fields/Validators/F013_BoardOfManagers2Validator';
import { F014_SupervisingBoardValidator } from '../../Fields/Validators/F014_SupervisingBoardValidator';
import { F016_TermsOfPartnershipValidator } from '../../Fields/Validators/F016_TermsOfPartnershipValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F023b_EuropeanHoldingCompanysAsShareholdersValidator } from '../../Fields/Validators/F023b_EuropeanHoldingCompanysAsShareholdersValidator';
import { F023_SoleCapitalOwnerValidator } from '../../Fields/Validators/F023_SoleCapitalOwnerValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { F031a_SharesValidator } from '../../Fields/Validators/F031a_SharesValidator';
import { F031_FundsValidator } from '../../Fields/Validators/F031_FundsValidator';
import { F032_DepositedFundsValidator } from '../../Fields/Validators/F032_DepositedFundsValidator';
import { F033_NonMonetaryDepositsValidator } from '../../Fields/Validators/F033_NonMonetaryDepositsValidator';
import { F034_BuyBackDecisionValidator } from '../../Fields/Validators/F034_BuyBackDecisionValidator';
import { A5Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A5Validator extends ApplicationFormAValidator<A5> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A5FieldsValidator());
    }

    public validate(obj: A5): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A5FieldsValidator extends ApplicationFormAFieldsBaseValidator<A5Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.representatives).setValidator(new F010_RepresentativesValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.boardOfDirectors).setValidator(new F012_BoardOfDirectorsValidator());
        this.ruleFor(m => m.boardOfManagers2).setValidator(new F013_BoardOfManagers2Validator());
        this.ruleFor(m => m.supervisingBoard).setValidator(new F014_SupervisingBoardValidator());
        this.ruleFor(m => m.termsOfPartnership).setValidator(new F016_TermsOfPartnershipValidator());
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator);
        this.ruleFor(m => m.soleCapitalOwner).setValidator(new F023_SoleCapitalOwnerValidator());
        this.ruleFor(m => m.europeanHoldingCompanysAsShareholders).setValidator(new F023b_EuropeanHoldingCompanysAsShareholdersValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());

        //Капитал
        this.ruleFor(m => m.funds).setValidator(new F031_FundsValidator());
        this.ruleFor(m => m.shares).setValidator(new F031a_SharesValidator());
        this.ruleFor(m => m.depositedFunds).setValidator(new F032_DepositedFundsValidator());
        this.ruleFor(m => m.nonMonetaryDeposits).setValidator(new F033_NonMonetaryDepositsValidator());
        this.ruleFor(m => m.buyBackDecision).setValidator(new F034_BuyBackDecisionValidator());
    }

    public validate(obj: A5Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives.representativeList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
        let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {
                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                    //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                    isValid = false;
                }
            }
        }

        //Задължително е попълването на едно от двете полета 12 - Съвет на директорите или 13 - Управителен съвет
        let isFilledboardOfManagers = false; //13
        let isFilledBoardOfDirectors = false; //12

        for (var i = 0; i < obj.boardOfDirectors.directorList.length; i++) {
            if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.boardOfDirectors.directorList[i], "subject") && obj.boardOfDirectors.directorList[i].recordOperation != RecordOperations.Erase) {
                isFilledBoardOfDirectors = true;
                break;
            }
        }

        for (var i = 0; i < obj.boardOfManagers2.boardManager2List.length; i++) {
            if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.boardOfManagers2.boardManager2List[i], "subject") && obj.boardOfManagers2.boardManager2List[i].recordOperation != RecordOperations.Erase) {
                isFilledboardOfManagers = true;
                break;
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfDirectors.directorList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfManagers2.boardManager2List, true)) {

            if (!isFilledboardOfManagers && !isFilledBoardOfDirectors) {
                obj.boardOfDirectors.clearErrors();
                obj.boardOfManagers2.clearErrors();

                //Задължително е попълването поне на един "Член на Управителен съвет" или поне един член на "Съвет на директорите"! 
                obj.boardOfDirectors.addError(this.getMessage("CR_APP_00056_E"));
                obj.boardOfManagers2.addError(this.getMessage("CR_APP_00056_E"));
                isValid = false;
            } else {
                obj.boardOfDirectors.clearErrors();
                obj.boardOfManagers2.clearErrors();
            }
        }

        //Ако е попълнено поле 13 то поле 14 е задължително.        
        if (isFilledboardOfManagers
            || (obj.boardOfManagers2.managerMandate2.recordOperation != RecordOperations.Erase
                && (!ObjectHelper.isNullOrUndefined(obj.boardOfManagers2.managerMandate2.date) || !ObjectHelper.isStringNullOrEmpty(obj.boardOfManagers2.managerMandate2.mandateTypeText)))) {

            //Ако не е попълнено нищо от поле 14

            let isFilledSupervisingBoard = false; //14

            for (var i = 0; i < obj.supervisingBoard.supervisorList.length; i++) {

                if (obj.supervisingBoard.supervisorList[i].recordOperation != RecordOperations.Erase) {

                    if (!ObjectHelper.isStringNullOrEmpty(obj.supervisingBoard.supervisorList[i].subject.name)
                        || !ObjectHelper.isStringNullOrEmpty(obj.supervisingBoard.supervisorList[i].subject.indent)
                        || obj.supervisingBoard.supervisorList[i].subject.isForeignTrader) {
                        isFilledSupervisingBoard = true;
                        break;

                    } else
                        if ((obj.supervisingBoard.supervisorList[i].subject.countryID != null
                            && obj.supervisingBoard.supervisorList[i].subject.countryID != undefined)
                            && obj.supervisingBoard.supervisorList[i].subject.countryID != BG_COUNTRY_ID) {

                            isFilledSupervisingBoard = true;
                            break;
                        }
                }
            }

            if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfManagers2.boardManager2List, true)
                || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.supervisingBoard.supervisorList, true)) {

                if (!isFilledSupervisingBoard) {
                    //Полето е задължително, когато поле "Управителен съвет" е попълнено! 
                    obj.supervisingBoard.clearErrors();
                    obj.supervisingBoard.addError(this.getMessage("CR_APP_00058_E"));
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList, true)) {

            //поле 23б
            for (var i = 0; i < obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList.length; i++) {
                if (!this.validationContext.isRecordEmpty(obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i])) {

                    if (ObjectHelper.isStringNullOrEmpty(obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].subject.indent) && ObjectHelper.isStringNullOrEmpty(obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].subject.name)) {
                        obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].clearErrors();
                        obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].addError(this.getMessage('CR_APP_00057_E')); //Попълнете данни за холдингово дружество. 
                        isValid = false;
                    }
                }
            }
        }

        //Поле 31
        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.funds], true)) {
            if (ObjectHelper.isStringNullOrEmpty(obj.funds.text)) {
                obj.funds.addError('text', this.getMessage('GL_INPUT_FIELD_MUST_E'));
                isValid = false;
            }
        }

        return isValid;
    }
}