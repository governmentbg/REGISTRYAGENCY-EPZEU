import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A17 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F0103_Representatives103Validator } from '../../Fields/Validators/F0103_Representatives103Validator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F013g_BoardOfTrusties13gValidator } from '../../Fields/Validators/F013g_BoardOfTrusties13gValidator';
import { F015b_VerificationCommission15bValidator } from '../../Fields/Validators/F015b_VerificationCommission15bValidator';
import { F025v_SourcesOfInitialFinancing25vValidator } from '../../Fields/Validators/F025v_SourcesOfInitialFinancing25vValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { A17Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A17Validator extends ApplicationFormAValidator<A17> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A17FieldsValidator());
    }

    public validate(obj: A17): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A17FieldsValidator extends ApplicationFormAFieldsBaseValidator<A17Fields>{
    constructor() {
        super();
        //Осн. обстоятелства 1
        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());

        //Осн. обстоятелства 2
        this.ruleFor(m => m.representatives103).setValidator(new F0103_Representatives103Validator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());

        //Осн. обстоятелства 3
        this.ruleFor(m => m.boardOfTrusties13g).setValidator(new F013g_BoardOfTrusties13gValidator());
        this.ruleFor(m => m.verificationCommission15b).setValidator(new F015b_VerificationCommission15bValidator());
        this.ruleFor(m => m.sourcesOfInitialFinancing25v).setValidator(new F025v_SourcesOfInitialFinancing25vValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
    }

    public validate(obj: A17Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives103.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives103.representativeList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "person")).count();
                let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I')); //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00072_E')); //Начин на представляване трябва да бъде попълнено, само когато представителите са повече от един.
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}