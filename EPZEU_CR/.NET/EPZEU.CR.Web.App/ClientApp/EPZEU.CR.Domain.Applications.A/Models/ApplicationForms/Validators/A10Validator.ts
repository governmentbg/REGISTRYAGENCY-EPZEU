import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A10 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F007_ManagersValidator } from '../../Fields/Validators/F007_ManagersValidator';
import { F008_WayOfManagementValidator } from '../../Fields/Validators/F008_WayOfManagementValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F016b_TermOfExistingEUIEValidator } from '../../Fields/Validators/F016b_TermOfExistingEUIEValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F020a_UnlimitedLiabilityPartnersEUIEValidator } from '../../Fields/Validators/F020a_UnlimitedLiabilityPartnersEUIEValidator';
import { F027a_AddemptionOfTraderSeatChangeValidator } from '../../Fields/Validators/F027a_AddemptionOfTraderSeatChangeValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { F060_DivisionsOfEuropeanUnificationValidator } from '../../Fields/Validators/F060_DivisionsOfEuropeanUnificationValidator';
import { F071_SeatChangeValidator } from '../../Fields/Validators/F071_SeatChangeValidator';
import { A10Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A10Validator extends ApplicationFormAValidator<A10> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A10FieldsValidator());
    }

    public validate(obj: A10): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A10FieldsValidator extends ApplicationFormAFieldsBaseValidator<A10Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.managers).setValidator(new F007_ManagersValidator());
        this.ruleFor(m => m.wayOfManagement).setValidator(new F008_WayOfManagementValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.termOfExistingEUIE).setValidator(new F016b_TermOfExistingEUIEValidator());
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator());
        this.ruleFor(m => m.unlimitedLiabilityPartnersEUIE).setValidator(new F020a_UnlimitedLiabilityPartnersEUIEValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
        this.ruleFor(m => m.addemptionOfTraderSeatChange).setValidator(new F027a_AddemptionOfTraderSeatChangeValidator());
        this.ruleFor(m => m.seatChange).setValidator(new F071_SeatChangeValidator());
        this.ruleFor(m => m.divisionsOfEuropeanUnification).setValidator(new F060_DivisionsOfEuropeanUnificationValidator());
    }

    public validate(obj: A10Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;
        let wayOfManagementSelected: boolean = (obj.wayOfManagement.jointly || obj.wayOfManagement.severally || obj.wayOfManagement.otherWay) && obj.wayOfManagement.recordOperation != RecordOperations.Erase;

        let cntNotEmptyManagers: number = ArrayHelper.queryable.from(obj.managers.managersList).where(m => !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject") && m.recordOperation != RecordOperations.Erase).count();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.managers.managersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfManagement], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfManagement, valCtx)) {

                //Начин на управление
                if (cntNotEmptyManagers > 1 && !wayOfManagementSelected) {
                    obj.wayOfManagement.clearErrors();
                    obj.wayOfManagement.addError(this.getMessage('CR_APP_00042_E'));//Полето "Начин на управление" е задължително, когато управителите са повече от един.
                    isValid = false;
                }

                if (wayOfManagementSelected && obj.wayOfManagement.recordOperation != RecordOperations.Erase && cntNotEmptyManagers < 2) {
                    obj.wayOfManagement.clearErrors();
                    obj.wayOfManagement.addError(this.getMessage('CR_APP_00043_E')); //Полето "Начин на управление" трябва да се избере когато лицата, на които е възложено управлението са повече от един.
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.managers.managersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                //Начин на представляване
                if (cntNotEmptyManagers > 1 && !wayOfRepresentationSelected) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00020_E'));//"Начин на представляване" е задължително, когато управителите са повече от един!
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyManagers < 2) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00007_E')); //Начин на представляване трябва да бъде избран само когато има повече от един управител.

                    isValid = false;
                }
            }
        }

        return isValid;
    }
}