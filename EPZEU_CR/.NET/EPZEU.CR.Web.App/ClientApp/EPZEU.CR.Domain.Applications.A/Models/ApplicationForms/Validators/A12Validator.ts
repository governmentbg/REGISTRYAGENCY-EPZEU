import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { DomainModelHepler, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A12 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F010_RepresentativesValidator } from '../../Fields/Validators/F010_RepresentativesValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F012a_BoardOfManagers3Validator } from '../../Fields/Validators/F012a_BoardOfManagers3Validator';
import { F013b_LeadingBoardValidator } from '../../Fields/Validators/F013b_LeadingBoardValidator';
import { F014b_SupervisingBoard2Validator } from '../../Fields/Validators/F014b_SupervisingBoard2Validator';
import { F016_TermsOfPartnershipValidator } from '../../Fields/Validators/F016_TermsOfPartnershipValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F023b_EuropeanHoldingCompanysAsShareholdersValidator } from '../../Fields/Validators/F023b_EuropeanHoldingCompanysAsShareholdersValidator';
import { F023_SoleCapitalOwnerValidator } from '../../Fields/Validators/F023_SoleCapitalOwnerValidator';
import { F024a_HiddenNonMonetaryDepositValidator } from '../../Fields/Validators/F024a_HiddenNonMonetaryDepositValidator';
import { F027a_AddemptionOfTraderSeatChangeValidator } from '../../Fields/Validators/F027a_AddemptionOfTraderSeatChangeValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { F031a_SharesValidator } from '../../Fields/Validators/F031a_SharesValidator';
import { F031_FundsValidator } from '../../Fields/Validators/F031_FundsValidator';
import { F032_DepositedFundsValidator } from '../../Fields/Validators/F032_DepositedFundsValidator';
import { F033_NonMonetaryDepositsValidator } from '../../Fields/Validators/F033_NonMonetaryDepositsValidator';
import { F034_BuyBackDecisionValidator } from '../../Fields/Validators/F034_BuyBackDecisionValidator';
import { F070_WayOfEstablishingEuropeanCompanyValidator } from '../../Fields/Validators/F070_WayOfEstablishingEuropeanCompanyValidator';
import { F071_SeatChangeValidator } from '../../Fields/Validators/F071_SeatChangeValidator';
import { A12Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';


export class A12Validator extends ApplicationFormAValidator<A12> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A12FieldsValidator());
    }

    public validate(obj: A12): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A12FieldsValidator extends ApplicationFormAFieldsBaseValidator<A12Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.representatives).setValidator(new F010_RepresentativesValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.boardOfManagers3).setValidator(new F012a_BoardOfManagers3Validator());
        this.ruleFor(m => m.leadingBoard).setValidator(new F013b_LeadingBoardValidator());
        this.ruleFor(m => m.supervisingBoard2).setValidator(new F014b_SupervisingBoard2Validator());
        this.ruleFor(m => m.termsOfPartnership).setValidator(new F016_TermsOfPartnershipValidator());
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator());
        this.ruleFor(m => m.soleCapitalOwner).setValidator(new F023_SoleCapitalOwnerValidator());
        this.ruleFor(m => m.europeanHoldingCompanysAsShareholders).setValidator(new F023b_EuropeanHoldingCompanysAsShareholdersValidator());
        this.ruleFor(m => m.hiddenNonMonetaryDeposit).setValidator(new F024a_HiddenNonMonetaryDepositValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
        this.ruleFor(m => m.addemptionOfTraderSeatChange).setValidator(new F027a_AddemptionOfTraderSeatChangeValidator());
        this.ruleFor(m => m.wayOfEstablishingEuropeanCompany).setValidator(new F070_WayOfEstablishingEuropeanCompanyValidator());
        this.ruleFor(m => m.seatChange).setValidator(new F071_SeatChangeValidator());
        this.ruleFor(m => m.funds).setValidator(new F031_FundsValidator());
        this.ruleFor(m => m.shares).setValidator(new F031a_SharesValidator());
        this.ruleFor(m => m.depositedFunds).setValidator(new F032_DepositedFundsValidator());
        this.ruleFor(m => m.nonMonetaryDeposits).setValidator(new F033_NonMonetaryDepositsValidator());
        this.ruleFor(m => m.buyBackDecision).setValidator(new F034_BuyBackDecisionValidator());
    }

    public validate(obj: A12Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let cntNotEmptyBoardOfManagers3: number = ArrayHelper.queryable.from(obj.boardOfManagers3.boardManagersList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptyLeaders: number = ArrayHelper.queryable.from(obj.leadingBoard.leaderList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();
        let cntNotEmptySupervisors: number = ArrayHelper.queryable.from(obj.supervisingBoard2.supervisor2List).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();

        let EmptyBoardOfManagers3 = cntNotEmptyBoardOfManagers3 < 1; //12а
        let EmptyLeaders = cntNotEmptyLeaders < 1; //13б
        let EmptySupervisors = cntNotEmptySupervisors < 1; //14б

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardOfManagers3.boardManagersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.leadingBoard.leaderList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.supervisingBoard2.supervisor2List, true)) {

            //12-а - Задължително за попълване ако не са попълнени полета 13б. Ръководен орган и 14б. Надзорен орган
            //В случай, че е попълнено 12а, полета 13б и 14б трябва да са празни и обратно
            if ((EmptyBoardOfManagers3 && (EmptyLeaders || EmptySupervisors)) || (!EmptyBoardOfManagers3 && (!EmptyLeaders || !EmptySupervisors))) {
                obj.boardOfManagers3.clearErrors();
                obj.boardOfManagers3.addError(this.getMessage('CR_APP_00097_E'));
                isValid = false;
            }

            //13b - задължително за попълване ако не е попълнено поле 12а. Управителен орган 
            //В случай, че е попълнено 12а, полета 13б и 14б трябва да са празни и обратно
            if ((EmptyBoardOfManagers3 && EmptyLeaders) ||
                (!EmptyBoardOfManagers3 && (!EmptyLeaders || !EmptySupervisors))) {
                obj.leadingBoard.clearErrors();
                obj.leadingBoard.addError(this.getMessage('CR_APP_00097_E'));
                isValid = false;
            }

            //14b - задължително за попълване ако не е попълнено поле 12а. Управителен орган 
            //В случай, че е попълнено 12а, полета 13б и 14б трябва да са празни и обратно
            if ((EmptyBoardOfManagers3 && EmptySupervisors) ||
                (!EmptyBoardOfManagers3 && (!EmptyLeaders || !EmptySupervisors))) {
                obj.supervisingBoard2.clearErrors();
                obj.supervisingBoard2.addError(this.getMessage('CR_APP_00097_E'));
                isValid = false;
            }
        }

        let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives.representativeList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfEstablishingEuropeanCompany, obj.seatChange], true)) {
            //Показваме грешка, когато не е попълнено нито поле 70, нито поле 71
            //или когато едно от полетата е маркирано за заличаване а другото не е попълнено.
            if ((this.validationContext.isRecordEmpty(obj.wayOfEstablishingEuropeanCompany) && this.validationContext.isRecordEmpty(obj.seatChange))
                || (this.validationContext.isRecordEmpty(obj.wayOfEstablishingEuropeanCompany) && obj.seatChange.recordOperation == RecordOperations.Erase)
                || (this.validationContext.isRecordEmpty(obj.seatChange) && obj.wayOfEstablishingEuropeanCompany.recordOperation == RecordOperations.Erase)) {

                isValid = false;
                obj.wayOfEstablishingEuropeanCompany.addError(this.getMessage('CR_APP_00132_E')); //Попълнете начин на учредяване на ЕД или преместване на седалището от друга държава членка в Република България.
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.shares.shareList, true)) {
            if (DomainModelHepler.isObjectEmpty(obj.shares)) {
                obj.shares.addError(this.getMessage('CR_APP_00012_E'));
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList, true)) {
            //поле 23б
            for (var i = 0; i < obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList.length; i++) {
                if (!this.validationContext.isRecordEmpty(obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i])) {

                    if (ObjectHelper.isStringNullOrEmpty(obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].subject.indent) && ObjectHelper.isStringNullOrEmpty(obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].subject.name)) {
                        obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].clearErrors();
                        obj.europeanHoldingCompanysAsShareholders.europeanHoldingCompanyAsShareholderList[i].addError(this.getMessage('CR_APP_00105_E')); //Попълнете данни за холдингово европейски дружество. 
                        isValid = false;
                    }
                }
            }
        }

        return isValid;
    }
}