import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A9 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F007_ManagersValidator } from '../../Fields/Validators/F007_ManagersValidator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F013_BoardOfManagersValidator } from '../../Fields/Validators/F013_BoardOfManagersValidator';
import { F015_ControllingBoardValidator } from '../../Fields/Validators/F015_ControllingBoardValidator';
import { F016a_TermOfExistingValidator } from '../../Fields/Validators/F016a_TermOfExistingValidator';
import { F017_SpecialConditionsValidator } from '../../Fields/Validators/F017_SpecialConditionsValidator';
import { F023a_OwnerValidator } from '../../Fields/Validators/F023a_OwnerValidator';
import { F025a_ConcededEstateValueValidator } from '../../Fields/Validators/F025a_ConcededEstateValueValidator';
import { F027_AddemptionOfTraderValidator } from '../../Fields/Validators/F027_AddemptionOfTraderValidator';
import { A9Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A9Validator extends ApplicationFormAValidator<A9> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A9FieldsValidator());
    }

    public validate(obj: A9): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A9FieldsValidator extends ApplicationFormAFieldsBaseValidator<A9Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());
        this.ruleFor(m => m.managers).setValidator(new F007_ManagersValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.boardOfManagers).setValidator(new F013_BoardOfManagersValidator());
        this.ruleFor(m => m.controllingBoard).setValidator(new F015_ControllingBoardValidator());
        this.ruleFor(m => m.termOfExisting).setValidator(new F016a_TermOfExistingValidator());
        this.ruleFor(m => m.specialConditions).setValidator(new F017_SpecialConditionsValidator());
        this.ruleFor(m => m.owner).setValidator(new F023a_OwnerValidator());
        this.ruleFor(m => m.concededEstateValue).setValidator(new F025a_ConcededEstateValueValidator());
        this.ruleFor(m => m.addemptionOfTrader).setValidator(new F027_AddemptionOfTraderValidator());
    }

    public validate(obj: A9Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.managers.managersList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                let cntNotEmptyManagers: number = ArrayHelper.queryable.from(obj.managers.managersList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
                let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

                if (cntNotEmptyManagers > 1 && !wayOfRepresentationSelected) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00020_E'));//"Начин на представляване" е задължително, когато управителите са повече от един!
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyManagers < 2) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00007_E')); //Начин на представляване трябва да бъде избрано само когато има повече от един управител.
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}