import { ArrayHelper } from 'Cnsys.Core';
import { RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A18 } from '../../ApplicationForms/ApplicationFormsA';
import { F005a_SeatForCorrespondenceValidator } from '../../Fields/Validators/F005a_SeatForCorrespondenceValidator';
import { F006g_SubjectToAdditionalBusinessActivityValidator } from '../../Fields/Validators/F006g_SubjectToAdditionalBusinessActivityValidator';
import { F0103_Representatives103Validator } from '../../Fields/Validators/F0103_Representatives103Validator';
import { F011_WayOfRepresentationValidator } from '../../Fields/Validators/F011_WayOfRepresentationValidator';
import { F017a_DesignatedToPerformPublicBenefitValidator } from '../../Fields/Validators/F017a_DesignatedToPerformPublicBenefitValidator';
import { F017g_DesignatedToCarryOutPrivateActivityValidator } from '../../Fields/Validators/F017g_DesignatedToCarryOutPrivateActivityValidator';
import { F017v_RestorationOfStatusInPublicBenefitValidator } from '../../Fields/Validators/F017v_RestorationOfStatusInPublicBenefitValidator';
import { F022a_DiscontinuanceOfForeignTraderValidator } from '../../Fields/Validators/F022a_DiscontinuanceOfForeignTraderValidator';
import { F022b_InsolvenciesOfForeignTraderValidator } from '../../Fields/Validators/F022b_InsolvenciesOfForeignTraderValidator';
import { F022_ForeignTradersValidator } from '../../Fields/Validators/F022_ForeignTradersValidator';
import { F028_ClosureBranchOfForeignTraderValidator } from '../../Fields/Validators/F028_ClosureBranchOfForeignTraderValidator';
import { F054a_VolumeOfRepresentationPower541Validator } from '../../Fields/Validators/F054a_VolumeOfRepresentationPower541Validator';
import { A18Fields } from '../ModelsAutoGenerated';
import { ApplicationFormAFieldsBaseValidator, ApplicationFormAValidator } from './ApplicationFormAValidator';

export class A18Validator extends ApplicationFormAValidator<A18> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new A18FieldsValidator());
    }

    public validate(obj: A18): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class A18FieldsValidator extends ApplicationFormAFieldsBaseValidator<A18Fields>{
    constructor() {
        super();

        //Осн. обстоятелства 1
        this.ruleFor(m => m.seatForCorrespondence).setValidator(new F005a_SeatForCorrespondenceValidator());

        //Осн. обстоятелства 2
        this.ruleFor(m => m.subjectToAdditionalBusinessActivity).setValidator(new F006g_SubjectToAdditionalBusinessActivityValidator());
        this.ruleFor(m => m.representatives103).setValidator(new F0103_Representatives103Validator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F011_WayOfRepresentationValidator());
        this.ruleFor(m => m.designatedToPerformPublicBenefit).setValidator(new F017a_DesignatedToPerformPublicBenefitValidator());
        this.ruleFor(m => m.designatedToCarryOutPrivateActivity).setValidator(new F017g_DesignatedToCarryOutPrivateActivityValidator());
        this.ruleFor(m => m.restorationOfStatusInPublicBenefit).setValidator(new F017v_RestorationOfStatusInPublicBenefitValidator());

        //Осн. обстоятелства 3
        this.ruleFor(m => m.foreignTraders).setValidator(new F022_ForeignTradersValidator());
        this.ruleFor(m => m.discontinuanceOfForeignTrader).setValidator(new F022a_DiscontinuanceOfForeignTraderValidator());
        this.ruleFor(m => m.insolvenciesOfForeignTrader).setValidator(new F022b_InsolvenciesOfForeignTraderValidator());
        this.ruleFor(m => m.closureBranchOfForeignTrader).setValidator(new F028_ClosureBranchOfForeignTraderValidator());
        this.ruleFor(m => m.volumeOfRepresentationPower).setValidator(new F054a_VolumeOfRepresentationPower541Validator());
    }

    public validate(obj: A18Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        obj.designatedToPerformPublicBenefit.clearErrors();

        let checked17xCount: number = 0;
        if (obj.designatedToPerformPublicBenefit.cheked
            && obj.designatedToPerformPublicBenefit.recordOperation != RecordOperations.Erase)
            checked17xCount++;

        if (obj.restorationOfStatusInPublicBenefit.cheked
            && obj.restorationOfStatusInPublicBenefit.recordOperation != RecordOperations.Erase)
            checked17xCount++;

        if (obj.designatedToCarryOutPrivateActivity.cheked
            && obj.designatedToCarryOutPrivateActivity.recordOperation != RecordOperations.Erase)
            checked17xCount++;

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.designatedToPerformPublicBenefit, obj.restorationOfStatusInPublicBenefit, obj.designatedToCarryOutPrivateActivity], true)) {

            if (checked17xCount == 0 || checked17xCount > 1) {

                obj.addError('designatedToPerformPublicBenefit', this.getMessage('CR_APP_STATUS_NGO_E')); //  Трябва да бъде попълнено едно от полетата 17а,17в, 17г
                isValid = false;
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representatives103.representativeList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.wayOfRepresentation, valCtx)) {

                let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.representatives103.representativeList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "person")).count();
                let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

                if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00078_I')); //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                    isValid = false;
                }

                if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                    obj.wayOfRepresentation.clearErrors();
                    obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00072_E')); //Начин на представляване трябва да бъде попълнено, само когато представителите са повече от един.
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}