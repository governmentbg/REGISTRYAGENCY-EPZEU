import { ArrayHelper, ErrorLevels, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormBaseValidator, ApplicationFormFieldsBaseValidator, ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { ApplicationFormABase } from '../../ApplicationForms/ApplicationFormsA';
import { ApplicationFormAFieldsBase } from '../../ApplicationForms/ModelsAutoGenerated';
import { F027a_AddemptionOfTraderSeatChange, F027v_AddemptionOfTraderEraseForeignTrader, F027_AddemptionOfTrader, F028a_AddemptionOfEUIE, F028_ClosureBranchOfForeignTrader } from '../../Fields/ModelsAutoGenerated';
import { F002_CompanyValidator } from '../../Fields/Validators/F002_CompanyValidator';
import { F003_LegalFormValidator } from '../../Fields/Validators/F003_LegalFormValidator';
import { F004_TransliterationValidator } from '../../Fields/Validators/F004_TransliterationValidator';
import { F005_SeatValidator } from '../../Fields/Validators/F005_SeatValidator';
import { F006a_SubjectOfActivityNKIDValidator } from '../../Fields/Validators/F006a_SubjectOfActivityNKIDValidator';
import { F006b_ObjectivesValidator } from '../../Fields/Validators/F006b_ObjectivesValidator';
import { F006v_MeansOfAchievingTheObjectivesValidator } from '../../Fields/Validators/F006v_MeansOfAchievingTheObjectivesValidator';
import { F006_SubjectOfActivityValidator } from '../../Fields/Validators/F006_SubjectOfActivityValidator';

export class ApplicationFormAValidator<TApplication extends ApplicationFormABase<ApplicationFormAFieldsBase>> extends ApplicationFormBaseValidator<TApplication> {
    constructor() {
        super();
    }

    public validate(obj: TApplication): boolean {
        let isValid = super.validate(obj);

        if (obj.documents == null || obj.documents.length == 0) {
            obj.addError('documents', this.getMessage('GL_NOATTACHED_DOCUMENTS_E'), ErrorLevels.Error);
            isValid = false;
        }

        // По принцип тук не би трябвало да влиза в if-a, защото нямаме UI за edit на ЕИК и без ЕИК не може да започне заявление за промяна или пререгистрация,
        // но понеже е много важно да не допускаме такова заявление без ЕИК, правим тази проверка (в случай, че някъде в кода погрешно се пипа ЕИК-а).
        if (((this.validationContext.processStates == ProcessStates.ForChange) || (this.validationContext.processStates == ProcessStates.Preregistration))
            && ObjectHelper.isStringNullOrEmpty(obj.fields.uic)) {
            obj.addError(this.getMessage('GL_INPUT_VALID_ID_E'), ErrorLevels.Error); // Въведете валиден идентификатор
            isValid = false;
        }

        let addemption = this.selectObjectDifferentFromNull([
            (obj.fields as any).addemptionOfTrader,
            (obj.fields as any).closureBranchOfForeignTrader,
            (obj.fields as any).addemptionOfEUIE]) as F027_AddemptionOfTrader | F028_ClosureBranchOfForeignTrader | F027v_AddemptionOfTraderEraseForeignTrader | F028a_AddemptionOfEUIE;

        if (addemption) {
            let isSubDeedClosureRequired = ((addemption.recordOperation == RecordOperations.Add || addemption.recordOperation == RecordOperations.Current) && addemption.cheked);

            if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, addemption)) {
                obj.addError(this.getMessage('CR_APP_00052_E'), ErrorLevels.Error); // Търговецът/ЮЛНЦ е маркиран за заличаване и има полета за вписване.
                isValid = false;
            }
        }

        let addemptionOfTraderSeatChange = (obj.fields as any).addemptionOfTraderSeatChange as F027a_AddemptionOfTraderSeatChange;

        if (addemptionOfTraderSeatChange) {
            let isSubDeedClosureRequired = ((addemptionOfTraderSeatChange.recordOperation == RecordOperations.Add || addemptionOfTraderSeatChange.recordOperation == RecordOperations.Current) && addemptionOfTraderSeatChange.isTraderAddempted);

            if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, addemptionOfTraderSeatChange)) {
                if (ArrayHelper.queryable.from(obj.getModelErrors()).count(err => err.message == this.getMessage('CR_APP_00052_E')) == 0) { // правим проверка дали вече не е добавено, защото addemptionOfTraderSeatChange се среща заедно с F027_AddemptionOfTrader (а проверката за него може вече да е добавила това съощение)
                    obj.addError(this.getMessage('CR_APP_00052_E'), ErrorLevels.Error); // Търговецът/ЮЛНЦ е маркиран за заличаване и има полета за вписване.
                    isValid = false;
                }
            }
        }

        return isValid;
    }

    private selectObjectDifferentFromNull(objects: any[]): any {
        for (var i = 0; i < objects.length; i++) {
            if (objects[i])
                return objects[i];
        }

        return null;
    }
}

export class ApplicationFormAFieldsBaseValidator<TFields extends ApplicationFormAFieldsBase> extends ApplicationFormFieldsBaseValidator<TFields> {
    constructor() {
        super();

        //Осн. обстоятелства 1
        //Company
        this.ruleFor(m => m.company).setValidator(new F002_CompanyValidator());

        //Transliteration 
        this.ruleFor(m => m.transliteration).setValidator(new F004_TransliterationValidator());

        //Seat
        this.ruleFor(m => m.seat).setValidator(new F005_SeatValidator());

        //SubjectOfActivity
        this.ruleFor(m => m.subjectOfActivity).setValidator(new F006_SubjectOfActivityValidator());

        //SubjectOfActivityNKID
        this.ruleFor(m => m.subjectOfActivityNKID).setValidator(new F006a_SubjectOfActivityNKIDValidator());

        //LegalForm
        this.ruleFor(m => m.legalForm).setValidator(new F003_LegalFormValidator());

        //Objectives
        this.ruleFor(m => m.objectives).setValidator(new F006b_ObjectivesValidator());

        //MeansOfAchievingTheObjectives
        this.ruleFor(m => m.meansOfAchievingTheObjectives).setValidator(new F006v_MeansOfAchievingTheObjectivesValidator());
    }

    public validate(obj: TFields): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}