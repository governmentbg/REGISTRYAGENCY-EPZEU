${ 
    // Enable extension methods by adding using Typewriter.Extensions.*
    using Typewriter.Extensions.Types;

    // Uncomment the constructor to change template settings.
    Template(Settings settings)
    {
        settings.OutputFilenameFactory= OutputFilenameFactory;    
    }

    string OutputFilenameFactory(File file)
    {
        return "ModelsAutoGenerated";
    }
            
    List<string> BaseClasses()
    {
        return new  List<string>() {  "object", "List", "{ [key: string]: any[]; }"};
    }
    
    string WriteClass(Class classToWrite)
    {        
        string classJS = @"{0}
@TypeSystem.typeDecorator('{1}', moduleContext.moduleName)
export class {1} extends {2} {{ {3} 

    constructor(obj?: any){{
        super(obj)

        this.copyFrom(obj);
    }}
}}"; 

        string comment = classToWrite.DocComment != null && !string.IsNullOrEmpty(classToWrite.DocComment.Summary) ? "\r\n/**" + classToWrite.DocComment.Summary + "*/" : "";
        string name = classToWrite.Name;
        string baseClassName = BaseClassName(classToWrite);
        string properties = WriteProperties(classToWrite);

        return string.Format(classJS, comment, name, baseClassName, properties);
    }

    string BaseClassName(Class cls)
    {
        if(cls.BaseClass != null && !BaseClasses().Any(baseClass=>baseClass == cls.BaseClass.Name))
        {
            return cls.BaseClass.Name;
        }
        else
        {
            return "BaseDataModel";
        } 
    }

    string WriteProperties(Class cls)
    {
        string propertiesJS = "";

        foreach(var prop in cls.Properties)
        {
            if(!IsParentHasProp(prop, cls) && !prop.Attributes.Any(a=>a.Name == "JsonIgnore"))
            {            
                propertiesJS += WriteProperty(prop);
            }
        }

        return propertiesJS;
    }

    bool IsParentHasProp(Property property, Class cls)
    {
        if(cls.BaseClass != null)
        {
            if(cls.BaseClass.Properties.Any(p=>p.Name == property.Name))
            {
                return true;
            }

            return IsParentHasProp(property, cls.BaseClass);
        }

        return false;
    }

    string WriteProperty(Property property)
    {
        string propJS;

        if(property.Type.ClassName() == "Date")
        {
            propJS = @"
    
    @observable private _{1}: moment.Moment = null;
    {0}
    @TypeSystem.propertyDecorator('moment')
    public set {1}(val: moment.Moment){{
        this._{1} = val;
    }}
    {0}
    public get {1}(): moment.Moment{{
        return this._{1};
    }} ";
        }
        else if(BaseClasses().Contains(property.Type.ClassName()))
        {
            propJS = @"
                
    @observable private _{1}: any = null;
    {0}
    @TypeSystem.propertyDecorator('any')
    public set {1}(val: any){{
        this._{1} = val;
    }}
    {0}
    public get {1}(): any{{
        return this._{1};
    }} ";
        }
        else
        {
            propJS = @"

    @observable private _{1}: {2} = null;
    {0}
    {4}
    public set {1}(val: {2}){{
        this._{1} = val;
    }}
    {0}
    public get {1}(): {2}{{
        return this._{1};
    }}
    {0} ";
        }

        string comment = "";
        try
        {
            if(property.DocComment != null && !string.IsNullOrEmpty(property.DocComment.Summary))
            {
                comment = "\r\n\t/**" + property.DocComment.Summary + "*/";
            }
        }
        catch (Exception)
        {}
         
        return string.Format(propJS,
                             comment,                            
                             property.name,                                                          
                             property.Type.Name, 
                             property.Type.Default(),
                             Decorator(property)); 
    }

    string Decorator(Property property){
        var decorator = "";
        if(property.Type.IsEnumerable)
        {
            decorator = "@TypeSystem.propertyArrayDecorator({0})";
        }
        else
        {
            decorator = "@TypeSystem.propertyDecorator({0})";
        }

        if(property.Type.ClassName() == "number" ||
           property.Type.ClassName() == "string" ||
           property.Type.ClassName() == "boolean" ||
           property.Type.ClassName() == "any")
        {
            return string.Format(decorator,"'" + property.Type.ClassName()+ "'");
        }
        else
        {
            return string.Format(decorator, property.Type.ClassName() + " ? " + property.Type.ClassName() + " : moduleContext.moduleName + '.' + '" + property.Type.ClassName() + "'");
        }
    }

    string WriteEnum(Enum enumToWrite){
        
        string enumJS = @"
{0}
export enum {1} {{ {2}
 }}
TypeSystem.registerEnumInfo({1} , '{1}' , moduleContext.moduleName)";
        
        string comment = "";
        try
        {
            if(enumToWrite.DocComment != null && !string.IsNullOrEmpty(enumToWrite.DocComment.Summary))
            {
                comment = "\r\n/**" + enumToWrite.DocComment.Summary + "*/";
            }
        }
        catch (Exception)
        {}
           
        string name = enumToWrite.Name;        
        string values = WriteEnumValues(enumToWrite);

        return string.Format(enumJS, comment, name, values);
    }

    string WriteEnumValues(Enum enumToWrite){
        string enumValues = "";

        foreach(var value in enumToWrite.Values)
        {
            string comment = "";
            try
            {
                if(value.DocComment != null && !string.IsNullOrEmpty(value.DocComment.Summary))
                {
                    comment = "\r\n\t/**" + value.DocComment.Summary + "*/";
                }
            }
            catch (Exception)
            {}

            string enumValue = @"
    {0}
    {1} = {2},";

            enumValues += string.Format(enumValue, comment, value.Name, value.Value);
        }

        return enumValues;
    }
}

// Auto Generated Object
import * as moment from 'moment'
import { observable, computed } from 'mobx'
import { TypeSystem, BaseDataModel } from 'Cnsys.Core'
import { TextRecordField, RecordField, SeatRecordField, CompositeField, Record, Address, Person, OutgoingNumber, ActivityNKIDField, Mandate, ForeignAuthority, MannerRecordHolder, ForeignCompanyBaseData, CheckRecordField } from 'EPZEU.CR.Domain'
import { moduleContext } from '../../ModuleContext'
import { F02200_ForeignTraderRegistration } from './F02200_ForeignTraderRegistration'

$Classes(c=>(c.Namespace == "EPZEU.CR.Domain.Fields"&&
            (c.Name == "F016_TermsOfPartnership" ||
             c.Name == "F017_SpecialConditions" ||
             c.Name == "F0190_Partner" ||
             c.Name == "F019_Partners" ||          
             c.Name == "F005_Seat" ||             
             c.Name == "F005a_SeatForCorrespondence" ||
             c.Name == "F006_SubjectOfActivity" ||
             c.Name == "F006a_SubjectOfActivityNKID" ||
             c.Name == "F006b_Objectives" ||
             c.Name == "F006g_SubjectToAdditionalBusinessActivity" ||
             c.Name == "F006v_MeansOfAchievingTheObjectives" ||
             c.Name == "F0070_Manager" ||
             c.Name == "F007_Managers" ||
             c.Name == "F023_SoleCapitalOwner" ||
             c.Name == "F0240_ShareTransfer" ||
             c.Name == "F024_ShareTransfers" ||
             c.Name == "F027_AddemptionOfTrader" ||
             c.Name == "F031_Funds" ||
             c.Name == "F031b_MinimumAmount" ||
             c.Name == "F032_DepositedFunds" ||
             c.Name == "F0330_NonMonetaryDeposit" ||
             c.Name == "F033_NonMonetaryDeposits" ||
             c.Name == "F011_WayOfRepresentation" ||
             c.Name == "F018_PhysicalPersonTrader" ||
             c.Name == "F007a0_AssignedManager" ||
             c.Name == "F007a_AssignedManagers" ||
             c.Name == "F008_WayOfManagement" ||
             c.Name == "F0100_Representative" ||
             c.Name == "F010_Representatives" ||
             c.Name == "F01201_Director" ||
             c.Name == "F01200_BoardOfDirectorsMandate" ||
             c.Name == "F012_BoardOfDirectors" ||
             c.Name == "F01211_BoardManager3" ||
             c.Name == "F01210_ManagerMandate3" ||
             c.Name == "F012a_BoardOfManagers3" ||
             c.Name == "F01220_AdministrativeBoardMandate" ||
             c.Name == "F01221_AdministrativeBody" ||
             c.Name == "F012b_AdministrativeBoard" ||            
             c.Name == "F012v_AdministrativeBoardSupporters" ||
             c.Name == "F01230_AdministrativeBoardSupporter" ||
             c.Name == "F01321_BoardManager2" ||
             c.Name == "F01320_ManagerMandate2" ||
             c.Name == "F013_BoardOfManagers2" ||
             c.Name == "F01301_BoardManager" ||
             c.Name == "F0130_ManagerMandate" ||
             c.Name == "F013_BoardOfManagers" ||
             c.Name == "F013v_BoardOfManagersSupporters2" ||
             c.Name == "F01340_BoardManagersSupporter2" ||
             c.Name == "F016a_TermOfExisting" ||
             c.Name == "F023a_Owner" ||
             c.Name == "F025a_ConcededEstateValue" ||
             c.Name == "F025a_ConcededEstateValue" ||
             c.Name == "F025a_ConcededEstateValue" ||
             c.Name == "F025a_ConcededEstateValue" ||
             c.Name == "F01331_Leader" ||
             c.Name == "F01330_LeadingBoardMandate" ||
             c.Name == "F013b_LeadingBoard" ||
             c.Name == "F01401_Supervisor" ||
             c.Name == "F0140_SupervisingBoardMandate" ||
             c.Name == "F014_SupervisingBoard" ||
             c.Name == "F01421_Supervisor2" ||
             c.Name == "F01420_SupervisingBoardMandate2" ||
             c.Name == "F014b_SupervisingBoard2" ||
             c.Name == "F01430_SupervisingBoardSupporter" ||
             c.Name == "F014v_SupervisingBoardSupporters" ||
             c.Name == "F02320_EuropeanHoldingCompanyAsShareholder" ||
             c.Name == "F023b_EuropeanHoldingCompanysAsShareholders" ||
             c.Name == "F024a_HiddenNonMonetaryDeposit" || 
             c.Name == "F027a_AddemptionOfTraderSeatChange" ||
             c.Name == "F03110_CredentialsForDifferentTypes" ||
             c.Name == "F03111_SpecialConditionsForTransfer" ||
             c.Name == "F0310a_Share" ||
             c.Name == "F031a_Shares" ||
             c.Name == "F034_BuyBackDecision" ||
             c.Name == "F070_WayOfEstablishingEuropeanCompany" ||
             c.Name == "F071_SeatChange" ||
             c.Name == "F01010_Representative101" ||
             c.Name == "F0101_Representatives101" ||
             c.Name == "F01020_Representative102" ||
             c.Name == "F0102_Representatives102" ||
             c.Name == "F02201_ForeignTraderCountry" ||
             c.Name == "F02203_ForeignTraderWayOfRepresentation" ||
             c.Name == "F02204_AddemptionOfForeignTrader" ||
             c.Name == "F0220_ForeignTrader" ||
             c.Name == "F022_ForeignTraders" ||
             c.Name == "F022a_DiscontinuanceOfForeignTrader" ||
             c.Name == "F02220_InsolvencyOfForeignTrader" ||
             c.Name == "F022b_InsolvenciesOfForeignTrader" ||
             c.Name == "F028_ClosureBranchOfForeignTrader" ||
             c.Name == "F0200_UnlimitedLiabilityPartner" ||
             c.Name == "F020_UnlimitedLiabilityPartners" ||
             c.Name == "F0210_LimitedLiabilityPartner" ||
             c.Name == "F021_LimitedLiabilityPartners"  || 
             c.Name == "F009_ChairMan"  || 
             c.Name == "F054a_VolumeOfRepresentationPower541"  || 
             c.Name == "F01310_BoardOfManagersSupportersPerson"  || 
             c.Name == "F013a_BoardOfManagersSupporters"  || 
             c.Name == "F01501_ControllingBoardPerson"  || 
             c.Name == "F0150_ControllingBoardMandate"  || 
             c.Name == "F015_ControllingBoard"  || 
             c.Name == "F01510_ControllingBoardSupportersPerson"  || 
             c.Name == "F015a_ControllingBoardSupporters"  || 
             c.Name == "F025_SharePaymentResponsibility" ||
             c.Name == "F016v_TermOfExistenceNonProfitLegalEntity" ||
             c.Name == "F0103_Representative103" ||
             c.Name == "F0103_Representatives103" ||
             c.Name == "F012d_ManagementBody12d" ||
             c.Name == "F012d_ManagementBody12dMandate" ||
             c.Name == "F012d_ManagementBodies12d" ||
             c.Name == "F012g_Authority12g" ||
             c.Name == "F012g_Authorities12g" ||
             c.Name == "F013g_Trustee13g" ||
             c.Name == "F013g_BoardOfTrusties13gMandate" ||
             c.Name == "F013g_BoardOfTrusties13g" ||
             c.Name == "F015b1_CommissionMember15b" ||
             c.Name == "F015b0_VerificationCommission15bMandate" ||
             c.Name == "F015b_VerificationCommission15b" || 
             c.Name == "F025b_TotalAmountOfInitialPropertyContributions" ||
             c.Name == "F017a_DesignatedToPerformPublicBenefit" ||
             c.Name == "F017b_TemporarilySuspendedStatusForPublicBenefits" ||
             c.Name == "F017v_RestorationOfStatusInPublicBenefit" ||
             c.Name == "F017g_DesignatedToCarryOutPrivateActivity" ||
             c.Name == "F001a_NumberNationalRegister" ||
             c.Name == "F025a_ConcededEstateValue" ||
             c.Name == "F02530_MembershipFees25v" || 
             c.Name == "F02531_CulturalEducationalAndInformationActivities25v" ||
             c.Name == "F02532_SubsidyFromStateAndMunicipalBudgets25v" ||
             c.Name == "F02533_RentalOfMovableAndImmovableProperty25v" ||
             c.Name == "F02534_DonationAndWills25v" ||
             c.Name == "F02535_OtherExpenses25v" ||
             c.Name == "F025v_SourcesOfInitialFinancing25v" ||
             c.Name == "F027v_AddemptionOfTraderEraseForeignTrader" ||
             c.Name == "F070a_WayOfEstablishingEuropeanCooperativeSociety" ||
             c.Name == "F0201_UnlimitedLiabilityPartnerEUIE" ||
             c.Name == "F020a_UnlimitedLiabilityPartnersEUIE" ||
             c.Name == "F0600_DivisionOfEuropeanUnification" ||
             c.Name == "F060_DivisionsOfEuropeanUnification" ||
             c.Name == "F02234_PowerOfTrustees" ||
             c.Name == "F02233_PowerOfLiquidators" ||
             c.Name == "F02232_RepresentersWayOfManagement" ||
             c.Name == "F02231_EUIEAddempted" ||
             c.Name == "F0223_ForeignCompanyData" ||
             c.Name == "F0224_DiscontinuanceOfTheEUIE" ||
             c.Name == "F02250_InsolvencyOfEUIE" ||
             c.Name == "F0225_InsolvenciesOfEUIE" ||
             c.Name == "F028a_AddemptionOfEUIE" ||
             c.Name == "F016b_TermOfExistingEUIE"
             )))[
$WriteClass]

   