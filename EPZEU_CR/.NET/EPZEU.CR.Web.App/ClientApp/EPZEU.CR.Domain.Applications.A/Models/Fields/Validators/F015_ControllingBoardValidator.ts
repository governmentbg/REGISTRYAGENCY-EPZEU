import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F01501_ControllingBoardPerson, F0150_ControllingBoardMandate, F015_ControllingBoard } from '../ModelsAutoGenerated';

class F01501_ControllingBoardPersonMandatoryValidator extends RecordValidator<F01501_ControllingBoardPerson> {

    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F01501_ControllingBoardPerson): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F0150_ControllingBoardMandateMandatoryValidator extends RecordValidator<F0150_ControllingBoardMandate> {
    constructor() {
        super();
    }

    public validateInternal(obj: F0150_ControllingBoardMandate): boolean {
        let isValid = super.validateInternal(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.date) && ObjectHelper.isStringNullOrEmpty(obj.mandateTypeText)) {
            //Задължително е попълването на дата на изтичане на мандата или начина, по който се определя мандата!
            obj.addError(this.getMessage('CR_APP_MANDATORY_DATE_EXPIRATION_OR_WAY_SETTING_MANDATE_E'))
            isValid = false;
        }

        return isValid;
    }
}

class F0150_ControllingBoardMandateValidator extends RecordValidator<F0150_ControllingBoardMandate> {
    constructor() {
        super();
    }

    public validateInternal(obj: F0150_ControllingBoardMandate): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F015_ControllingBoardMandatoryValidator extends EPZEUBaseValidator<F015_ControllingBoard, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.controllingBoardPersonList).setCollectionValidator(new F01501_ControllingBoardPersonMandatoryValidator());
        this.ruleFor(m => m.controllingBoardMandate).setValidator(new F0150_ControllingBoardMandateMandatoryValidator());
    }

    public validate(obj: F015_ControllingBoard): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.controllingBoardPersonList, true)) {

            let isFilledcontrollingBoard = false;

            for (var i = 0; i < obj.controllingBoardPersonList.length; i++) {

                if (!ValidatorHelpers.isEmptyBasePerson(obj.controllingBoardPersonList[i].person.name, obj.controllingBoardPersonList[i].person.indent, obj.controllingBoardPersonList[i].person.countryID, obj.controllingBoardPersonList[i].person.isForeignTrader)
                    && obj.controllingBoardPersonList[i].recordOperation != RecordOperations.Erase) {
                    isFilledcontrollingBoard = true;
                    break;
                }
            }

            if (!isFilledcontrollingBoard) {
                obj.controllingBoardPersonList[0].addError(this.getMessage('CR_APP_00061_E')); //Задължително е попълването поне на един "Член на Управителен съвет" или поне един член на "Съвет на директорите"
                isValid = false;
            }
        }

        if (obj.controllingBoardPersonList.length > 1) {

            for (var i = 0; i < obj.controllingBoardPersonList.length; i++) {

                if (ValidatorHelpers.isEmptyBasePerson(obj.controllingBoardPersonList[i].person.name, obj.controllingBoardPersonList[i].person.indent, obj.controllingBoardPersonList[i].person.countryID, obj.controllingBoardPersonList[i].person.isForeignTrader)
                    && obj.controllingBoardPersonList[i].recordOperation != RecordOperations.Erase) {
                    obj.controllingBoardPersonList[i].clearErrors(true);
                    obj.controllingBoardPersonList[i].addError(this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //При добавяне на второ и следващо лице трябва да се извършва проверкта дали идентификатора на добавеното лице със същия идентификатор като на вече добавено лице. 
            //Валидацията не се прилага за идентификатор Дата на раждане 
            if (ValidatorHelpers.isExistDublicateIndents(obj.controllingBoardPersonList, true, "CR_APP_00119_E"))
                isValid = false;
        }

        return isValid;
    }
}

class F01501_ControllingBoardPersonValidator extends RecordValidator<F01501_ControllingBoardPerson> {

    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F01501_ControllingBoardPerson): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F015_ControllingBoardValidator extends EPZEUBaseValidator<F015_ControllingBoard, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.controllingBoardMandate).setValidator(new F0150_ControllingBoardMandateValidator());
        this.ruleFor(m => m.controllingBoardPersonList).setCollectionValidator(new F01501_ControllingBoardPersonValidator());
    }

    public validate(obj: F015_ControllingBoard): boolean {
        let isValid = super.validate(obj);

        if (obj.controllingBoardPersonList.length > 1) {

            for (var i = 0; i < obj.controllingBoardPersonList.length; i++) {

                if (ValidatorHelpers.isEmptyBasePerson(obj.controllingBoardPersonList[i].person.name, obj.controllingBoardPersonList[i].person.indent, obj.controllingBoardPersonList[i].person.countryID, obj.controllingBoardPersonList[i].person.isForeignTrader)
                    && obj.controllingBoardPersonList[i].recordOperation != RecordOperations.Erase) {

                    obj.controllingBoardPersonList[i].addError(this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //При добавяне на второ и следващо лице трябва да се извършва проверкта дали идентификатора на добавеното лице със същия идентификатор като на вече добавено лице. 
            //Валидацията не се прилага за идентификатор Дата на раждане 
            if (ValidatorHelpers.isExistDublicateIndents(obj.controllingBoardPersonList, true, "CR_APP_00119_E"))
                isValid = false;
        }

        return isValid;
    }
}