import { ArrayHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, PersonWithCountyValidator, RecordOperations, RecordValidator, SubjectFLEWithCountyValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F0100_Representative, F010_Representatives } from '../ModelsAutoGenerated';

export class F010_RepresentativesValidator extends EPZEUBaseValidator<F010_Representatives, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.representativeList).setCollectionValidator(new F0100_RepresentativeValidator());
    }

    public validate(obj: F010_Representatives): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representativeList, true)) {

            let emptyOrForEraseRepresentatives: number = 0;

            for (var i = 0; i < obj.representativeList.length; i++) {

                if (ValidatorHelpers.isEmptyBasePerson(obj.representativeList[i].subject.name, obj.representativeList[i].subject.indent, obj.representativeList[i].subject.countryID, obj.representativeList[i].subject.isForeignTrader)
                    || obj.representativeList[i].recordOperation == RecordOperations.Erase) {

                    obj.representativeList[i].clearErrors();
                    emptyOrForEraseRepresentatives++;
                }
            }

            if (emptyOrForEraseRepresentatives == obj.representativeList.length) {

                obj.addError(this.getMessage('CR_APP_00053_E')); // Задължително е попълването поне на един "Представител"!
                isValid = false;
            }
        }

        if (obj.representativeList.length > 1) {

            for (var i = 0; i < obj.representativeList.length; i++) {

                if ((ValidatorHelpers.isEmptyBasePerson(obj.representativeList[i].subject.name, obj.representativeList[i].subject.indent, obj.representativeList[i].subject.countryID, obj.representativeList[i].subject.isForeignTrader) &&
                    ValidatorHelpers.isEmptyBasePerson(obj.representativeList[i].person.name, obj.representativeList[i].person.indent, obj.representativeList[i].person.countryID, obj.representativeList[i].person.isForeignTrader))
                    && obj.representativeList[i].recordOperation != RecordOperations.Erase) {
                    obj.representativeList[i].clearErrors(true);
                    obj.representativeList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице             
            if (ValidatorHelpers.isExistDublicateIndents(obj.representativeList, false, "CR_APP_00111_E"))
                isValid = false;
        }

        return isValid;
    }
}

export class F0100_RepresentativeValidator extends RecordValidator<F0100_Representative> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEWithCountyValidator());
        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator()).when(x => x.subject.isForeignTrader || x.subject.indentType == IndentTypes.UIC);
    }

    public validateInternal(obj: F0100_Representative): boolean {

        obj.person.clearErrors(true);

        let isValid = super.validateInternal(obj);

        if (!ValidatorHelpers.isObjectWithPersonEmpty(obj, "subject")) {

            if (obj.subject.isForeignTrader || obj.subject.indentType == IndentTypes.UIC) {

                if (ValidatorHelpers.isEmptyBasePerson(obj.person.name, obj.person.indent, obj.person.countryID, obj.person.isForeignTrader)) {

                    obj.person.addError(this.getMessage('CR_APP_00054_E'));// Попълнете "Представляващ ЮЛ"!
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}