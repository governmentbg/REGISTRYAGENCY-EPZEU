import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectFLEBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { isMoment } from 'moment';
import { F0201_UnlimitedLiabilityPartnerEUIE, F020a_UnlimitedLiabilityPartnersEUIE } from '../ModelsAutoGenerated';

class F0201_UnlimitedLiabilityPartnerEUIEValidator extends RecordValidator<F0201_UnlimitedLiabilityPartnerEUIE> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEBaseValidator());
    }

    public validateInternal(obj: F0201_UnlimitedLiabilityPartnerEUIE): boolean {
        let isValid = super.validateInternal(obj);

        if (!this.validationContext.isRecordEmpty(obj)) {

            if (ValidatorHelpers.areAllFieldsEmpty(obj.subject.indent, obj.subject.name)) {
                ////Попълнете име и идентификатор. Ако юридическото лице е чуждестранно, попълнете наименование и маркирайте "Чуждестранно юридическо лице".
                obj.subject.addError(this.getMessage('CR_APP_00016_Е'));
                isValid = false;
            }

            if (obj.subject.isForeignTrader) {
                if (ObjectHelper.isStringNullOrEmpty(obj.subject.competentAuthorityForRegistration) || ObjectHelper.isStringNullOrEmpty(obj.subject.registrationNumber)) {
                    obj.addError(this.getMessage('CR_APP_00059_E')); // Попълнете компетентен орган по регистрацията, номер на регистрацията и адрес по предходната регистрация.
                    isValid = false;
                }

                //Грешката се визуализира при непопълнена стойност за Адрес след като е избрано Чуждестранно юридическо лице
                let isValidAddress = new SimpleAddressValidator();
                isValidAddress.setValidationContext(this.getValidationContext());

                if (!isValidAddress.validate(obj.address, true)) {
                    obj.address.addError(this.getMessage('CR_APP_00005_E'));
                    isValid = false;
                }
            }
        }

        if (!obj.date || !isMoment(obj.date)) {
            //Грешката се визуализира в заявление когато не е попълнена дата
            obj.addError('date', this.getMessage('CR_GL_INPUT_DATE_OF_ACCEPTANCE_EOII_E')); //Въведете дата на приемане в ЕОИИ.
            isValid = false;
        }

        return isValid;
    }
}

export class F020a_UnlimitedLiabilityPartnersEUIEValidator extends EPZEUBaseValidator<F020a_UnlimitedLiabilityPartnersEUIE, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.unlimitedLiabilityPartnerEUIEList).setCollectionValidator(new F0201_UnlimitedLiabilityPartnerEUIEValidator());
    }

    public validate(obj: F020a_UnlimitedLiabilityPartnersEUIE): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.unlimitedLiabilityPartnerEUIEList, true)) {

            let cntNotEmptyUnlimitedLiabilityPartners: number = ArrayHelper.queryable.from(obj.unlimitedLiabilityPartnerEUIEList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();

            if (cntNotEmptyUnlimitedLiabilityPartners == 0) {

                obj.unlimitedLiabilityPartnerEUIEList[0].addError(this.getMessage('CR_APP_00068_E')); // Задължително е попълването поне на един "Неограничено отговорен член на ЕОИИ"!
                isValid = false;
            }
        }

        if (obj.unlimitedLiabilityPartnerEUIEList.length > 1) {

            for (var i = 0; i < obj.unlimitedLiabilityPartnerEUIEList.length; i++) {

                if (this.validationContext.isRecordEmpty(obj.unlimitedLiabilityPartnerEUIEList[i]) && obj.unlimitedLiabilityPartnerEUIEList[i].recordOperation != RecordOperations.Erase) {

                    obj.unlimitedLiabilityPartnerEUIEList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.unlimitedLiabilityPartnerEUIEList, false, "CR_APP_00121_E")) // 
                isValid = false;
        }

        return isValid;
    }
}