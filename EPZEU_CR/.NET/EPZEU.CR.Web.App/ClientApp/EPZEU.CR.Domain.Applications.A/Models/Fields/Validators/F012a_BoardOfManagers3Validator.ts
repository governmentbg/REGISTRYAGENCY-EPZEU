import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, RecordValidator, SubjectFLEWithCountyValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F01210_ManagerMandate3, F01211_BoardManager3, F012a_BoardOfManagers3 } from '../ModelsAutoGenerated';

class F01211_BoardManager3Validator extends RecordValidator<F01211_BoardManager3> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEWithCountyValidator());
    }

    public validateInternal(obj: F01211_BoardManager3): boolean {
        
        let isValid = super.validateInternal(obj);         

        return isValid;
    }
}

class F01210_BoardOfManagers3MandateValidator extends RecordValidator<F01210_ManagerMandate3> {

    constructor() {
        super();

        this.ruleFor(m => m.date).must(m => ValidatorHelpers.isValidDate(m.date)).withMessage(this.getMessage('GL_INPUT_DATE_E')).when(m => !ObjectHelper.isStringNullOrEmpty(m.date));
    }

    public validateInternal(obj: F01210_ManagerMandate3): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
} 

export class F012a_BoardOfManagers3Validator extends EPZEUBaseValidator<F012a_BoardOfManagers3, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.managerMandate3).setValidator(new F01210_BoardOfManagers3MandateValidator());
        this.ruleFor(m => m.boardManagersList).setCollectionValidator(new F01211_BoardManager3Validator());        
    }

    public validate(obj: F012a_BoardOfManagers3): boolean {
        let isValid = super.validate(obj);

        if (obj.boardManagersList.length > 1) {
            for (var i = 0; i < obj.boardManagersList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.boardManagersList[i], "subject") && obj.boardManagersList[i].recordOperation != RecordOperations.Erase) {
                    obj.boardManagersList[i].clearErrors(true);
                    obj.boardManagersList[i].addError(this.getMessage('CR_APP_00063_E'));
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.boardManagersList, false, "CR_APP_00122_E")) // 
                isValid = false; 
        }

        return isValid;
    }
}