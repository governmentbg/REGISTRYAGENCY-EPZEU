import { ObjectHelper } from "Cnsys.Core";
import { EPZEUBaseValidator } from "EPZEU.Core";
import { IApplicationFormValidationContext, RecordOperations, RecordValidator } from "EPZEU.CR.Domain";
import { F02250_InsolvencyOfEUIE, F0225_InsolvenciesOfEUIE } from "../ModelsAutoGenerated";

class F02250_InsolvencyOfEUIEValidator extends RecordValidator<F02250_InsolvencyOfEUIE> {

    public validateInternal(obj: F02250_InsolvencyOfEUIE): boolean {

        obj.clearErrors();
        let isValid = super.validateInternal(obj);

        let allFilled = !ObjectHelper.isStringNullOrEmpty(obj.actNumber)
            && !ObjectHelper.isNullOrUndefined(obj.date)
            && !ObjectHelper.isStringNullOrEmpty(obj.insolvencyText)
            && !ObjectHelper.isStringNullOrEmpty(obj.judicialCode)
            && (obj.decision759 || obj.decision760);

        let allEmpty = ObjectHelper.isStringNullOrEmpty(obj.actNumber)
            && ObjectHelper.isNullOrUndefined(obj.date)
            && ObjectHelper.isStringNullOrEmpty(obj.insolvencyText)
            && ObjectHelper.isStringNullOrEmpty(obj.judicialCode)
            && !obj.decision759 && !obj.decision760;

        if (allFilled || allEmpty) {
          
        } else {
            isValid = false;
            obj.addError(this.getMessage('CR_APP_00067_E'));// При попълването на всяко подполе трябва да има съдържание и в другите подполета.
        }

        return isValid;
    }
}

export class F0225_InsolvenciesOfEUIEValidator extends EPZEUBaseValidator<F0225_InsolvenciesOfEUIE, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.insolvencyOfEUIEList).setCollectionValidator(new F02250_InsolvencyOfEUIEValidator());
    }

    public validate(obj: F0225_InsolvenciesOfEUIE): boolean {
        let isValid = super.validate(obj);

        for (var i = 0; i < obj.insolvencyOfEUIEList.length; i++) {

            if (obj.insolvencyOfEUIEList.length > 1
                && ObjectHelper.isStringNullOrEmpty(obj.insolvencyOfEUIEList[i].actNumber)
                && ObjectHelper.isStringNullOrEmpty(obj.insolvencyOfEUIEList[i].insolvencyText)
                && ObjectHelper.isNullOrUndefined(obj.insolvencyOfEUIEList[i].date)
                && obj.insolvencyOfEUIEList[i].recordOperation != RecordOperations.Erase) {

                obj.insolvencyOfEUIEList[i].clearErrors();
                obj.insolvencyOfEUIEList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                isValid = false;
            }
        }

        return isValid;
    }
}