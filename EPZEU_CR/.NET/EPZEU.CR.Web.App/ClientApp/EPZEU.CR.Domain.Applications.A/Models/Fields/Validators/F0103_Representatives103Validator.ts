import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F0103_Representative103, F0103_Representatives103 } from '../ModelsAutoGenerated';

export class F0103_Representatives103Validator extends EPZEUBaseValidator<F0103_Representatives103, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.representativeList).setCollectionValidator(new F0103_Representative103Validator());
    }

    public validate(obj: F0103_Representatives103): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (obj.representativeList.length > 1) {

            for (var i = 0; i < obj.representativeList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.representativeList[i], "person") && obj.representativeList[i].recordOperation != RecordOperations.Erase) {
                    obj.representativeList[i].clearErrors(true);
                    obj.representativeList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице            
            if (ValidatorHelpers.isExistDublicateIndents(obj.representativeList, true, "CR_APP_00162_E"))
                isValid = false;
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.representativeList, true)) {

            let isFilledRepresentatives = false;

            for (var i = 0; i < obj.representativeList.length; i++) {

                if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.representativeList[i], "person")
                    && obj.representativeList[i].recordOperation != RecordOperations.Erase) {
                    isFilledRepresentatives = true;
                    break;
                }
            }

            if (!isFilledRepresentatives) {
                obj.representativeList[0].addError(this.getMessage('CR_APP_MADATORY_ONE_REPRESENTATIVE_Е')); //Задължително е попълването поне на един представляващ
                isValid = false;
            }
        }

        return isValid;
    }
}

export class F0103_Representative103Validator extends RecordValidator<F0103_Representative103> {
    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F0103_Representative103): boolean {
        obj.clearErrors(true);

        let isValid = super.validateInternal(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.person.position)) {
            //Грешката се визуализира когато не е попълнено полето за длъжност
            obj.person.addError('position', this.getMessage('CR_APP_INPUT_POSITION_E'));//Попълнете полето за длъжност
            isValid = false;
        } else if (ValidatorHelpers.areAllFieldsEmpty(obj.person.name, obj.person.indent)) {
            obj.person.addError(this.getMessage('GL_INPUT_NAME_ID_E'));
            isValid = false;
        }

        return isValid;
    }
}