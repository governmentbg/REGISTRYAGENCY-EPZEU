import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F01301_BoardManager, F0130_ManagerMandate, F013_BoardOfManagers } from '../ModelsAutoGenerated';

class F01301_BoardManagerMandatoryValidator extends RecordValidator<F01301_BoardManager> {

    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F01301_BoardManager): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F0130_ManagerMandateMandatoryValidator extends RecordValidator<F0130_ManagerMandate> {
    constructor() {
        super();

        let errMsg = this.getMessage('GL_INPUT_DATE_E');
        this.ruleFor(m => m.date).must(m => ValidatorHelpers.isValidDate(m.date)).withMessage(errMsg).when(m => !ObjectHelper.isStringNullOrEmpty(m.date));
    }

    public validateInternal(obj: F0130_ManagerMandate): boolean {
        let isValid = super.validateInternal(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.date) && ObjectHelper.isStringNullOrEmpty(obj.mandateTypeText)) {
            //Задължително е попълването на дата на изтичане на мандата или начина, по който се определя мандата!
            obj.addError(this.getMessage('CR_APP_MANDATORY_DATE_EXPIRATION_OR_WAY_SETTING_MANDATE_E'))
            isValid = false;
        }

        return isValid;
    }
}

class F0130_ManagerMandateValidator extends RecordValidator<F0130_ManagerMandate> {
    constructor() {
        super();

        this.ruleFor(m => m.date).must(m => ValidatorHelpers.isValidDate(m.date)).withMessage(this.getMessage('GL_INPUT_DATE_E')).when(m => !ObjectHelper.isStringNullOrEmpty(m.date));
    }

    public validateInternal(obj: F0130_ManagerMandate): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F013_BoardOfManagersMandatoryValidator extends EPZEUBaseValidator<F013_BoardOfManagers, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.boardManagerList).setCollectionValidator(new F01301_BoardManagerMandatoryValidator());
        this.ruleFor(m => m.managerMandate).setValidator(new F0130_ManagerMandateMandatoryValidator());
    }

    public validate(obj: F013_BoardOfManagers): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (obj.boardManagerList.length > 1) {

            for (var i = 0; i < obj.boardManagerList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.boardManagerList[i], "person") && obj.boardManagerList[i].recordOperation != RecordOperations.Erase) {
                    obj.boardManagerList[i].clearErrors(true);
                    obj.boardManagerList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице             
            if (ValidatorHelpers.isExistDublicateIndents(obj.boardManagerList, true, "CR_APP_00116_E"))
                isValid = false;
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.boardManagerList, true)) {

            let isFilledboardOfManagers = false;

            for (var i = 0; i < obj.boardManagerList.length; i++) {
                if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.boardManagerList[i], "person")) {
                    isFilledboardOfManagers = true;
                    break;
                }
            }

            if (!isFilledboardOfManagers) {
                obj.boardManagerList[0].clearErrors();
                obj.boardManagerList[0].addError(this.getMessage('CR_APP_00060_E')); //Задължително е попълването поне на един "Член на Управителен съвет"
                isValid = false;
            }
        }

        return isValid;
    }
}

class F01301_BoardManagerValidator extends RecordValidator<F01301_BoardManager> {

    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F01301_BoardManager): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F013_BoardOfManagersValidator extends EPZEUBaseValidator<F013_BoardOfManagers, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.managerMandate).setValidator(new F0130_ManagerMandateValidator());
        this.ruleFor(m => m.boardManagerList).setCollectionValidator(new F01301_BoardManagerValidator());
    }

    public validate(obj: F013_BoardOfManagers): boolean {
        let isValid = super.validate(obj);

        if (obj.boardManagerList.length > 1) {
            for (var i = 0; i < obj.boardManagerList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.boardManagerList[i], "person") && obj.boardManagerList[i].recordOperation != RecordOperations.Erase) {

                    obj.boardManagerList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице             
            if (ValidatorHelpers.isExistDublicateIndents(obj.boardManagerList, true, "CR_APP_00116_E"))
                isValid = false;
        }

        return isValid;
    }
}