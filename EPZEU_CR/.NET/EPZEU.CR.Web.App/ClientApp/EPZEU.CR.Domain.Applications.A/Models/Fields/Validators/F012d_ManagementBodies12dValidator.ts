import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, RecordValidator, SubjectFLEWithCountyValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F012d_ManagementBodies12d, F012d_ManagementBody12d, F012d_ManagementBody12dMandate } from '../ModelsAutoGenerated';

export class F012d_ManagementBodies12dValidator extends EPZEUBaseValidator<F012d_ManagementBodies12d, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.managementBodies12dList).setCollectionValidator(new F012d1_ManagementBody12dValidator());
        this.ruleFor(m => m.managementBody12dMandate).setValidator(new F012d1ManagementBody12dMandateValidator());
    }

    public validate(obj: F012d_ManagementBodies12d): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.managementBodies12dList, true)) {

            let cntNotEmptyManagers: number = ArrayHelper.queryable.from(obj.managementBodies12dList).where(m => m.recordOperation != RecordOperations.Erase && !ValidatorHelpers.isObjectWithPersonEmpty(m, "subject")).count();

            if (cntNotEmptyManagers == 0) {
                //Грешката трябва да се визуализира когато не е попълнен поне един управител 

                obj.managementBodies12dList[0].clearErrors(true);
                obj.managementBodies12dList[0].addError(this.getMessage('CR_APP_00163_E'));
                isValid = false;
            }
        }

        if (obj.managementBodies12dList.length > 1) {
            for (var i = 0; i < obj.managementBodies12dList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.managementBodies12dList[i], "subject") && obj.managementBodies12dList[i].recordOperation != RecordOperations.Erase) {
                    obj.managementBodies12dList[i].clearErrors(true);
                    obj.managementBodies12dList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.managementBodies12dList, false, "CR_APP_00122_E")) // 
                isValid = false;
        }

        return isValid;
    }
}

export class F012d1_ManagementBody12dValidator extends RecordValidator<F012d_ManagementBody12d> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEWithCountyValidator());
    }

    public validateInternal(obj: F012d_ManagementBody12d): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F012d1ManagementBody12dMandateValidator extends RecordValidator<F012d_ManagementBody12dMandate> {
    constructor() {
        super();

        let errMsg = this.getMessage('GL_INPUT_DATE_E');
        this.ruleFor(m => m.date).must(m => ValidatorHelpers.isValidDate(m.date)).withMessage(errMsg).when(m => !ObjectHelper.isStringNullOrEmpty(m.date));
    }

    public validateInternal(obj: F012d_ManagementBody12dMandate): boolean {
        let isValid = super.validateInternal(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.managementAuthority)) {

            obj.addError(this.getMessage('CR_APP_MANDATORY_AUTHORITY_NAME_Е')); // Задължително е попълването на наименование на органа на управление
            isValid = false;
        }

        return isValid;
    }
}