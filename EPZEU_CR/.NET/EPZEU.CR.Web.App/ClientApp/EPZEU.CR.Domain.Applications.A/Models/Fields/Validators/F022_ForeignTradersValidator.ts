import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { A8 } from '../../ApplicationForms/ApplicationFormsA';
import { F02200_ForeignTraderRegistration } from '../F02200_ForeignTraderRegistration';
import { F02201_ForeignTraderCountry, F02203_ForeignTraderWayOfRepresentation, F022_ForeignTraders } from '../ModelsAutoGenerated';

//#region Sub validators

class F02200_ForeignTraderRegistrationValidator extends RecordValidator<F02200_ForeignTraderRegistration> {

    public validateInternal(obj: F02200_ForeignTraderRegistration): boolean {
        let isValid = super.validateInternal(obj);
        let hasForeignTraderCountryRegistry = this.getValidationContext().foreignCommercialRegisters
            && this.getValidationContext().foreignCommercialRegisters
                .filter(cr => cr.countryCode == (<A8>this.getValidationContext().applicationManager.application).fields.foreignTraders.foreignTraderCountry.countryCodeBRIS 
                && cr.isActive == true).length > 0;

        if (ObjectHelper.isStringNullOrEmpty(obj.name) || (ObjectHelper.isStringNullOrEmpty(obj.legalForm) && ObjectHelper.isStringNullOrEmpty(obj.foreignLegalFormCode))) {
            obj.addError(this.getMessage('CR_APP_00064_E')); //Полетата "Фирма/ Наименование" и "Правна форма" са задължителни!
            isValid = false;
        } else if (ObjectHelper.isStringNullOrEmpty(obj.entryNumber)) {
            obj.addError(this.getMessage('CR_APP_INPUT_ENTRY_NO_REGISTER_E')); //Попълнете номер на вписване в регистъра.
            isValid = false;
        } else if (hasForeignTraderCountryRegistry && ObjectHelper.isStringNullOrEmpty(obj.foreignRegisterCode)) {
            obj.addError(this.getMessage('CR_GL_INPUT_COMPANY_TRADE_CENTRAL_REGISTER_E')); //Изберете дружествен / търговски / централен регистър.
            isValid = false;
        }

        return isValid;
    }
}

class F02201_ForeignTraderCountryValidator extends RecordValidator<F02201_ForeignTraderCountry> {
    constructor() {
        super();

        this.ruleFor(m => m.country).notEmpty().withMessage(this.getMessage('CR_APP_00031_E'));
    }

    public validateInternal(obj: F02201_ForeignTraderCountry): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

//#endregion

export class F022_ForeignTradersValidator extends EPZEUBaseValidator<F022_ForeignTraders, IApplicationFormValidationContext>{
    constructor() {
        super();

        this.ruleFor(m => m.foreignTraderCountry).setValidator(new F02201_ForeignTraderCountryValidator());
        this.ruleFor(m => m.foreignTraderRegistration).setValidator(new F02200_ForeignTraderRegistrationValidator());
        this.ruleFor(m => m.foreignTraderWayOfRepresentation).setValidator(new F02203_ForeignTraderWayOfRepresentationValidator());
    }

    public validate(obj: F022_ForeignTraders): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        let cntNotEmptyForeignTraders: number = ArrayHelper.queryable.from(obj.foreignTraderList).where(m => m.recordOperation != RecordOperations.Erase && !ObjectHelper.isStringNullOrEmpty(m.text)).count();

        obj.foreignTraderList[0].clearErrors();

        if (cntNotEmptyForeignTraders == 0) {
            obj.foreignTraderList[0].addError(this.getMessage('CR_APP_00053_E')); //Задължително е попълването поне на един "Представител"!
            isValid = false;
        }

        if (obj.foreignTraderList.length > 1) {

            for (var i = 0; i < obj.foreignTraderList.length; i++) {

                if (ObjectHelper.isStringNullOrEmpty(obj.foreignTraderList[i].text) && obj.foreignTraderList[i].recordOperation != RecordOperations.Erase) {
                    obj.foreignTraderList[i].clearErrors(true);
                    obj.foreignTraderList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.canBeMarkedForErase(obj.foreignTraderWayOfRepresentation, valCtx)) {

            let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.foreignTraderList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
            let isSelectedTraderWayOfRepresentation = (obj.foreignTraderWayOfRepresentation.jointly || obj.foreignTraderWayOfRepresentation.otherWay || obj.foreignTraderWayOfRepresentation.severally)
                && obj.foreignTraderWayOfRepresentation.recordOperation != RecordOperations.Erase;

            if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.foreignTraderList, true)
                || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.foreignTraderWayOfRepresentation], true)) {

                if (cntNotEmptyRepresentatives > 1 && !isSelectedTraderWayOfRepresentation && !this.validationContext.isRecordDirty(obj.foreignTraderWayOfRepresentation)) {
                    //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                    obj.foreignTraderWayOfRepresentation.clearErrors();
                    obj.foreignTraderWayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                    isValid = false;
                }

                if (isSelectedTraderWayOfRepresentation && obj.foreignTraderWayOfRepresentation.recordOperation != RecordOperations.Erase && cntNotEmptyRepresentatives < 2) {

                    //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                    obj.foreignTraderWayOfRepresentation.clearErrors();
                    obj.foreignTraderWayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}

class F02203_ForeignTraderWayOfRepresentationValidator extends RecordValidator<F02203_ForeignTraderWayOfRepresentation> {
    constructor() {
        super();

        this.ruleFor(m => m.text).notEmpty().when(m => m.otherWay).withMessage(this.getMessage('CR_APP_00046_E'));
    }

    public validateInternal(obj: F02203_ForeignTraderWayOfRepresentation): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}