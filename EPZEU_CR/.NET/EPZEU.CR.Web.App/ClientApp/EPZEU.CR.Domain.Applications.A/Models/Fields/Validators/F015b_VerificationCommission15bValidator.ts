import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F015b1_CommissionMember15b, F015b_VerificationCommission15b, F015b0_VerificationCommission15bMandate } from '../ModelsAutoGenerated';

export class F015b1_CommissionMember15bValidator extends RecordValidator<F015b1_CommissionMember15b> {
    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F015b1_CommissionMember15b): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F015b0_VerificationCommission15bMandateValidator extends RecordValidator<F015b0_VerificationCommission15bMandate> {

    constructor() {
        super();
    }

    public validateInternal(obj: F015b0_VerificationCommission15bMandate): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F015b_VerificationCommission15bValidator extends EPZEUBaseValidator<F015b_VerificationCommission15b, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.commissionMembers15bList).setCollectionValidator(new F015b1_CommissionMember15bValidator());
        this.ruleFor(m => m.verificationCommission15bMandate).setValidator(new F015b0_VerificationCommission15bMandateValidator());
    }

    public validate(obj: F015b_VerificationCommission15b): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (obj.commissionMembers15bList.length > 1) {

            for (var i = 0; i < obj.commissionMembers15bList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.commissionMembers15bList[i], "person") && obj.commissionMembers15bList[i].recordOperation != RecordOperations.Erase) {
                    obj.commissionMembers15bList[i].clearErrors(true);
                    obj.commissionMembers15bList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице             
            if (ValidatorHelpers.isExistDublicateIndents(obj.commissionMembers15bList, true, "CR_APP_00168_E"))
                isValid = false;
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.commissionMembers15bList, true)) {

            let isFilledMembers = false;

            for (var i = 0; i < obj.commissionMembers15bList.length; i++) {

                if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.commissionMembers15bList[i], "person")
                    && obj.commissionMembers15bList[i].recordOperation != RecordOperations.Erase) {
                    isFilledMembers = true;
                    break;
                }
            }

            if (!isFilledMembers) {
                obj.commissionMembers15bList[0].clearErrors(true);
                obj.commissionMembers15bList[0].addError(this.getMessage('CR_APP_00167_E')); // Задължително е попълването поне на един член на проверителната комисия
            }
        }

        return isValid;
    }
}