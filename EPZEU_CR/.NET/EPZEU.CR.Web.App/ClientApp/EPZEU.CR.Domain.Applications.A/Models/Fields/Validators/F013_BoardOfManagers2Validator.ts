import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, RecordValidator, SubjectFLEWithCountyValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F01320_ManagerMandate2, F01321_BoardManager2, F013_BoardOfManagers2 } from '../ModelsAutoGenerated';

class F01321_BoardManager2MandatoryValidator extends RecordValidator<F01321_BoardManager2> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEWithCountyValidator());
    }

    public validateInternal(obj: F01321_BoardManager2): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F01320_ManagerMandate2Validator extends RecordValidator<F01320_ManagerMandate2> {

    constructor() {
        super();
    }

    public validateInternal(obj: F01320_ManagerMandate2): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F013_BoardOfManagers2MandatoryValidator extends EPZEUBaseValidator<F013_BoardOfManagers2, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.managerMandate2).setValidator(new F01320_ManagerMandate2Validator());
        this.ruleFor(m => m.boardManager2List).setCollectionValidator(new F01321_BoardManager2MandatoryValidator());
    }

    public validate(obj: F013_BoardOfManagers2): boolean {
        let isValid = super.validate(obj);

        if (obj.boardManager2List.length > 1) {
            for (var i = 0; i < obj.boardManager2List.length; i++) {

                if (this.validationContext.isRecordEmpty(obj.boardManager2List[i]) && obj.boardManager2List[i].recordOperation != RecordOperations.Erase) {
                    obj.boardManager2List[i].clearErrors(true);
                    obj.boardManager2List[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }
        }

        return isValid;
    }
}

class F01321_BoardManager2Validator extends RecordValidator<F01321_BoardManager2> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEWithCountyValidator());
    }

    public validateInternal(obj: F01321_BoardManager2): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F013_BoardOfManagers2Validator extends EPZEUBaseValidator<F013_BoardOfManagers2, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.managerMandate2).setValidator(new F01320_ManagerMandate2Validator());
        this.ruleFor(m => m.boardManager2List).setCollectionValidator(new F01321_BoardManager2Validator());
    }

    public validate(obj: F013_BoardOfManagers2): boolean {
        let isValid = super.validate(obj);

        if (obj.boardManager2List.length > 1) {
            for (var i = 0; i < obj.boardManager2List.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.boardManager2List[i], "subject") && obj.boardManager2List[i].recordOperation != RecordOperations.Erase) {

                    obj.boardManager2List[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }
            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.boardManager2List, false, "CR_APP_00117_E")) // 
                isValid = false;
        }

        return isValid;
    }
}