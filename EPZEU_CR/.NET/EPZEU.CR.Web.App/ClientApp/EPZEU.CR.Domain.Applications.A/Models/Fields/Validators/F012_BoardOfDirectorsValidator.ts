import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, RecordValidator, SubjectFLEWithCountyValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F01200_BoardOfDirectorsMandate, F01201_Director, F012_BoardOfDirectors } from '../ModelsAutoGenerated';

class F01200_BoardOfDirectorsMandateValidator extends RecordValidator<F01200_BoardOfDirectorsMandate> {
    constructor() {
        super();

        this.ruleFor(m => m.date).must(m => ValidatorHelpers.isValidDate(m.date)).withMessage(this.getMessage('GL_INPUT_DATE_E')).when(m => !ObjectHelper.isStringNullOrEmpty(m.date));
    }

    public validateInternal(obj: F01200_BoardOfDirectorsMandate): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F01201_DirectorValidator extends RecordValidator<F01201_Director> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEWithCountyValidator());
    }

    public validateInternal(obj: F01201_Director): boolean {
        
        let isValid = super.validateInternal(obj);       

        return isValid;
    }
}

export class F012_BoardOfDirectorsValidator extends EPZEUBaseValidator<F012_BoardOfDirectors, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.boardOfDirectorsMandate).setValidator(new F01200_BoardOfDirectorsMandateValidator());
        this.ruleFor(m => m.directorList).setCollectionValidator(new F01201_DirectorValidator());
    }

    public validate(obj: F012_BoardOfDirectors): boolean {

        let isValid = super.validate(obj);

        if (obj.directorList.length > 1) {

            for (var i = 0; i < obj.directorList.length; i++) {
                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.directorList[i], "subject") && obj.directorList[i].recordOperation != RecordOperations.Erase) {
                    obj.directorList[i].clearErrors(true);
                    obj.directorList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.directorList, false, "CR_APP_00115_E")) // 
                isValid = false; 
        }
        
        return isValid;
    }
}

export class F012_BoardOfDirectorsValidatorSimple extends EPZEUBaseValidator<F012_BoardOfDirectors, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.boardOfDirectorsMandate).setValidator(new F01200_BoardOfDirectorsMandateValidator());
    }

    public validate(obj: F012_BoardOfDirectors): boolean {

        let isValid = super.validate(obj);
        return isValid;
    }
}