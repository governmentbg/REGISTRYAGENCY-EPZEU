import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { DomainModelHepler, IApplicationFormValidationContext, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F0223_EuropeanEconomicInterestGrouping } from '../F0223_EuropeanEconomicInterestGrouping';
import { F02232_RepresentersWayOfManagement, F0223_ForeignCompanyData, F02233_PowerOfLiquidators, F02234_PowerOfTrustees } from '../ModelsAutoGenerated';

class F02233_PowerOfLiquidatorsValidator extends RecordValidator<F02233_PowerOfLiquidators>{

    public validateInternal(obj: F02233_PowerOfLiquidators): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F02234_PowerOfTrusteesValidator extends RecordValidator<F02234_PowerOfTrustees>{

    public validateInternal(obj: F02234_PowerOfTrustees): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F0223_ForeignCompanyDataValidator extends RecordValidator<F0223_ForeignCompanyData>{

    public validateInternal(obj: F0223_ForeignCompanyData): boolean {
        let isValid = super.validateInternal(obj);

        obj.companyData.clearErrors();

        //когато е започнато да се попълва, трябва всичките полета да са попълнени
        if (!DomainModelHepler.isObjectEmpty(obj)) {
            if (ObjectHelper.isStringNullOrEmpty(obj.companyData.companyName) ||
                ObjectHelper.isStringNullOrEmpty(obj.companyData.competentAuthorityForRegistration) ||
                ObjectHelper.isStringNullOrEmpty(obj.companyData.registrationNumber)) {

                obj.companyData.addError(this.getMessage('CR_APP_INPUT_DATA_EUROPEAN_UNITED_INTERESTS_E'));//Попълненете данни за Европейско обединение по икономически интереси
                isValid = false;
            }
        }

        return isValid;
    }
}

class F02232_RepresentersWayOfManagementValidator extends RecordValidator<F02232_RepresentersWayOfManagement>{

    public validateInternal(obj: F02232_RepresentersWayOfManagement): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F0223_EuropeanEconomicInterestGroupingValidator extends EPZEUBaseValidator<F0223_EuropeanEconomicInterestGrouping, IApplicationFormValidationContext>{
    constructor() {
        super();

        this.ruleFor(m => m.foreignCompanyData).setValidator(new F0223_ForeignCompanyDataValidator());
        this.ruleFor(m => m.representersWayOfManagement).setValidator(new F02232_RepresentersWayOfManagementValidator());
        this.ruleFor(m => m.powerOfLiquidators).setValidator(new F02233_PowerOfLiquidatorsValidator());
        this.ruleFor(m => m.powerOfTrustees).setValidator(new F02234_PowerOfTrusteesValidator());
    }

    public validate(obj: F0223_EuropeanEconomicInterestGrouping): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        obj.europeanEconomicInterestRepresenterRegularList[0].clearErrors();
        obj.europeanEconomicInterestRepresenterLiquidatorList[0].clearErrors();
        obj.europeanEconomicInterestRepresenterTrusteeList[0].clearErrors();
        
        //Представляващои
        let cntNotEmptyRepresenters: number = ArrayHelper.queryable.from(obj.europeanEconomicInterestRepresenterRegularList).where(m => !ObjectHelper.isStringNullOrEmpty(m.representerName) && m.recordOperation != RecordOperations.Erase).count();

        if (obj.europeanEconomicInterestRepresenterRegularList.length > 1) {
            for (var i = 0; i < obj.europeanEconomicInterestRepresenterRegularList.length; i++) {
                obj.europeanEconomicInterestRepresenterRegularList[i].clearErrors();

                if (ObjectHelper.isStringNullOrEmpty(obj.europeanEconomicInterestRepresenterRegularList[i].representerName) &&
                    obj.europeanEconomicInterestRepresenterRegularList[i].recordOperation != RecordOperations.Erase) {  
                    
                    obj.europeanEconomicInterestRepresenterRegularList[i].addError(this.getMessage("CR_APP_00063_E")) //Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.europeanEconomicInterestRepresenterRegularList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.representersWayOfManagement], true)) {

            if (ValidatorHelpers.canBeMarkedForErase(obj.representersWayOfManagement, valCtx)) {

                // Начин на представляване              
                let isCheckedWayOfManagement = (obj.representersWayOfManagement.jointly || obj.representersWayOfManagement.severally || obj.representersWayOfManagement.otherWay) && obj.representersWayOfManagement.recordOperation != RecordOperations.Erase;
                //когото е избран Начин на представляване
                if (isCheckedWayOfManagement) {
                    //но няма поне двама представляващи
                    if (cntNotEmptyRepresenters < 2) {
                        obj.representersWayOfManagement.addError(this.getMessage("CR_APP_00164_E")) //Начин на представляване трябва да бъде попълнено, само когато представляващите са повече от един.
                        isValid = false;
                    }
                    else
                        //ако е избран друг начин, но не е попълнен текста
                        if (obj.representersWayOfManagement.otherWay && ObjectHelper.isStringNullOrEmpty(obj.representersWayOfManagement.text)) {
                            obj.representersWayOfManagement.addError(this.getMessage("CR_APP_00046_E")) //Когато е избран друг начин на представляване, трябва да се попълни описателното поле.
                            isValid = false;
                        }
                } //не е избран начин на представляване
                else {
                    //но има повече от един представляващи
                    if (cntNotEmptyRepresenters > 1) {
                        obj.representersWayOfManagement.addError(this.getMessage("CR_APP_00071_E")) //Начин на представляване е задължително за попълване, когато представляващите са повече от един.
                        isValid = false;
                    }
                }
            }
        }

        //Ликвидатори
        let cntNotEmptyLiquidators: number = ArrayHelper.queryable.from(obj.europeanEconomicInterestRepresenterLiquidatorList).where(m => !ObjectHelper.isStringNullOrEmpty(m.representerName) && m.recordOperation != RecordOperations.Erase).count();


        if (obj.europeanEconomicInterestRepresenterLiquidatorList.length > 1) {
            for (var i = 0; i < obj.europeanEconomicInterestRepresenterLiquidatorList.length; i++) {
                obj.europeanEconomicInterestRepresenterLiquidatorList[i].clearErrors();

                if (ObjectHelper.isStringNullOrEmpty(obj.europeanEconomicInterestRepresenterLiquidatorList[i].representerName) &&
                    obj.europeanEconomicInterestRepresenterLiquidatorList[i].recordOperation != RecordOperations.Erase) {
                    obj.europeanEconomicInterestRepresenterLiquidatorList[i].addError(this.getMessage("CR_APP_00063_E")) //Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }
        }
        
        //Правомощия на ликвидатора
        //ако е попълнено полето, но няма нито един ликвидатор
        if (cntNotEmptyLiquidators == 0 && !ObjectHelper.isStringNullOrEmpty(obj.powerOfLiquidators.text) && obj.powerOfLiquidators.recordOperation != RecordOperations.Erase) {  
            obj.europeanEconomicInterestRepresenterLiquidatorList[0].clearErrors();
            obj.europeanEconomicInterestRepresenterLiquidatorList[0].addError(this.getMessage("CR_APP_ADD_LIQUIDATOR_E")) //Попълнете ликвидатор.
            isValid = false;
        }

        //Синдици
        let cntNotEmptyTrusties: number = ArrayHelper.queryable.from(obj.europeanEconomicInterestRepresenterTrusteeList).where(m => !ObjectHelper.isStringNullOrEmpty(m.representerName) && m.recordOperation != RecordOperations.Erase).count();

        if (obj.europeanEconomicInterestRepresenterTrusteeList.length > 1) {
            for (var i = 0; i < obj.europeanEconomicInterestRepresenterTrusteeList.length; i++) {
                obj.europeanEconomicInterestRepresenterTrusteeList[i].clearErrors();

                if (ObjectHelper.isStringNullOrEmpty(obj.europeanEconomicInterestRepresenterTrusteeList[i].representerName) &&
                    obj.europeanEconomicInterestRepresenterTrusteeList[i].recordOperation != RecordOperations.Erase) {
                    obj.europeanEconomicInterestRepresenterTrusteeList[i].addError(this.getMessage("CR_APP_00063_E")) //Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }
        }

        //Правомощия на синдика
        //ако е попълнено полето, но няма нито един сидик
        if (cntNotEmptyTrusties == 0 && !ObjectHelper.isStringNullOrEmpty(obj.powerOfTrustees.text)) {
            obj.europeanEconomicInterestRepresenterTrusteeList[0].clearErrors();
            obj.europeanEconomicInterestRepresenterTrusteeList[0].addError(this.getMessage("CR_APP_ADD_SYNDIC_E")) //Попълнете синдик.
            isValid = false;
        }

        return isValid;
    }
}