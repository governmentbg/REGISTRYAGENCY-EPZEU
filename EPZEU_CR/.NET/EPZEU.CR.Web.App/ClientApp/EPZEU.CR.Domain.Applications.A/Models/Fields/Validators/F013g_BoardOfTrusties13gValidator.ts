import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F013g_BoardOfTrusties13g, F013g_BoardOfTrusties13gMandate, F013g_Trustee13g } from '../ModelsAutoGenerated';

export class F013g_Trustee13gValidator extends RecordValidator<F013g_Trustee13g> {

    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F013g_Trustee13g): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F013g_BoardOfTrusties13gMandateValidator extends RecordValidator<F013g_BoardOfTrusties13gMandate> {

    constructor() {
        super();
    }

    public validateInternal(obj: F013g_BoardOfTrusties13gMandate): boolean {

        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F013g_BoardOfTrusties13gValidator extends EPZEUBaseValidator<F013g_BoardOfTrusties13g, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.trustees13gList).setCollectionValidator(new F013g_Trustee13gValidator());
        this.ruleFor(m => m.boardOfTrusties13gMandate).setValidator(new F013g_BoardOfTrusties13gMandateValidator());
    }

    public validate(obj: F013g_BoardOfTrusties13g): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (obj.trustees13gList.length > 1) {

            for (var i = 0; i < obj.trustees13gList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.trustees13gList[i], "person") && obj.trustees13gList[i].recordOperation != RecordOperations.Erase) {
                    obj.trustees13gList[i].clearErrors(true);
                    obj.trustees13gList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице             
            if (ValidatorHelpers.isExistDublicateIndents(obj.trustees13gList, true, "CR_APP_00166_E"))
                isValid = false;
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.trustees13gList, true)) {

            let isFilledTrustees = false;

            for (var i = 0; i < obj.trustees13gList.length; i++) {

                if (!ValidatorHelpers.isObjectWithPersonEmpty(obj.trustees13gList[i], "person")
                    && obj.trustees13gList[i].recordOperation != RecordOperations.Erase) {
                    isFilledTrustees = true;
                    break;
                }
            }

            if (!isFilledTrustees) {
                obj.trustees13gList[0].clearErrors(true);
                obj.trustees13gList[0].addError(this.getMessage('CR_APP_00165_E')); //Задължително е попълването поне на един член на настоятелство

                isValid = false;
            }
        }

        return isValid;
    }
}