import { ObjectHelper, BasePagedSearchCriteria } from 'Cnsys.Core'
import { RDeed, CompanyInfo, ProtectedRightsCompanyInfo, PhysicalOrCompanyObj, SubjectInFieldItem, VerificationActsSubSearchCriteriaResult, RField } from '../Models/ModelsAutoGenerated';
import { VerificationActsSearchCriteria } from '../Models/VerificationActsSearchCriteria';
import { VerificationActsSubSearchCriteria } from '../Models/VerificationActsSubSearchCriteria';
import { PreservedCompaniesSearch } from "../Models/PreservedCompaniesSearch";
import { RightsForCompanySearch } from "../Models/RightsForCompanySearch";
import { VerificationPersonOrgSearch } from "../Models/VerificationPersonOrgSearch";
import { VerificationPersonOrgResultFilters } from "../Models/Enums";
import { ActiveConditionSearch } from "../Models/ActiveConditionSearch";
import { EPZEUBaseDataService } from 'EPZEU.Core';
import { SubUICTypes, ApplicationInfo, DeedSummary, ApplicationDocumentInfo } from 'EPZEU.CR.Core';
import * as moment from 'moment';
import { BulstatDeedsSearchCriteria } from '../Models/ModelsAutoGenerated';
import { StatementReport } from '../Models/StatementReport';
import { StatementsByDateSearch } from '../Models/StatementsByDateSearch';
import { DeedsInStabilizationSearchCriteria } from '../Models/DeedsInStabilizationSearchCriteria';
import { NotificationsUnderNPOSearchCriteria } from '../Models/NotificationsUnderNPOSearchCriteria';
import { Notification } from '../Models/Notification';

export class DeedsDataService extends EPZEUBaseDataService {
    protected baseUrl(): string {
        return super.baseUrl() + "Deeds";
    }

    public getDeed(criteria: ActiveConditionSearch): Promise<RDeed> {
        return this.get<RDeed>(`${criteria.uic}`
            , RDeed
            , { entryDate: criteria.entryDate ? criteria.entryDate.endOf('day') : moment().endOf('day'), loadFieldsFromAllLegalForms: criteria.loadFieldsFromAllLegalForms }
            , null);
    }

    public getFieldHistory(uic: string, subUICType: SubUICTypes, subUIC: string, fieldIdent: string): Promise<RField[]> {
        let url: string = ObjectHelper.isStringNullOrEmpty(subUIC) ? `${uic}/SubDeeds/${subUICType}//Fields/${fieldIdent}/History` : `${uic}/SubDeeds/${subUICType}/${subUIC}/Fields/${fieldIdent}/History`;
        return this.get<RField[]>(url, RField, null, null);
    }

    public getDocuments(uic: string, subUICType: SubUICTypes, subUIC: string, fieldIdent: string, entryDate?: moment.Moment): Promise<ApplicationDocumentInfo[]> {
        let url: string = ObjectHelper.isStringNullOrEmpty(subUIC) ? `${uic}/SubDeeds/${subUICType}//Fields/${fieldIdent}/Documents` : `${uic}/SubDeeds/${subUICType}/${subUIC}/Fields/${fieldIdent}/Documents`;
        return this.get<ApplicationDocumentInfo[]>(url, ApplicationDocumentInfo, { entryDate: entryDate }, null);
    }

    public getDeedPreservedNames(criteria: PreservedCompaniesSearch): Promise<CompanyInfo[]> {
        return this.get<CompanyInfo[]>('PreservedNames', CompanyInfo, criteria, null).then(function (result: CompanyInfo[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
            return result;
        });
    }

    public getProtectedRightsCompanies(criteria: RightsForCompanySearch): Promise<ProtectedRightsCompanyInfo[]> {
        return this.get<ProtectedRightsCompanyInfo[]>('RightsCompanies', ProtectedRightsCompanyInfo, criteria, null).then(function (result: ProtectedRightsCompanyInfo[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;;
            return result;
        });
    }

    public getVerificationPersonOrg(criteria: VerificationPersonOrgSearch): Promise<PhysicalOrCompanyObj[]> {
        let url = criteria.selectedSearchFilter == VerificationPersonOrgResultFilters.PhysicalForm ? 'Subjects' : 'Summary';

        return this.get<PhysicalOrCompanyObj[]>(url, PhysicalOrCompanyObj, criteria, null).then(function (result: PhysicalOrCompanyObj[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;

            return result;
        });
    }

    public getSubjectInFields(ident: string, name: string, includeHistory: boolean, filter: VerificationPersonOrgResultFilters): Promise<SubjectInFieldItem[]> {
        let filterMap: number = filter == VerificationPersonOrgResultFilters.CompanyForm ? 0 : 1;
        return this.get<SubjectInFieldItem[]>('SubjectInFields', SubjectInFieldItem, { uid: ident, name: name, searchInHistory: includeHistory, type: filterMap }, null);
    }

    public getVerificationActs(criteria: VerificationActsSearchCriteria): Promise<VerificationActsSubSearchCriteriaResult> {
        return this.get<VerificationActsSubSearchCriteriaResult>(`VerificationActs/${criteria.uic}`, VerificationActsSubSearchCriteriaResult, { includeHistory: criteria.includeHistory }, null);
    }

    public getVerificationActSubResult(criteria: VerificationActsSubSearchCriteria): Promise<RDeed> {
        return this.get<RDeed>(`VerificationActs/${criteria.uic}/ActiveCondition`, RDeed, { includeHistory: criteria.includeHistory, selectedFields: criteria.selectedFields }, null);
    }

    public getDeedCase(uic: string, criteria: BasePagedSearchCriteria): Promise<ApplicationInfo[]> {
        return this.get<ApplicationInfo[]>(`${uic}/Applications`, ApplicationInfo, criteria, null).then(function (result: ApplicationInfo[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
            return result;
        });
    }

    public getBulstatDeeds(searchCriteria: BulstatDeedsSearchCriteria): Promise<DeedSummary[]> {
        return this.get<DeedSummary[]>(`BulstatDeeds`, DeedSummary, searchCriteria, null)
            .then(function (result: DeedSummary[]) {
                searchCriteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
                return result;
            });
    }

    public getStatements(criteria: StatementsByDateSearch): Promise<StatementReport[]> {
        return this.get<StatementReport[]>('Statements', StatementReport, criteria, null).then(function (result: StatementReport[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
            return result;
        });
    }

    public getDeedsInStabilization(criteria: DeedsInStabilizationSearchCriteria): Promise<DeedSummary[]> {
        return this.get<DeedSummary[]>('Stabilization', DeedSummary, criteria, null)
            .then(function (result: DeedSummary[]) {
                criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
                return result;
            });
    }

    public getNotificationsUnderNPO(criteria: NotificationsUnderNPOSearchCriteria): Promise<Notification[]> {
        return this.get<Notification[]>('NotificationsUnderNPO', Notification, criteria, null).then(function (result: Notification[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
            return result;
        });
    }

    public getDeedNotifications(criteria: NotificationsUnderNPOSearchCriteria): Promise<Notification[]> {
        return this.get<Notification[]>('DeedNotifications', Notification, criteria, null).then(function (result: Notification[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
            return result;
        });
    }
}