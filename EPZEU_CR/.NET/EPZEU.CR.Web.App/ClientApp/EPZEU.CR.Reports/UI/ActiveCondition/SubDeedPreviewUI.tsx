import { ArrayHelper, BindableReference, ObjectHelper, UrlHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseRouteProps, BaseRoutePropsExt, withAsyncFrame, withRouter } from "Cnsys.UI.React";
import { EPZEUBaseComponent, ValidationSummaryErrors, IDataServiceProviderProps, withDataServiceProvider } from "EPZEU.Core";
import { SubUICTypes } from "EPZEU.CR.Core";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import * as moment from 'moment';
import * as React from "react";
import { ActiveConditionSearch, DeedsDataService } from "../..";
import { ActiveConditionSectionResultUI } from "./ActiveConditionSectionResultUI";
import { RSection } from "../../Models/ModelsAutoGenerated";
import { ActiveConditionSearchValidator } from "../../Models/Validation/ActiveConditionSearchValidator";

interface SubDeedPreviewUIProps extends BaseRouteProps<any>, AsyncUIProps, BaseRoutePropsExt, IDataServiceProviderProps {
}

@observer class SubDeedPreviewUIImpl extends EPZEUBaseComponent<SubDeedPreviewUIProps, null> {
    @observable private _foundNoResults: boolean;
    @observable private _selectedSubDeedData: RSection;
    @observable private _searchCriteriaErrors: any[] = [];
    private _uic: string;
    private _searchCriteria: ActiveConditionSearch;

    constructor(props: SubDeedPreviewUIProps) {
        super(props);
        this.searchSubDeedData = this.searchSubDeedData.bind(this);

        if (!ObjectHelper.isStringNullOrEmpty(this.props.location.search)) {
            this.props.registerAsyncOperation(this.searchSubDeedData());
        }
    }

    render(): JSX.Element {
        let content = null;
        if (this._searchCriteria.hasErrors()) {
            content = <ValidationSummaryErrors errors={this._searchCriteriaErrors} />
        } else if (this._foundNoResults) {
            content = (<div className="alert alert-info">{this.getResource('GL_NOT_FOUND_RESULTS_E')}</div>);
        } else if (this._selectedSubDeedData) {
            content = <ActiveConditionSectionResultUI modelReference={new BindableReference(this._selectedSubDeedData)} deedUic={this._uic} entryDate={moment().endOf('day')} />;
        }

        return (
            <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                {content}
            </div>
        );
    }

    @action private async searchSubDeedData(): Promise<void> {
        this._searchCriteria = new ActiveConditionSearch();
        let validator = new ActiveConditionSearchValidator();
        let uic = UrlHelper.getUrlParameter('uic');
        this._uic = uic;
        this._searchCriteria.uic = !ObjectHelper.isStringNullOrEmpty(uic) ? uic : undefined;
        let subUIC = UrlHelper.getUrlParameter('subUIC');
        let subUICType = Number(UrlHelper.getUrlParameter('subUICType')) as SubUICTypes;

        if (validator.validate(this._searchCriteria)) {
            let reportsDataService = this.props.dataSrvProvider.getDataService<DeedsDataService>(DeedsDataService);

            return reportsDataService.getDeed(this._searchCriteria).then(deed => {
                runInAction(() => {
                    let section = ArrayHelper.queryable.from(deed.sections).firstOrDefault(section => section.subUICType == subUICType);
                    if (section)
                        section.subDeeds = [ArrayHelper.queryable.from(section.subDeeds).firstOrDefault(subDeed => subDeed.subUIC == subUIC)];

                    this._selectedSubDeedData = section;
                });
            });
        }
    }
}

export const SubDeedPreviewUI = withRouter(withDataServiceProvider(withAsyncFrame(SubDeedPreviewUIImpl)));