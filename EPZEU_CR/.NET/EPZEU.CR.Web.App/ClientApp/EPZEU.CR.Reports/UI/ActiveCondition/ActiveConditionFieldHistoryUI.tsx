import * as React from "react";
import { AsyncUIProps, BaseProps, withAsyncFrame, RawHTML, LoadingUI } from "Cnsys.UI.React";
import { action, observable, runInAction } from 'mobx';
import { observer } from "mobx-react";
import { SubUICTypes } from "EPZEU.CR.Core";
import { EPZEUBaseComponent, IDataServiceProviderProps, withDataServiceProvider, moduleContext } from "EPZEU.Core";
import { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';
import { DeedsDataService } from "../../Services/DeedsDataService";
import { RField } from "../../Models/ModelsAutoGenerated";

interface ActiveConditionFieldHistoryUIProps extends BaseProps {
    uic: string;
    subUICType: SubUICTypes;
    subUIC: string;
    fieldIdent: string;
}

@observer export class ActiveConditionFieldHistoryUI extends EPZEUBaseComponent<ActiveConditionFieldHistoryUIProps, any> {
    @observable private showModal: boolean;
    @observable private data: RField[];

    constructor(props: ActiveConditionFieldHistoryUIProps, context: any) {
        super(props, context);

        //Bind
        this.showFieldHistoryModal = this.showFieldHistoryModal.bind(this);
        this.dataLoaded = this.dataLoaded.bind(this);
        this.closeModal = this.closeModal.bind(this);

        //Init
        this.showModal = false;
        this.data = undefined;
    }

    render(): JSX.Element {
        return (
            <>
                <button className="btn btn-secondary" title={this.getResource('GL_HISTORY_L')} onClick={this.showFieldHistoryModal}>
                    <i className="ui-icon ui-icon-history" aria-hidden="true"></i>
                </button>

                <Modal centered={true} backdrop={true} autoFocus={true} isOpen={this.showModal} onExit={this.closeModal} zIndex={2000} toggle={this.closeModal}>
                    <ModalHeader toggle={this.closeModal}>
                        {this.getResource('GL_HISTORY_L')}
                    </ModalHeader>
                    <ModalBody>
                        <FieldHistoryResultUI data={this.data} {...this.props} onDataLoaded={this.dataLoaded} />
                    </ModalBody>
                    <ModalFooter>
                        <div className="button-bar">
                            <div className="left-side">&nbsp;</div>
                            <div className="right-side">
                                <button type="button" className="btn btn-secondary" onClick={this.closeModal} data-dismiss="modal">{this.getResource('GL_CLOSE_L')}</button>
                            </div>
                        </div>
                    </ModalFooter>
                </Modal>
            </>
        );
    }

    @action closeModal() {
        this.showModal = false;
    }

    @action showFieldHistoryModal(e: any): void {
        this.showModal = true;
    }

    @action dataLoaded(data: RField[]): void {
        this.data = data;
    }
}

interface FieldHistoryResultUIProps extends ActiveConditionFieldHistoryUIProps, AsyncUIProps, IDataServiceProviderProps {
    data: RField[],
    onDataLoaded: (data: RField[]) => void;
}

class FieldHistoryResultUIImpl extends EPZEUBaseComponent<FieldHistoryResultUIProps, any> {
    constructor(props: FieldHistoryResultUIProps, context: any) {
        super(props, context);

        //Bind
        this.loadData = this.loadData.bind(this);

        this.loadData();
    }

    render(): JSX.Element {
        if (!this.props.data || this.props.data.length == 0) return null;

        return (
            <div className="table-responsive-block">
                <table className="table table-borderless table-striped table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            <th className="w-100">{this.getResource(this.props.data[0].nameCode)}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {this.props.data.map((history: any, idx: number) => {
                            return (<FieldHistoryRow key={idx} data={history} fieldName={this.props.data[0].nameCode} />);
                        })}
                    </tbody>
                </table>
            </div>);
    }

    loadData(): void {
        if (this.props.data && this.props.data.length > 0)
            return;

        let that = this;
        let reportsDataService = this.props.dataSrvProvider.getDataService<DeedsDataService>(DeedsDataService);

        this.props.registerAsyncOperation(reportsDataService.getFieldHistory(this.props.uic, this.props.subUICType, this.props.subUIC, this.props.fieldIdent)
            .then(fieldHistory => {
                if (that.props.onDataLoaded)
                    that.props.onDataLoaded(fieldHistory);
            })
        );
    }
}

const FieldHistoryResultUI = withDataServiceProvider(withAsyncFrame(FieldHistoryResultUIImpl, true, true));

const FieldHistoryRow = (props: any) => {
    return (
        <tr>
            <td className="nowrap">{props.data.fieldEntryDate.format(`DD.MM.YYYY [${moduleContext.resourceManager.getResourceByKey('GL_YEAR_ABBREVIATION_L')}] HH:mm:ss`)}</td>
            <td>
                <span className="field-title field-title--preview d-sm-none">{moduleContext.resourceManager.getResourceByKey(props.fieldName)}</span>
                <RawHTML rawHtmlText={props.data.htmlData} />
            </td>
        </tr>);
}