import { ObjectHelper, UrlHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseRouteProps, BaseRoutePropsExt, RawHTML, withAsyncFrame, withRouter } from "Cnsys.UI.React";
import { EPZEUBaseComponent, IDataServiceProviderProps, MobileMenuToggle, ValidationSummaryErrors, withDataServiceProvider } from "EPZEU.Core";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import * as moment from 'moment';
import * as React from "react";
import { ActiveConditionSearch } from "../../Models/ActiveConditionSearch";
import { RDeed } from "../../Models/ModelsAutoGenerated";
import { ActiveConditionSearchValidator } from "../../Models/Validation/ActiveConditionSearchValidator";
import { DeedsDataService } from '../../Services/DeedsDataService';
import { ActiveConditionResultUI } from "./ActiveConditionResultUI";

interface ActiveConditionTabResultUIProps extends BaseRouteProps<any>, AsyncUIProps, BaseRoutePropsExt, IDataServiceProviderProps {
}

@observer class ActiveConditionTabResultUIImpl extends EPZEUBaseComponent<ActiveConditionTabResultUIProps, null> {
    private searchCriteriaValidator: ActiveConditionSearchValidator;

    @observable private isAlreadySearched: boolean;
    @observable private deed: RDeed;
    @observable private searchCriteria: ActiveConditionSearch;

    constructor(props: ActiveConditionTabResultUIProps) {
        super(props);

        //Bind
        this.searchInternal = this.searchInternal.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);

        //Init
        this.isAlreadySearched = false;
        this.searchCriteriaValidator = new ActiveConditionSearchValidator();
        this.searchCriteria = new ActiveConditionSearch();
    }

    render(): JSX.Element {
        if (this.props.asyncErrors && this.props.asyncErrors.length > 0) {
            return (
                <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                    <div className="page-wrapper">
                        {this.props.drawErrors()}
                        {this.props.drawWarnings()}
                    </div>
                </div>);
        } else if (this.isAlreadySearched) {
            if (this.searchCriteria.hasErrors()) {
                return (
                    <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                        <div className="page-wrapper">
                            <ValidationSummaryErrors errors={this.searchCriteria.getModelErrors()} />
                        </div>
                    </div>);
            } else if (!this.deed) {
                return (
                    <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                        <div className="page-wrapper">
                            <div className="alert alert-info">{this.getResource('GL_NOT_FOUND_RESULTS_E')}</div>
                        </div>
                    </div>);
            } else {
                return (
                    <>
                        <div className="additional-nav-warapper section-wrapper">
                            <div className="fixed-content-width">
                                <div className="page-heading">
                                    <h3 className="page-heading-title"><RawHTML rawHtmlText={this.deed.fullName} /></h3>
                                    <div className="page-heading-sub-title">
                                        {this.getResource('GL_COMPANY_ID_L')}<b>&nbsp;{this.deed.uic}</b>, {this.getResource('GL_STATE_BY_DATE_L')}:&nbsp;<b>{this.deed.entryDate ? this.deed.entryDate.format('L') : moment().format('L')}{this.getResource('GL_YEAR_ABBREVIATION_L')}</b>
                                        {this.deed.hasLegalFormChange === true && window.location.href.indexOf('loadFieldsFromAllLegalForms') < 0 ? <><br /><a href={`${window.location.href}&loadFieldsFromAllLegalForms=true`} target="_blank">{this.getResource('CR_APP_SHOW_FIELDS_FROM_PREVIOUS_LEGAL_FORM_L')}</a></> : null}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                            <div className="button-menu-container mt-3">
                                <MobileMenuToggle scrollTopOnClick />
                            </div>
                            <ActiveConditionResultUI {...this.bind(this.deed, 'deed')} />
                        </div>
                    </>);
            }
        } else {
            return null;
        }
    }

    componentDidMount() {
        if (!ObjectHelper.isStringNullOrEmpty(this.props.location.search)) {
            this.searchCriteria = this.getSearchCriteriaFromUrl()
            this.props.registerAsyncOperation(this.searchInternal());
        }
    }

    @action private searchInternal(): Promise<void> {
        let that = this;

        if (this.searchCriteriaValidator.validate(this.searchCriteria)) {
            let reportsDataService = this.props.dataSrvProvider.getDataService<DeedsDataService>(DeedsDataService);

            return reportsDataService.getDeed(that.searchCriteria).then(deed => {
                runInAction(() => {
                    that.isAlreadySearched = true;
                    that.deed = deed;
                });
            });
        }
    }

    private getSearchCriteriaFromUrl(): ActiveConditionSearch {
        let searchCriteria = new ActiveConditionSearch();

        let uic = UrlHelper.getUrlParameter('uic');
        searchCriteria.uic = !ObjectHelper.isStringNullOrEmpty(uic) ? uic : undefined;

        let entryDate = UrlHelper.getUrlParameter('entryDate');
        searchCriteria.entryDate = !ObjectHelper.isStringNullOrEmpty(entryDate) ? moment(new Date(entryDate)) : moment().endOf('day');

        let loadFieldsFromAllLegalForms = UrlHelper.getUrlParameter('loadFieldsFromAllLegalForms');
        searchCriteria.loadFieldsFromAllLegalForms = ObjectHelper.isStringNullOrEmpty(loadFieldsFromAllLegalForms) ? false : Boolean(loadFieldsFromAllLegalForms);

        return searchCriteria;
    }
}

export const ActiveConditionTabResultUI = withRouter(withDataServiceProvider(withAsyncFrame(ActiveConditionTabResultUIImpl, false)));