import * as React from "react";
import { observer } from "mobx-react";
import { observable, action } from "mobx";
import { EPZEUBaseComponent } from "EPZEU.Core";
import { BaseProps } from "Cnsys.UI.React";
import { RDeed, RSection } from "../../Models/ModelsAutoGenerated";
import { ActiveConditionMenu } from "../../Models/ActiveConditionMenu";
import { ActiveConditionMenuItem } from "../../Models/ActiveConditionMenuItem";
import { ActiveConditionMenuUI } from "./ActiveConditionMenuUI";
import { ActiveConditionSectionResultUI } from "./ActiveConditionSectionResultUI";
import { ActiveConditionCaseUI } from "./ActiveConditionCaseUI";
import { ActiveConditionInstructionsUI } from "./ActiveConditionInstructionsUI";
import { ActiveConditionAssignmentsUI } from "./ActiveConditionAssignmentsUI";
import { ActiveConditionCompanyCasesUI } from "./ActiveConditionCompanyCasesUI";
import { ActiveConditionNotificationUI } from "./ActiveConditionNotificationUI";
import * as PropTypes from 'prop-types';

interface ActiveConditionResultUIProps extends BaseProps {
}

@observer export class ActiveConditionResultUI extends EPZEUBaseComponent<ActiveConditionResultUIProps, RDeed> {
    @observable private selectedMenuIdx = 0;
    @observable private menuItems: ActiveConditionMenu = null;

    constructor(props: ActiveConditionResultUIProps) {
        super(props)

        //Bind
        this.menuClick = this.menuClick.bind(this);
        this.createActiveConditionMenu = this.createActiveConditionMenu.bind(this);

        //Init
        this.selectedMenuIdx = 0;
        this.menuItems = this.createActiveConditionMenu();
    }

    render() {
        let result: any = null;


        if (this.model) {
            result = (
                <>
                    <ActiveConditionMenuUI onClickMenuOptionCallback={this.menuClick} {...this.bind<ActiveConditionMenu>(this.menuItems, "")} />

                    <div className="page-wrapper">
                        <>{(this.menuItems.items[this.selectedMenuIdx]).showMenuItemComponent()}</>
                    </div>
                </>);
        }

        return result;
    }

    @action private createActiveConditionMenu(): ActiveConditionMenu {
        if (!this.model)
            return null;

        let that = this;
        let result = new ActiveConditionMenu();
        result.items = [];

        for (let i: number = 0; i < this.model.sections.length; i++) {
            let item: ActiveConditionMenuItem = new ActiveConditionMenuItem();
            item.isActive = i == this.selectedMenuIdx;
            item.text = this.getResource(this.model.sections[i].nameCode);
            item.value = i;
            item.showMenuItemComponent = function () {
                let m: RSection = this.model.sections[this.selectedMenuIdx];
                return <ActiveConditionSectionResultUI {...this.bind(m, 'Section')} deedUic={this.model.uic} entryDate={this.model.entryDate} />
            }.bind(this);

            result.items.push(item);
        }

        //Дело
        let caseTab: ActiveConditionMenuItem = new ActiveConditionMenuItem();
        caseTab.isActive = this.selectedMenuIdx == result.items.length;
        caseTab.text = this.getResource('CR_GL_CASE_L');
        caseTab.value = result.items.length;
        caseTab.showMenuItemComponent = function () {
            return <ActiveConditionCaseUI uic={this.model.uicWithCtx} />
        }.bind(this);

        result.items.push(caseTab);

        if (this.model.hasInstructions === true) {
            //Указания
            let instructionTab: ActiveConditionMenuItem = new ActiveConditionMenuItem();
            instructionTab.isActive = this.selectedMenuIdx == result.items.length;
            instructionTab.text = this.getResource('GL_INSTRUCTIONS_L');
            instructionTab.value = result.items.length;
            instructionTab.showMenuItemComponent = function () {
                return <ActiveConditionInstructionsUI uic={this.model.uic} toDate={this.model.entryDate} />
            }.bind(this);

            result.items.push(instructionTab);
        }

        if (this.model.hasAssignments === true) {
            //Назначения
            let assignmentsTab: ActiveConditionMenuItem = new ActiveConditionMenuItem(); 
            assignmentsTab.isActive = this.selectedMenuIdx == result.items.length;
            assignmentsTab.text = this.getResource('GL_APPOINTMENTS_L');
            assignmentsTab.value = result.items.length;
            assignmentsTab.showMenuItemComponent = function () {
                return <ActiveConditionAssignmentsUI uic={this.model.uicWithCtx} toDate={this.model.entryDate}  />
            }.bind(this);

            result.items.push(assignmentsTab);
        }

        if (this.model.hasCompanyCasees === true) {
            //Фирмено дело
            let companyCasesTab: ActiveConditionMenuItem = new ActiveConditionMenuItem();
            companyCasesTab.isActive = this.selectedMenuIdx == result.items.length;
            companyCasesTab.text = this.getResource('CR_GL_COMPANY_CASE_L');
            companyCasesTab.value = result.items.length;
            companyCasesTab.showMenuItemComponent = function () {
                return <ActiveConditionCompanyCasesUI uic={this.model.uic} />
            }.bind(this);

            result.items.push(companyCasesTab);
        }

        if (this.model.hasNotifications === true) {
            //Нотификации
            let notificationTab: ActiveConditionMenuItem = new ActiveConditionMenuItem();
            notificationTab.isActive = this.selectedMenuIdx == result.items.length;
            notificationTab.text = this.getResource('CR_GL_NOTIFICATIONS_ACTS_L');
            notificationTab.value = result.items.length;
            notificationTab.showMenuItemComponent = function () {
                return <ActiveConditionNotificationUI uic={this.model.uic} />
            }.bind(this);

            result.items.push(notificationTab);
        }

        return result;
    }

    @action private menuClick(idx: number): void {
        this.selectedMenuIdx = idx;
    }
}

(ActiveConditionResultUI as any).contextTypes = { masterReportHeader: PropTypes.string };

