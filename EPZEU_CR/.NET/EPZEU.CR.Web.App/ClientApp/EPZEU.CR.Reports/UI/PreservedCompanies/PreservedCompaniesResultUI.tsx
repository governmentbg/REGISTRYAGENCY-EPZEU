import * as React from "react";
import { observer } from "mobx-react";
import { observable, action } from "mobx";
import { BaseProps } from "Cnsys.UI.React";
import { EPZEUBaseComponent } from "EPZEU.Core";
import { PreservedCompaniesResult } from "../../Models/PreservedCompaniesResult";
import { CompanyInfo } from "../../Models/ModelsAutoGenerated";
import { Fragment } from "react";
import { ObjectHelper } from "Cnsys.Core";

interface PreservedCompaniesResultUIProps extends BaseProps {
    onSort: (column: string, direction: string) => void;
}

@observer export class PreservedCompaniesResultUI extends EPZEUBaseComponent<PreservedCompaniesResultUIProps, PreservedCompaniesResult> {
    @observable private sortedColumn: string;
    @observable private sortedDirection: string;

    constructor(props: PreservedCompaniesResultUIProps) {
        super(props);

        this.sortedColumn = 'CompanyName';
        this.sortedDirection = 'ASC';
        this.sortColumn = this.sortColumn.bind(this);
        this.rowClick = this.rowClick.bind(this);
    }

    render(): JSX.Element {
        if (!this.model || !this.model.items || this.model.items.length == 0) return null;

        return (<div className="table-responsive-block">
            <div className="columns-sorting">
                <div className="form-row">
                    <div className="col-12">
                        <label className="field-title field-title--preview">Сортиране по</label>
                    </div>
                    <div className="form-group col">
                        <select value={this.sortedColumn != null ? this.sortedColumn : ""} onChange={(e:any)=>this.sortColumn(e.target.value)} className="form-control form-control-sm">
                            <option value="CompanyName">{this.getResource('CR_GL_COMPANY_NAME_L')}</option>
                            <option value="ActiveFrom">{this.getResource('CR_GL_INPUT_LIST_OF_L')}</option>
                        </select>
                    </div>
                    <div className="col-auto">
                        <button className="system-button sort active" onClick={() => { this.sortColumn(this.sortedColumn); }}>
                            <i className={`ui-icon ui-icon-sort${this.sortedDirection == "ASC" ? "-down" : "-up"}`}></i>
                        </button>
                    </div>
                </div>
            </div>
            <table className="table table-borderless table-striped table-hover table-collapsible">
                <thead>
                    <tr>
                        <th className="single-icon-td"></th>
                        <th>
                            <button className={`system-button sort ${this.sortedColumn == "CompanyName" ? "active" : ""}`} onClick={(e) => { this.sortColumn('CompanyName'); }}>
                                {this.getResource('CR_GL_COMPANY_NAME_L')}<i className={`ui-icon ui-icon-sort${this.sortedColumn == "CompanyName" ? (this.sortedDirection == "ASC" ? "-down" : "-up") : ""}`}></i>
                            </button>
                        </th>                       
                        <th style={{ width: "25%" }}>{this.getResource('CR_GL_SAVED_TO_L')}</th>
                        <th style={{ width: "25%" }}>
                            <button className={`system-button sort ${this.sortedColumn == "ActiveFrom" ? "active" : ""}`} onClick={(e) => { this.sortColumn('ActiveFrom'); }}>
                                {this.getResource('CR_GL_INPUT_LIST_OF_L')}<i className={`ui-icon ui-icon-sort${this.sortedColumn == "ActiveFrom" ? (this.sortedDirection == "ASC" ? "-down" : "-up") : ""}`}></i>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    {this.model.items.map((item: CompanyInfo, idx: number) => {
                        let colapsibleDivId = ObjectHelper.newGuid();
                        return (
                            <Fragment key={`${item.companyName}_${item.legalFormName}_${idx}`}>
                                <tr className={`${idx % 2 == 0 ? "odd-color cursor-pointer" : "even-color cursor-pointer"}`} data-colapsible-container={`${colapsibleDivId}`} onClick={this.rowClick}>
                                    <td className="toggle-collapse">
                                        <button className={this.model.items.length == 1 ? "system-button" : "system-button collapsed"}>
                                            <i className="ui-icon ui-icon-chevron-right"></i>
                                        </button>
                                    </td>
                                    <td>
                                        <p className="field-text">
                                            <a href="javascript://" className="collapsed">
                                                <b>{item.companyName}</b>
                                            </a>
                                        </p>
                                    </td>
                                    <td>
                                        <span className="field-title field-title--preview d-sm-none">{this.getResource('CR_GL_SAVED_TO_L')}</span>
                                        <p className="field-text">{this.dateDisplayFor(item.activeTo, `DD.MM.YYYY ${this.getResource('GL_YEAR_ABBREVIATION_L')} HH:mm:ss`)}</p>
                                    </td>
                                    <td>
                                        <span className="field-title field-title--preview d-sm-none">{this.getResource('CR_GL_INPUT_LIST_OF_L')}</span>
                                        <p className="field-text">{this.dateDisplayFor(item.activeFrom, `DD.MM.YYYY ${this.getResource('GL_YEAR_ABBREVIATION_L')} HH:mm:ss`)}</p>
                                    </td>
                                </tr>
                                <tr className="collapsible-row">
                                    <td colSpan={4}>
                                        <div id={colapsibleDivId} style={this.model.items.length == 1 ? { display: 'block' } : { display: 'none' }}>
                                            <div className="collapsible-row-content">
                                                <div className="field-container">
                                                    <span className="field-title field-title--preview">{this.getResource('CR_GL_WRITE_FOREIGN_LANG_L')}</span>
                                                    <p className="field-text">{item.trasnliteration}</p>
                                                </div>
                                                <div className="field-container">
                                                    <span className="field-title field-title--preview">{this.getResource("CR_GL_INTERESTED_PERSON_L")}</span>
                                                    <p className="field-text">{item.personPosition}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </Fragment>
                        );
                    })}
                </tbody>
            </table>
        </div>);
    }

    //#region private 

    @action private sortColumn(colName: string) {
        if (this.sortedColumn === colName) {
            this.sortedDirection = this.sortedDirection === 'ASC' ? 'DESC' : 'ASC';
        } else {
            this.sortedColumn = colName;
            this.sortedDirection = 'ASC';
        }

        if (this.props.onSort) {
            this.props.onSort(colName, this.sortedDirection);
        }
    }

    private rowClick(e: any): void {
        let tableRow = $(e.currentTarget);
        let triger = tableRow.find('button').first();
        let colapsibleDivId = tableRow.attr('data-colapsible-container');

        if (triger.data('clicked')) {
            // Previously clicked, stop actions
            e.preventDefault();
            e.stopPropagation();
        } else {
            // Mark to ignore next click
            triger.data('clicked', true);

            //code
            $('#' + colapsibleDivId).slideToggle();
            triger.toggleClass('collapsed');

            // Unmark after 1 second
            window.setTimeout(function () {
                triger.removeData('clicked');
            }, 1000);
        }
    }

    //#endregion
}