import * as React from "react";
import { Link } from 'react-router-dom';
import { observer } from "mobx-react";
import { runInAction, observable, action } from "mobx";
import { BaseProps } from "Cnsys.UI.React";
import { EPZEUBaseComponent, IDataServiceProviderProps, withDataServiceProvider } from "EPZEU.Core";
import { VerificationPersonOrgResultFilters } from "../../Models/Enums";
import { DeedsDataService } from "../..";
import { SubjectInFieldItem, PhysicalOrCompanyObj } from "../../Models/ModelsAutoGenerated";
import { ObjectHelper } from "Cnsys.Core";
import { Fragment } from "react";
import { Constants } from "../../Constants";


interface VerificationPersonOrgResultRowUIProps extends BaseProps, IDataServiceProviderProps {
    isOdd: boolean;
    initalExpand?: boolean;
    includeHistory?: boolean;
}

@observer class VerificationPersonOrgResultRowUIImpl extends EPZEUBaseComponent<VerificationPersonOrgResultRowUIProps, PhysicalOrCompanyObj> {
    private collapsibleDiv: HTMLDivElement;
    private collapsibleBtn: HTMLButtonElement;

    @observable isExpand: boolean;
    @observable isClicked: boolean;
    @observable isSubDataLoaded: boolean;
    @observable errorOnSubDataLoading: boolean;
    @observable errorOnSubDataLoadingMsg: string;
    @observable subData: SubjectInFieldItem[];

    constructor(props: VerificationPersonOrgResultRowUIProps) {
        super(props);

        //Bind
        this.onComponentClick = this.onComponentClick.bind(this);
        this.loadSubData = this.loadSubData.bind(this);
        this.onSlid = this.onSlid.bind(this);

        //Init
        this.isExpand = this.props.initalExpand;
        this.isClicked = this.props.initalExpand === true ? true : false;
        this.isSubDataLoaded = false;
        this.errorOnSubDataLoading = false;
        this.subData = undefined;
        this.errorOnSubDataLoadingMsg = undefined;

        if (this.props.initalExpand === true) {
            this.loadSubData();
        }
    }

    render(): JSX.Element {
        let that = this;
        //if (this.props.initalExpand === true && !this.isSubDataLoaded) return null;

        let result: any = (
            <Fragment key={1}>
                <td className="toggle-collapse">
                    {(this.isClicked && !this.isSubDataLoaded && !this.errorOnSubDataLoading) ?
                        <button className="system-button" disabled>
                            <i className="ui-icon ui-icon-loading ui-icon-spin" aria-hidden="true"></i>
                        </button>
                        :
                        <button ref={(el) => { this.collapsibleBtn = el; }} className={this.isExpand === true ? "system-button" : "system-button collapsed"} onClick={this.onComponentClick} >
                            <i className="ui-icon ui-icon-chevron-right" aria-hidden="true"></i>
                        </button>}                   
                </td>
                <td>
                    <p className="field-text">
                        <a href="javascript://" className="collapsed" onClick={(this.isClicked && !this.isSubDataLoaded && !this.errorOnSubDataLoading) ? null :  this.onComponentClick }>
                            <b>{this.model.isPhysical ? this.model.name : this.model.companyFullName}</b>
                        </a>
                    </p>
                </td>
                {this.model.isPhysical ?
                    null
                    :
                    <td>
                        <span className="field-title field-title--preview d-sm-none">{this.getResource('CR_GL_COMPANY_ID_L')}</span>
                        <p className="field-text">{this.model.ident}</p>
                    </td>}
            </Fragment>);

        return (
            <>
                <tr className={this.props.isOdd ? "odd-color" : "even-color"}>
                    {result}
                </tr>
                <tr className="collapsible-row">
                    <td colSpan={this.model.isPhysical ? 2 : 3}>
                        <div ref={(el) => { this.collapsibleDiv = el; }} style={this.isExpand === true ? {} : { display: 'none' }}>
                            <div className="collapsible-row-content collapsible-row-content--border">
                                {this.isSubDataLoaded === true ? this.subData && this.subData.length > 0 ?
                                    <table className="table inner-table">
                                        <thead className="thead-invisible">
                                            <tr>
                                                <th style={{ width: '35%' }}></th>
                                                <th style={{ width: '65%' }}></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {this.subData.map((item: SubjectInFieldItem, idx: number) => {
                                                return (
                                                    <tr key={`${item.uic}_${item.fieldName}_${idx}`}>
                                                        <td>
                                                            <p className="field-text">
                                                                {this.getResource(item.fieldName)}
                                                            </p>
                                                        </td>
                                                        <td>
                                                            <p className="field-text">
                                                                <Link to={`${Constants.PATHS.ACTIVE_CONDITION_RESULT}?uic=${item.uic}`} target="_blank">{item.companyFullName + (ObjectHelper.isStringNullOrEmpty(item.companyNameSuffixFlag) ? '' : (' - ' + this.getResource(item.companyNameSuffixFlag)))}</Link>{', ' + this.getResource('CR_GL_COMPANY_ID_L') + ' ' + item.uic + (ObjectHelper.isStringNullOrEmpty(item.mandateText) ? '' : this.getResource('GL_END_DATE_L') + ' ' + item.mandateText)}
                                                            </p>
                                                        </td>
                                                    </tr>);
                                            })}
                                        </tbody>
                                    </table>
                                    :
                                    <div className="alert alert-info" role="alert">{this.getResource('GL_NO_DATA_FOUND_L')}</div>
                                    : null}

                                {this.errorOnSubDataLoading === true ? <div className="alert alert-danger" role="alert">{this.errorOnSubDataLoadingMsg}</div> : null}
                            </div>
                        </div>
                    </td>
                </tr>
            </>);
    }


    private loadSubData(): Promise<void> {
        let that = this;
        let dataSrv: DeedsDataService = this.props.dataSrvProvider.getDataService<DeedsDataService>(DeedsDataService);
        let searchType = this.model.isPhysical ? VerificationPersonOrgResultFilters.PhysicalForm : VerificationPersonOrgResultFilters.CompanyForm;
        let searchName: string = this.model.isPhysical ? this.model.name : null;

        return dataSrv.getSubjectInFields(this.model.ident, searchName, this.props.includeHistory === true, searchType).then(res => {
            runInAction(() => {
                that.subData = res;
                that.isSubDataLoaded = true;
                that.errorOnSubDataLoading = false;
            });
        }).catch((err) => {
            runInAction(() => {
                that.errorOnSubDataLoading = true;
                that.errorOnSubDataLoadingMsg = err.message;
            });
        });
    }

    @action private onComponentClick(e: any): void {
        let that = this;
        this.isClicked = true;

        if (!this.isSubDataLoaded) {
            this.loadSubData().then(that.onSlid);
        } else {
            this.onSlid();
        }
    }

    private onSlid(): void {
        let that = this;

        if (!$(this.collapsibleBtn).data('clicked')) {
            // Mark to ignore next click
            $(this.collapsibleBtn).data('clicked', true);

            //code           
            $(this.collapsibleDiv).slideToggle('fast', function () {
                runInAction(() => {
                    that.isExpand = this.style.display === 'none' ? false : true;
                });
            });
            $(this.collapsibleBtn).toggleClass('collapsed');

            // Unmark after 1 second
            window.setTimeout(function () {
                let btn = $(that.collapsibleBtn);
                btn.removeData('clicked');
            }, 1000);
        }
    }
}

export const VerificationPersonOrgResultRowUI = withDataServiceProvider(VerificationPersonOrgResultRowUIImpl);