import { ArrayHelper, ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, TreeNode, TreeViewerUI, TreeViewModes, withAsyncFrame } from "Cnsys.UI.React";
import { CheckboxTreeNodeUI, EPZEUBaseComponent, attributesClassFormControlMaxL9, ValidationSummary, ValidationSummaryStrategy, IDataServiceProviderProps, withDataServiceProvider, StickyBottomElementForIE } from "EPZEU.Core";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { VerificationActsSubSearchCriteriaResult } from "../../Models/ModelsAutoGenerated";
import { VerificationActsSearchCriteria } from '../../Models/VerificationActsSearchCriteria';
import { VerificationActsSubSearchCriteria } from '../../Models/VerificationActsSubSearchCriteria';
import { DeedsDataService } from '../../Services/DeedsDataService';
import { VerificationActsSearchCriteriaValidator } from "../../Models/Validation/VerificationActsSearchCriteriaValidator";

interface VerificationActsSearchUIProps extends BaseProps, AsyncUIProps, IDataServiceProviderProps {
    onSearchCallback: (criteria: VerificationActsSubSearchCriteria) => void;
}

@observer class VerificationActsSearchUIImpl extends EPZEUBaseComponent<VerificationActsSearchUIProps, VerificationActsSearchCriteria> {
    private searchButton: HTMLButtonElement = null;
    private cmpUniqueId: string;
    @observable private subResult: VerificationActsSubSearchCriteriaResult;

    constructor(props: VerificationActsSearchUIProps) {
        super(props)

        //Init
        this.cmpUniqueId = ObjectHelper.newGuid();
        this.searchButton = null;
        this.subResult = undefined;

        //Bind
        this.onSearch = this.onSearch.bind(this);
        this.onClear = this.onClear.bind(this);
        this.onIncludeChange = this.onIncludeChange.bind(this);
        this.documentKeyPress = this.documentKeyPress.bind(this);
        this.componentDidMount = this.componentDidMount.bind(this);
        this.componentWillUnmount = this.componentWillUnmount.bind(this);
        this.onCollapseCriteria = this.onCollapseCriteria.bind(this);
        this.onShowResult = this.onShowResult.bind(this);
        this.clearSelectedNodes = this.clearSelectedNodes.bind(this);
        this.clearNode = this.clearNode.bind(this);
    }

    componentDidMount() {
        document.addEventListener('keypress', this.documentKeyPress, true);
    }

    componentWillUnmount() {
        document.removeEventListener('keypress', this.documentKeyPress, true);
    }

    render(): JSX.Element {
        let searchCriteriaUI: any = null;

        if (this.subResult) {
            searchCriteriaUI = (
                <div id="sticky-parent">
                    <div className="row">
                        <div className="form-group col-sm-12">
                            <label className="field-title field-title--form">{this.getResource('CR_GL_COMPANY_NAME_L')}</label>
                            <p className="field-text">{this.subResult.companyFullName}</p>
                        </div>
                        <div className="form-group col-sm-12">
                            <label className="field-title field-title--form">{this.getResource('CR_GL_COMPANY_ID_L')}</label>
                            <p className="field-text">{this.subResult.uic}</p>
                        </div>
                        {this.model.includeHistory === true ?
                            (<div className="form-group col-sm-12">
                                <p className="field-text">{this.getResource('CR_GL_INCLUDED_HISTORY_L')}</p>
                            </div>)
                            : null}
                    </div>

                    <div className="row">
                        <div className="col-12">
                            <label className="field-title field-title--form">{this.getResource("CR_GL_SELECT_SECTION_GROUP_FIELD_L")}</label>
                        </div>
                        <div className="form-group col-12">
                            <TreeViewerUI cssClass="tree-list tree-list--selectable"
                                nodeUIComponentType={CheckboxTreeNodeUI} {...this.bind(this.subResult.nodes, this.props.viewMode)}
                                treeMode={TreeViewModes.MultiSelectTree}
                                nodeChildContainerCss="tree-list-collapsible" />
                        </div>
                    </div>

                    <StickyBottomElementForIE stickyElementId="sticky-bottom-bar" outerElementId="sticky-parent">
                        <div id="sticky-bottom-bar" className="button-bar button-bar--form button-bar--sticky">
                            <div className="left-side">
                                <a className="btn btn-secondary" href="javascript://" onClick={this.onClear}>{this.getResource("CR_GL_NEW_SEARCH_L")}</a>
                                <button type="button" className="btn btn-secondary" onClick={this.clearSelectedNodes}>{this.getResource("GL_CLEAR_L")}</button>
                            </div>
                            <div className="right-side">
                                <a className="btn btn-primary" href="javascript://" onClick={this.onShowResult}>{this.getResource("CR_GL_DISPLAY_REPORT_L")}</a>
                            </div>
                        </div>
                    </StickyBottomElementForIE>
                </div>);
        }
        else {
            searchCriteriaUI = (
                <div className="search-box search-box--report">
                    <div className="card card--search card--collapsible">
                        <div id={`colapsable-triger-${this.cmpUniqueId}`} className="card-header">
                            <h3>{this.getResource('GL_SEARCHING_L')}</h3>
                            <button className="system-button toggle-collapse" onClick={() => { this.onCollapseCriteria(`collapsable-content-${this.cmpUniqueId}`) }}>
                                <i className="ui-icon ui-icon-chevron-up" aria-hidden="true"></i>
                            </button>
                        </div>
                        <div id={`collapsable-content-${this.cmpUniqueId}`} className="collapse" style={{ display: 'block' }}>
                            <div className="card-body">
                                <div className="row">
                                    <div className="form-group col-sm-6 col-lg-4">
                                        {this.labelFor(m => m.uic, 'CR_GL_COMPANY_ID_BULSTAT_L')}
                                        {this.textBoxFor(m => m.uic, attributesClassFormControlMaxL9)}
                                    </div>

                                </div>
                                <div className="row">
                                    <div className="col-12 form-group">
                                        <div className="custom-control-inline custom-control custom-checkbox">
                                            <input id={`includeHistory-${this.cmpUniqueId}`} type="checkbox" value="includeHistory" onChange={this.onIncludeChange} checked={this.model.includeHistory == true} className="custom-control-input" />
                                            <label className="custom-control-label" htmlFor={`includeHistory-${this.cmpUniqueId}`}>{this.getResource('CR_GL_INCLUDED_HISTORY_L')}</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className="card-footer">
                                <div className="button-bar">
                                    <div className="left-side">
                                        <button type="button" onClick={this.onClear} className="btn btn-secondary">{this.getResource("GL_CLEAR_L")}</button>
                                    </div>
                                    <div className="right-side">
                                        <button type="button" ref={(btn: HTMLButtonElement) => { this.searchButton = btn; }} onClick={this.onSearch} className="btn btn-primary"><i className="ui-icon ui-icon-search ci-btn mr-1"></i>{this.getResource("GL_SEARCH_L")}</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>);
        }

        return (
            <>
                <ValidationSummary {...this.props} propNames={this.valSummaryPropNames || [""]} strategy={this.valSummaryStrategy || ValidationSummaryStrategy.excludeAllExcept} includeErrorsRecursive={this.valSummaryRecursive} />
                {searchCriteriaUI}
            </>);
    }

    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept;
    valSummaryRecursive: true;
    valSummaryPropNames: ["", "VerificationActsSearchCriteria."];

    onSearch(): void {
        let that = this;
        let validator = new VerificationActsSearchCriteriaValidator();
        if (validator.validate(that.model)) {
            let dataSrv: DeedsDataService = this.props.dataSrvProvider.getDataService<DeedsDataService>(DeedsDataService);

            this.props.registerAsyncOperation(dataSrv.getVerificationActs(that.model).then(r => {
                runInAction(() => {
                    that.subResult = r;

                    if (!r) {
                        that.model.addError(this.getResource('GL_NO_DATA_FOUND_L'));
                    }
                });
            }));
        }
    }

    @action onShowResult(e: any): void {
        if (this.props.onSearchCallback && this.subResult) {
            this.model.clearErrors();

            let selectedNodes = this.subResult.nodes.getSelectedTreeNodes();
            let selectedFields = ArrayHelper.queryable.from(selectedNodes).where(node => (node.parentID && (!node.children || node.children.length == 0))).select(node => node.value).toArray();

            if (!selectedFields || selectedFields.length == 0) {
                this.model.addError(this.getResource('GL_SELECT_FIELD_E'));
            } else {
                let criteria: VerificationActsSubSearchCriteria = new VerificationActsSubSearchCriteria({
                    uic: this.subResult.uic,
                    selectedFields: selectedFields.reduce(function (prevVal: string, currVal: string) {
                        return ObjectHelper.isStringNullOrEmpty(prevVal) ? currVal : prevVal + ',' + currVal;
                    }),
                    includeHistory: this.model.includeHistory
                });

                this.props.onSearchCallback(criteria);
            }
        }
    }

    @action onClear() {
        let hasSubResults = this.subResult ? true : false;

        this.model.uic = undefined;
        this.model.includeHistory = false;
        this.subResult = undefined;
        this.model.clearErrors();

        if (hasSubResults) {
            scrollTo(0, 0);
        }
    }

    @action onIncludeChange(event: any): void {
        let selectedValue = event.target.value;

        if (selectedValue == 'includeHistory') {
            this.model.includeHistory = this.model.includeHistory == true ? false : true;
        }
    }

    private documentKeyPress(e: any) {
        if (e.keyCode === 13) {
            this.searchButton.click();
        }
    }

    private onCollapseCriteria(targetId: string): void {
        let triger = $(`#colapsable-triger-${this.cmpUniqueId}`);
        triger.toggleClass('collapsed');


        $('#' + targetId).slideToggle();
    }

    @action clearSelectedNodes(): void {
        for (let i: number = 0; i < this.subResult.nodes.items.length; i++) {
            this.clearNode(this.subResult.nodes.items[i]);
        }
    }

    private clearNode(node: TreeNode): void {
        node.selected = false;
        if (node.children && node.children.length > 0) {
            for (let i: number = 0; i < node.children.length; i++) {
                this.clearNode(node.children[i]);
            }
        }
    }
}

export const VerificationActsSearchUI = withAsyncFrame(withDataServiceProvider(VerificationActsSearchUIImpl));