import * as React from "react";
import { observer } from "mobx-react";
import { observable, action, runInAction } from "mobx";
import * as moment from 'moment';
import { ObjectHelper, UrlHelper } from "Cnsys.Core";
import { EPZEUBaseComponent, IDataServiceProviderProps, withDataServiceProvider, MobileMenuToggle } from "EPZEU.Core";
import { withAsyncFrame, AsyncUIProps, BaseRouteProps, BaseRoutePropsExt, withRouter, RawHTML } from "Cnsys.UI.React";
import { DeedsDataService } from '../../Services/DeedsDataService';
import { RDeed } from "../../Models/ModelsAutoGenerated";
import { VerificationActsSubSearchCriteria } from '../../Models/VerificationActsSubSearchCriteria';
import { ActiveConditionResultUI } from "../ActiveCondition/ActiveConditionResultUI";
import { decompressFromEncodedURIComponent } from 'lz-string';

interface VerificationActsTabResultUIProps extends BaseRouteProps<any>, AsyncUIProps, BaseRoutePropsExt, IDataServiceProviderProps {
}

@observer class VerificationActsTabResultUIImpl extends EPZEUBaseComponent<VerificationActsTabResultUIProps, null> {
    private searchCriteria: VerificationActsSubSearchCriteria;

    @observable private isAlreadySearched: boolean;
    @observable private deed: RDeed;
    @observable private isCriteriaValid: boolean;

    constructor(props: VerificationActsTabResultUIProps) {
        super(props);

        //Init
        this.deed = undefined;
        this.searchCriteria = undefined;
        this.isAlreadySearched = false;
        this.isCriteriaValid = true;

        //Bind
        this.searchInternal = this.searchInternal.bind(this);

        if (!ObjectHelper.isStringNullOrEmpty(this.props.location.search)) {
            this.searchCriteria = this.getSearchCriteriaFromUrl()
            this.props.registerAsyncOperation(this.searchInternal());
        }
    }

    render(): JSX.Element {
        if (this.props.asyncErrors && this.props.asyncErrors.length > 0) {
            return (
                <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                    <div className="page-wrapper">
                        {this.props.drawErrors()}
                        {this.props.drawWarnings()}
                    </div>
                </div>);
        } else if (this.isAlreadySearched) {
            if (!this.isCriteriaValid) {
                return (
                    <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                        <div className="page-wrapper">
                            <div className="alert alert-danger" role="alert">{this.getResource('CR_APP_NO_SELECTED_FIELD_E')}</div>
                        </div>
                    </div>);
            } else if (!this.deed) {
                return (
                    <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                        <div className="page-wrapper">
                            <div className="alert alert-info">{this.getResource('GL_NOT_FOUND_RESULTS_E')}</div>
                        </div>
                    </div>);
            } else {
                return (
                    <>
                        <div className="additional-nav-warapper section-wrapper">
                            <div className="fixed-content-width">
                                <div className="page-heading">
                                    <h3 className="page-heading-title"><RawHTML rawHtmlText={this.deed.fullName} /></h3>
                                    <div className="page-heading-sub-title">
                                        {this.getResource('GL_COMPANY_ID_L')}<b>&nbsp;{this.deed.uic}</b>, {this.getResource('GL_STATE_BY_DATE_L')}:&nbsp;<b>{this.deed.entryDate ? this.deed.entryDate.format('L') : moment().format('L')}{this.getResource('GL_YEAR_ABBREVIATION_L')}</b>
                                        {this.deed.hasLegalFormChange === true && window.location.href.indexOf('loadFieldsFromAllLegalForms') < 0 ? <><br /><a href={`${window.location.href}&loadFieldsFromAllLegalForms=true`} target="_blank">{this.getResource('CR_APP_SHOW_FIELDS_FROM_PREVIOUS_LEGAL_FORM_L')}</a></> : null}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                            <div className="button-menu-container mt-3">
                                <MobileMenuToggle scrollTopOnClick />
                            </div>
                            <ActiveConditionResultUI {...this.bind(this.deed, 'deed')} />
                        </div>
                    </>);
            }
        } else {
            return null;
        }
    }

    @action private searchInternal(): Promise<void> {
        let that = this;

        if (!this.searchCriteria || !this.searchCriteria.selectedFields || this.searchCriteria.selectedFields.length == 0) {
            this.isCriteriaValid = false;
            return Promise.resolve();
        } else {
            let dataSrv = this.props.dataSrvProvider.getDataService<DeedsDataService>(DeedsDataService);

            return dataSrv.getVerificationActSubResult(this.searchCriteria).then(res => {
                runInAction(() => {
                    that.deed = res;
                    that.isAlreadySearched = true;
                });
            });
        }
    }

    private getSearchCriteriaFromUrl(): VerificationActsSubSearchCriteria {
        let searchCriteria = new VerificationActsSubSearchCriteria();
        let compressedCriteria = UrlHelper.getUrlParameter('criteria');

        const { uic } = this.props.match.params;

        searchCriteria.uic = uic;

        if (compressedCriteria) {
            let decompressedParams = decompressFromEncodedURIComponent(compressedCriteria);
            let decodedParams = decodeURIComponent(decompressedParams)
            let splitedParams = decodedParams.split('&');

            for (let i = 0; i < splitedParams.length; i++) {
                let currParam = splitedParams[i].split('=');
                let paramName = currParam[0];
                let paramVal = currParam[1];

                if (paramName == 'selectedFields')
                    searchCriteria.selectedFields = paramVal;
                else if (paramName == 'includeHistory')
                    searchCriteria.includeHistory = (paramVal && paramVal.toLowerCase() === 'true') ? true : false;
                else
                    throw new Error('Invalid criteria.');
            }
        } else {
            let fields = UrlHelper.getUrlParameter('selectedFields');
            searchCriteria.selectedFields = ObjectHelper.isStringNullOrEmpty(fields) ? undefined : fields;

            let includeHistory = UrlHelper.getUrlParameter('includeHistory');
            searchCriteria.includeHistory = (includeHistory && includeHistory.toLowerCase() === 'true') ? true : false;
        }

        return searchCriteria;
    }
}

export const VerificationActsTabResultUI = withRouter(withAsyncFrame(withDataServiceProvider(VerificationActsTabResultUIImpl), false));