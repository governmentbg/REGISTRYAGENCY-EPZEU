import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { Person, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { G1 } from '../../ApplicationForms/ApplicationFormsG';
import { ActCompany, ActsCompanies } from '../ModelsAutoGenerated';
import { ApplicationFormGValidator } from './ApplicationFormGValidator';

export class G1Validator extends ApplicationFormGValidator<G1> {
    constructor() {
        super();

        this.ruleFor(m => m.actsCompanies).setCollectionValidator(new ActsCompaniesValidator());
    }

    public validate(obj: G1): boolean {
        let isValid = super.validate(obj);

        if (obj.actsCompanies.actsCompaniesList != null) {
            const StatementAC: string = "29";
            var lCompanies: string[] = []

            for (var i = 0; i < obj.actsCompanies.actsCompaniesList.length; i++) {
                obj.actsCompanies.actsCompaniesList[i].clearErrors();

                if (lCompanies.length == 0)
                    lCompanies.push(obj.fields.uic.text);

                if (obj.actsCompanies.actsCompaniesList[i].subject != null
                    && !ValidatorHelpers.areAllFieldsEmpty(obj.actsCompanies.actsCompaniesList[i].subject.name, obj.actsCompanies.actsCompaniesList[i].subject.indent)
                    && (ObjectHelper.isStringNullOrEmpty(obj.actsCompanies.actsCompaniesList[i].subject.name)
                        || ObjectHelper.isStringNullOrEmpty(obj.actsCompanies.actsCompaniesList[i].subject.indent))) {

                    obj.actsCompanies.actsCompaniesList[i].addError(this.getMessage('GL_INPUT_NAME_ID_E'))
                    isValid = false;

                } else if (obj.actsCompanies.actsCompaniesList[i].subject != null && !ObjectHelper.isStringNullOrEmpty(obj.actsCompanies.actsCompaniesList[i].subject.indent)) {

                    if (lCompanies.filter(x => x == obj.actsCompanies.actsCompaniesList[i].subject.indent).length > 0) {

                        obj.actsCompanies.actsCompaniesList[i].addError(this.getMessage('CR_APP_ADDED_COMPANY_E'))
                        isValid = false;
                    } else
                        lCompanies.push(obj.actsCompanies.actsCompaniesList[i].subject.indent)

                    if (obj.fields.statements.statements.filter(x => x.actModeValue == StatementAC).length == 0) {
                        obj.actsCompanies.actsCompaniesList[i].addError(this.getMessage('CR_APP_00102_E'))
                        isValid = false;
                    }
                } else {
                    if (obj.actsCompanies.actsCompaniesList.length > 1) {
                        obj.actsCompanies.actsCompaniesList[i].addError(this.getMessage('CR_APP_00063_E'))
                        isValid = false;
                    }
                }
            }
        }

        return isValid;
    }
}

class ActsCompaniesValidator extends EPZEUBaseValidator<ActsCompanies, any> {
    constructor() {
        super();

        this.ruleFor(m => m.actsCompaniesList).setValidator(new ActCompanyValidator());
    }

    public validate(obj: ActsCompanies): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

class ActCompanyValidator extends EPZEUBaseValidator<ActCompany, any> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new CompanyValidator());
    }

    public validate(obj: ActCompany): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}

export class CompanyValidator extends EPZEUBaseValidator<Person, any> {
    constructor() {
        super();

        this.ruleFor(m => m.indent).isValidBULSTAT().withMessage(this.getMessage('GL_INVALID_IDENTIFIER_E')); // Невалиден идентификатор.
    }

    public validate(obj: Person): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}