import { TypeSystem } from 'Cnsys.Core';
import { ApplicationWithFieldsFormBase } from 'EPZEU.CR.Domain';
import { observable } from 'mobx';
import { moduleContext } from '../../ModuleContext';
import { ActsCompanies, ApplicationFormGFieldsBase, G1Fields, G2Fields, G3Fields } from './ModelsAutoGenerated';

@TypeSystem.typeDecorator('ApplicationFormGBase', moduleContext.moduleName)
export class ApplicationFormGBase<T extends ApplicationFormGFieldsBase> extends ApplicationWithFieldsFormBase<T> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}

@TypeSystem.typeDecorator('G1', moduleContext.moduleName)
export class G1 extends ApplicationFormGBase<G1Fields> {

    @observable private _actsCompanies: ActsCompanies = null;

    @TypeSystem.propertyDecorator(ActsCompanies ? ActsCompanies : moduleContext.moduleName + '.' + 'ActsCompanies')
    public set actsCompanies(val: ActsCompanies) {
        this._actsCompanies = val;
    }

    public get actsCompanies(): ActsCompanies {
        return this._actsCompanies;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new G1Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('G2', moduleContext.moduleName)
export class G2 extends ApplicationFormGBase<G2Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new G2Fields(obj.fields);
        }
    }
}

@TypeSystem.typeDecorator('G3', moduleContext.moduleName)
export class G3 extends ApplicationFormGBase<G3Fields> {

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);

        if (obj && obj.fields) {
            this.fields = new G3Fields(obj.fields);
        }
    }
}