import { BindableReference, ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from 'Cnsys.UI.React';
import { EPZEUBaseComponent, ValidationSummary } from 'EPZEU.Core';
import { ApplicationFormContextProviderProps, AttachedDocument, DocumentsUI, RecordOperations, withApplicationFormContext, withFieldContainer } from 'EPZEU.CR.Domain';
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { F10019A0_StatementA, F10019A_StatementsA } from '../../Models/Fields/ModelsAutoGenerated';

interface F1001_DescriptionOfDeclaredStatementProps extends BaseProps, AsyncUIProps, ApplicationFormContextProviderProps {
    possibleDocumentTypesGetter: () => Promise<{ documentTypeID: string, documentTypeName: string, minOccurs: number, maxOccurs: number }[]>,
    isChangingNameDisabled?: boolean;
}

@observer class F1001_DescriptionOfDeclaredStatementUI extends EPZEUBaseComponent<F1001_DescriptionOfDeclaredStatementProps, F10019A_StatementsA> {
    @observable possibleDocumentTypes: { documentTypeID: string, documentTypeName: string, minOccurs: number, maxOccurs: number }[];

    constructor(props: F1001_DescriptionOfDeclaredStatementProps) {
        super(props);

        this.onDocumentSaved = this.onDocumentSaved.bind(this);
        this.onDocumentUpdated = this.onDocumentUpdated.bind(this);
        this.onDocumentDeleted = this.onDocumentDeleted.bind(this);

        if (this.props.possibleDocumentTypesGetter) {
            this.props.registerAsyncOperation(this.props.possibleDocumentTypesGetter().bind(this).then(pTypes => {
                this.possibleDocumentTypes = pTypes;
            }))
        }
    }

    renderEdit(): JSX.Element {
        let errors = [];
        let modelErrors = this.model.getModelErrors()

        for (var i = 0; i < modelErrors.length; i++) {
            errors.push(modelErrors[i].message)
        }

        return <DocumentsUI
                viewMode={this.props.viewMode}
                fullHtmlName="ActDocuments"
                modelReference={new BindableReference(this.props.applicationManager.application.documents)}
                possibleDocumentTypesGetter={this.props.possibleDocumentTypesGetter}
                isAct={true}
                onDocumentSaved={this.onDocumentSaved}
                onDocumentUpdated={this.onDocumentUpdated}
                onDocumentDeleted={this.onDocumentDeleted}
                outerErrors={errors}/>
    }

    renderDisplay(): JSX.Element {
        return <><DocumentsUI
            viewMode={this.props.viewMode}
            fullHtmlName="ActDocuments"
            modelReference={new BindableReference(this.props.applicationManager.application.documents)}
            possibleDocumentTypesGetter={this.props.possibleDocumentTypesGetter}
            isAct={true} />
            <ValidationSummary {...this.props} includeErrorsRecursive={true} model={this.model} /></>
    }

    @action onDocumentSaved(doc: AttachedDocument) {
        let docIds = doc.documentTypeID.split(".");

        //Гледаме дали документа е "Декларация по чл.38, ал.9, т.2 от ЗСч", създаването на statement за този документ се създава в мениджъра G3FormManager.
        if (!ObjectHelper.isStringNullOrEmpty(doc.guid) && docIds[0] == "5" && docIds[1] != "61") {
            var statement = new F10019A0_StatementA();

            statement.isActWithErasedPersonalData = doc.isActWithErasedPersonalData == true;
            statement.actModeText = this.possibleDocumentTypes.filter(dt => dt.documentTypeID == doc.documentTypeID)[0].documentTypeName;
            statement.actModeValue = docIds[1];
            statement.description = doc.description;
            statement.actID = doc.guid;

            statement.recordOperation = RecordOperations.Add;
            this.model.statements.push(statement);
        }
    }

    @action onDocumentUpdated(doc: AttachedDocument) {

        if (!ObjectHelper.isStringNullOrEmpty(doc.guid)) {
            var statement = this.model.statements.filter(s => s.actID == doc.guid)[0];

            statement.isActWithErasedPersonalData = doc.isActWithErasedPersonalData == true;
            statement.actModeText = this.possibleDocumentTypes.filter(dt => dt.documentTypeID == doc.documentTypeID)[0].documentTypeName;
            statement.actModeValue = doc.documentTypeID.split(".")[1];
            statement.description = doc.description;
        }
    }

    onDocumentDeleted(doc: AttachedDocument) {
        var itemToDel = this.model.statements.filter(s => s.actID == doc.guid)[0];
        var indexOfItemToDel = this.model.statements.indexOf(itemToDel);

        if (indexOfItemToDel > -1)
            this.model.statements.splice(indexOfItemToDel, 1);
    }
}

export const F1001_DescriptionOfDeclaredStatementFieldUI = withFieldContainer(withAsyncFrame(withApplicationFormContext(F1001_DescriptionOfDeclaredStatementUI)), {
    fieldLabelTextKey: "CR_F_1001_L",
});