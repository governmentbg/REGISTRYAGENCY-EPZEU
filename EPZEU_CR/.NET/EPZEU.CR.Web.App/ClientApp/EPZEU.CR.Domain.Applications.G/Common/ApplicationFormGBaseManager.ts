import { ObjectHelper } from 'Cnsys.Core'
import { ApplicationDocumentType, Registers, Nomenclatures } from 'EPZEU.Core'
import { ApplicationWithFieldsFormBaseManager, IApplicationWithFieldsFormManager, DeedsDataService, Address } from 'EPZEU.CR.Domain'
import { ApplicationFormGBase } from '../Models/ApplicationForms/ApplicationFormsG'
import { ApplicationFormGFieldsBase } from '../Models/ApplicationForms/ModelsAutoGenerated'

export interface IApplicationFormGManager extends IApplicationWithFieldsFormManager {
    getPossibleActAttachedDocumentTypes: () => Promise<{ documentTypeID: string, documentTypeName: string, minOccurs: number, maxOccurs: number }[]>;
}

export abstract class ApplicationFormGBaseManager<TAppl extends ApplicationFormGBase<ApplicationFormGFieldsBase>> extends ApplicationWithFieldsFormBaseManager<TAppl> implements IApplicationFormGManager {

    constructor() {
        super();

        this.getPossibleActAttachedDocumentTypes = this.getPossibleActAttachedDocumentTypes.bind(this);
    }

    //#region Virtual

    public get canFillAppExchangeAddress(): boolean {
        return true;
    }

    public getSeatAddress(): Promise<Address> {
        return new DeedsDataService().getCompanySeat(this.application.fields.uic.text).then((seat) => {
            if (seat) {
                return JSON.parse(JSON.stringify(seat.address));
            }
            else {
                return null;
            }
        });
    }

    protected filterPossibleApplicationDocumentType(appDocTypes: ApplicationDocumentType[]): ApplicationDocumentType[] {
        return super.filterPossibleApplicationDocumentType(appDocTypes).filter(adt => adt.documentTypeID.indexOf('1.') == 0);
    }

    //#endregion
    //#region IApplicationFormGManager

    public getPossibleActAttachedDocumentTypes(): Promise<{ documentTypeID: string, documentTypeName: string, minOccurs: number, maxOccurs: number }[]> {

        return Nomenclatures.getApplicationDocumentTypes(Registers.CR, this.application.appType.toString()).bind(this)
            .then(appDocTypes => {
                return appDocTypes.filter(appDocType => appDocType.documentTypeID.indexOf('5.') == 0)
                    .map(appDocType => {
                        return { documentTypeID: appDocType.documentTypeID, documentTypeName: appDocType.documentType.name, minOccurs: appDocType.minOccurs, maxOccurs: appDocType.maxOccurs }
                    })
            });
    }

    //#endregion 
}

export function isApplicationFormGManager(obj: IApplicationFormGManager | any): obj is IApplicationFormGManager {
    return obj && ObjectHelper.isSubClassOf(obj, ApplicationFormGBaseManager);
}