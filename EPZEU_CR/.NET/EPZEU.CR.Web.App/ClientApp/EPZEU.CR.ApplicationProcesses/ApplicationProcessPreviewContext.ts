import { ClientError, ObjectHelper, UrlHelper } from "Cnsys.Core";
import { ApplicationFormTypes, ApplicationsService, Constants, DocumentsDataService } from "EPZEU.CR.Core";
import { ApplicationFormBase, ApplicationItem, ApplicationProviderFactory, AttachedDocument, IApplicationFormManager, IApplicationProcessContext, IApplicationProvider, ProcessStates, ProcessStatuses, UIModes } from "EPZEU.CR.Domain";
import { action, observable, runInAction } from "mobx";
import { APApplicationRequest } from "./Models/ModelsAutoGenerated";
import { ApplicationProcessDataService } from "./Services/ApplicationProcessDataService";

export class ApplicationProcessPreviewContext implements IApplicationProcessContext {
    @observable private _isContextInitialized: boolean;
    @observable private _isDraftApplicationProcess: boolean;

    private _applicationItems: ApplicationItem[];
    private _appProcessservice: ApplicationProcessDataService;
    private _appService: ApplicationsService;

    constructor(appProcessservice: ApplicationProcessDataService, appService: ApplicationsService) {
        this._isContextInitialized = false;
        this._isDraftApplicationProcess = false;
        this._applicationItems = [];
        this._appProcessservice = appProcessservice;
        this._appService = appService;
        this.getAttachedDocumentDownloadURL = this.getAttachedDocumentDownloadURL.bind(this);
    }

    public isDraftApplicationProcess(): boolean {
        return this._isDraftApplicationProcess;
    }

    public async tryLoadDraftApplicationProcess(appProcessID: number): Promise<boolean> {
        this._isDraftApplicationProcess = true;
        if (this.isContextInitialized) {
            this.clearContext();
        }

        var appProcess = await this._appProcessservice.getApplicationProcess(appProcessID, true);

        if (ObjectHelper.isNullOrUndefined(appProcess)) {
            return false;
        }

        this._applicationItems = [];

        var providerPromises: Promise<IApplicationProvider>[] = [];

        for (var appl of appProcess.applications) {
            providerPromises.push(ApplicationProviderFactory.getApplicationProvider(appl.type));
        };

        var providers: IApplicationProvider[] = [];

        for (var providerPromise of providerPromises) {
            providers.push(await providerPromise);
        }

        runInAction(() => {
            var mainAppl = appProcess.applications.filter(appl => appl.applicationID == appProcess.mainApplicationID)[0];
            var mainApplProvider = providers.filter(p => p.applicationType == mainAppl.type)[0];
            var mainApplManager = mainApplProvider.getApplicationManager();

            for (var appl of appProcess.applications) {
                let manager: IApplicationFormManager;
                let provider = providers.filter(p => p.applicationType == appl.type)[0];

                if (appl.applicationID == mainAppl.applicationID) {
                    manager = mainApplManager;

                    manager.init(appl.content, {
                        processContext: this,
                        additionalData: appl.additionalData,
                        uiMode: UIModes.Edit
                    });
                }
                else {
                    manager = provider.getApplicationManager();

                    manager.init(appl.content, {
                        processContext: this,
                        additionalData: appl.additionalData,
                        uiMode: UIModes.Edit
                    });
                }

                var applItem: ApplicationItem = {
                    applicationManager: manager,
                    applicationProvider: provider,
                    order: appl.order,
                    isMainAppl: appl.applicationID == mainAppl.applicationID
                };

                this._applicationItems.push(applItem);
            };

            this._isContextInitialized = true;
        });

        return Promise.resolve(true);
    }

    public async tryLoadSendApplicationProcess(incomingNumber: string): Promise<boolean> {
        this._isDraftApplicationProcess = false;

        if (this.isContextInitialized) {
            this.clearContext();
        }

        var appForm = await this._appService.getApplicationForm(incomingNumber);

        if (ObjectHelper.isNullOrUndefined(appForm)) {
            return false;
        }

        var additionalApplications: any[] = appForm.applications;
        appForm.applications = undefined;

        //#region Load Providers

        var providerPromises: Promise<IApplicationProvider>[] = [];
        providerPromises.push(ApplicationProviderFactory.getApplicationProvider(appForm.appType));

        if (additionalApplications) {
            for (var appl of additionalApplications) {
                providerPromises.push(ApplicationProviderFactory.getApplicationProvider(appl.appType));
            };
        }

        var providers: IApplicationProvider[] = [];

        for (var providerPromise of providerPromises) {
            providers.push(await providerPromise);
        }

        //#endregion

        var order = 1;
        var mainApplProvider = providers.filter(p => p.applicationType == appForm.appType)[0];
        var mainApplManager = mainApplProvider.getApplicationManager();

        mainApplManager.init(appForm, {
            processContext: this,
            additionalData: null,
            uiMode: UIModes.Preview
        });

        this._applicationItems.push({
            applicationProvider: mainApplProvider,
            applicationManager: mainApplManager,
            isMainAppl: true,
            order: order
        });

        if (additionalApplications) {
            for (var appl of additionalApplications) {
                order++;
                var appProvider = providers.filter(p => p.applicationType == appl.appType)[0];
                var appManager = appProvider.getApplicationManager();

                appManager.init(appl, {
                    processContext: this,
                    additionalData: null,
                    uiMode: UIModes.Preview
                });

                this._applicationItems.push({
                    applicationProvider: appProvider,
                    applicationManager: appManager,
                    isMainAppl: false,
                    order: order
                });
            }
        }

        this._isContextInitialized = true;

        return Promise.resolve(true);
    }

    //#region IApplicationProcessContext 

    public get documents(): AttachedDocument[] {
        var docs: AttachedDocument[] = [];

        for (var ai of this._applicationItems) {
            if (ai.applicationManager.application.documents && ai.applicationManager.application.documents.length > 0) {
                for (var doc of ai.applicationManager.application.documents) {
                    docs.push(doc);
                }
            }
        }
        return docs;
    }

    public get applicationItems(): ApplicationItem[] {
        return this._applicationItems;
    }

    public get isContextInitialized(): boolean {
        return this._isContextInitialized;
    }

    public get status(): ProcessStatuses {
        return ProcessStatuses.Completed;
    }

    public get signingGuid(): string {
        throw new ClientError("signingGuid is not Implemented.");
    }

    @action public clearContext() {
        this._applicationItems = [];
        this._isContextInitialized = false;
    }

    public deleteApplicationProcess(): Promise<void> {
        throw new ClientError("deleteApplicationProcess is not Implemented.");
    }


    public addApplication(request: APApplicationRequest): Promise<ApplicationItem> {
        throw new ClientError("addApplication is not Implemented.");
    }

    public deleteApplication(applicationForm: ApplicationFormBase): Promise<void> {
        throw new ClientError("deleteApplication is not Implemented.");
    }

    public saveApplication(application: ApplicationFormBase): Promise<void> {
        throw new ClientError("saveApplication is not Implemented.");
    }

    public getAdditionalApplicationFormTypes(): { applicationType: ApplicationFormTypes, possibleProcessStates: ProcessStates[] }[] {
        throw new ClientError("getAdditionalApplicationFormTypes is not Implemented.");
    }


    public getAttachedDocumentUploadURL(application: ApplicationFormBase): string {
        throw new ClientError("getAttachedDocumentUploadURL is not Implemented.");
    }

    public getAttachedDocumentDownloadURL(document: AttachedDocument): Promise<string> {
        var docService = new DocumentsDataService();

        if (this._isDraftApplicationProcess == true) {
            return docService.getDraftDownloadUrl(document.guid);
        }
        else {
            return docService.getDownloadUrl(document.guid);
        }
    }

    public getAttachedDocumentCopyDownloadURL(document: AttachedDocument): string {

        if (this._isDraftApplicationProcess == true) {
            UrlHelper.generateLinkUrl(`~${Constants.PATHS.DOCUMENT_DRAFT_ACCESS.replace(":guid", document.guid)}`);
        }
        else {
            return UrlHelper.generateLinkUrl(`~${Constants.PATHS.DOCUMENT_ACCESS.replace(":guid", document.guid)}`);
        }
    }

    public addAttachedDocument(application: ApplicationFormBase, applAttDocument: AttachedDocument): Promise<AttachedDocument> {
        throw new ClientError("addAttachedDocument is not Implemented.");
    }

    public updateAttachedDocument(application: ApplicationFormBase, applAttDocument: AttachedDocument): Promise<void> {
        throw new ClientError("updateAttachedDocument is not Implemented.");
    }

    public deleteAttachedDocument(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        throw new ClientError("deleteAttachedDocument is not Implemented.");
    }

    public startSigningAttachedDocumentTemplate(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        throw new ClientError("startSigningAttachedDocumentTemplate is not Implemented.");
    }

    public signingAttachedDocumentTemplateCompleted(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        throw new ClientError("signingAttachedDocumentTemplateCompleted is not Implemented.");
    }

    public signingAttachedDocumentTemplateRejected(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        throw new ClientError("signingAttachedDocumentTemplateRejected is not Implemented.");
    }


    public startSinging(): Promise<void> {
        throw new ClientError("startSinging is not Implemented.");
    }

    public signingRejected(): void {
        throw new ClientError("signingRejected is not Implemented.");
    }

    public signingCompleted(): Promise<void> {
        throw new ClientError("signingCompleted is not Implemented.");
    }

    public completePreregistration(): Promise<void> {
        throw new ClientError("completePreregistration is not Implemented.");
    }

    public startSending(): Promise<void> {
        throw new ClientError("startSending is not Implemented.");
    }

    public returnToBeginningStatus(): Promise<void> {
        throw new ClientError("returnToBeginningStatus is not Implemented.");
    }

    //#endregion  
} 