import { BaseDataModel, moduleContext, TypeSystem, UIHelper } from 'Cnsys.Core';
import { AsyncUIProps, BaseProps, ConfirmationModal, withAsyncFrame } from 'Cnsys.UI.React';
import { ApplicationType, attributesClassFormControlMaxL9, Button, EPZEUBaseComponent, Nomenclatures, ValidationSummaryErrors } from 'EPZEU.Core';
import { ApplicationFormTypes, DeedSummary, LegalForms } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationItem, DeedsDataService, Form, FormState, GetApplicationCode, ProcessStates, SpecificApplicationInfoAccessor, ValidatorHelpers, ApplicationWithFieldsForm } from 'EPZEU.CR.Domain';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';
import { APApplicationRequest } from '../Models/ModelsAutoGenerated';
const StickyFill = UIHelper.isBrowserCompatibleWithPositionSticky() ? null : require('stickyfilljs');

interface MenuUIProps extends BaseProps, AsyncUIProps {
    applicationItems: ApplicationItem[]
    items: Form[];
    onApplicationChange: (formKey: string, anchor?: string) => void;
    onApplicationDelete: (form: Form) => void;
    onApplicationAdd: (request: APApplicationRequest) => Promise<void>;
    getPossibleAdditionalApplicationFormTypes: () => { applicationType: ApplicationFormTypes, possibleProcessStates: ProcessStates[] }[];
    reRender?: boolean;
}

@TypeSystem.typeDecorator('MenuModel', moduleContext.moduleName)
class MenuModel extends BaseDataModel {

    @observable private _uic?: string = null;

    @TypeSystem.propertyDecorator('string')
    public set uic(val: string) {
        this._uic = val;
    }

    public get uic(): string {
        return this._uic;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}

var rejectApplication = ['GL_REJECT_MSG_00001_L', 'GL_REJECT_MSG_00002_L'];

@observer class MenuUIImpl extends EPZEUBaseComponent<MenuUIProps, MenuModel> {
    private mainApp: ApplicationFormBase;
    private deedsService: DeedsDataService;
    private articleGroupName: string;

    @observable private showModal: boolean = false;
    @observable private selectedAdditionalApplication: ApplicationFormTypes;
    @observable private selectedProcessState: ProcessStates;
    @observable private isAdditionalApplicationSelected: boolean;
    @observable private applicationTypes: ApplicationType[];
    @observable private uicErrorText: string;
    @observable private companyName: string;
    @observable private initialErrorsForAddApplicationModal: string[] = [];
    @observable private errorsFromAdditionalValidations: string[] = [];
    @observable private asyncErrors: string[] = [];
    @observable private article63: boolean = true;
    @observable private article6: boolean = false;

    constructor(props?: MenuUIProps) {
        super(props);

        this.openModal = this.openModal.bind(this);
        this.closeModal = this.closeModal.bind(this);
        this.addApplication = this.addApplication.bind(this);
        this.onDeleteApplication = this.onDeleteApplication.bind(this);
        this.changeProcessStates = this.changeProcessStates.bind(this);
        this.deedSearch = this.deedSearch.bind(this);
        this.changeSelectedAdditionalApplication = this.changeSelectedAdditionalApplication.bind(this);
        this.initForVApplications = this.initForVApplications.bind(this);
        this.validateForVApplications = this.validateForVApplications.bind(this);
        this.validateForAdditionalApplications = this.validateForAdditionalApplications.bind(this);
        this.onUICChange = this.onUICChange.bind(this);
        this.renderArticleSelection = this.renderArticleSelection.bind(this);
        this.handleF529_ReasonForEntry529Change = this.handleF529_ReasonForEntry529Change.bind(this);

        this.deedsService = new DeedsDataService();
        this.selectedAdditionalApplication = null;
        this.isAdditionalApplicationSelected = false;
        this.selectedProcessState = null;
        this.model = new MenuModel();
        this.mainApp = this.props.items.filter((item: Form) => item.isMain)[0].formManager.application;

        this.props.registerAsyncOperation(Nomenclatures.getApplicationTypes().bind(this).then(appTypes => {
            this.applicationTypes = appTypes;
        }));
    }

    //#region Reacts lifecycle functions

    componentDidUpdate(prevProps: MenuUIProps) {
        if ((this.props.asyncErrorMessages && prevProps.asyncErrorMessages) && (this.props.asyncErrorMessages.length != prevProps.asyncErrorMessages.length))
            this.asyncErrors = this.props.asyncErrorMessages;
    }

    componentDidMount() {
        if (StickyFill) {
            var stickyElement = document.getElementById('page-nav');
            StickyFill.addOne(stickyElement);
        }
    }

    //#endregion

    //#region Renders

    render(): JSX.Element {
        //Използва се за да се презареди менюто след минаване на async Валидацията.
        let reRenderMenu = this.props.reRender;

        return <div className="nav-wrapper collapse">
            <nav id="page-nav" className="page-nav page-nav--sticky">
                {this.renderAddApplicationModal()}
                {this.renderManuItems()}
            </nav>
        </div>
    }

    renderAddApplicationModal() {
        if (this.props.getPossibleAdditionalApplicationFormTypes().length > 0) {

            return (
                <div className="mr-2 ml-2 mb-3 mt-2 text-center" key="modal" >
                    <Button className="btn btn-outline-light text-dark w-100" lableTextKey="GL_ADD_APPLICATION_L" onClick={this.openModal}><i className="ui-icon ui-icon-plus mr-1" aria-hidden="true"></i></Button>
                    <Modal centered={true} backdrop={true} autoFocus={true} isOpen={this.showModal} onExit={this.closeModal} toggle={this.closeModal}>
                        <ModalHeader toggle={this.closeModal} >
                            {this.getResource('CR_APP_00005_L')}
                        </ModalHeader>
                        <ModalBody>
                            <>
                                {this.initialErrorsForAddApplicationModal.length != 0 && <ValidationSummaryErrors errors={this.initialErrorsForAddApplicationModal} />}
                                {this.errorsFromAdditionalValidations.length != 0 && <ValidationSummaryErrors errors={this.errorsFromAdditionalValidations} />}
                                <ValidationSummaryErrors errors={this.asyncErrors} />
                                {this.applicationTypes ?
                                    (this.isAdditionalApplicationSelected ?
                                        this.renderSelectProcessStatesUI() :
                                        this.renderSelectAdditionalApplicationsUI()) :
                                    null}
                            </>
                        </ModalBody>
                        <ModalFooter>
                            <div className="button-bar">
                                <div className="left-side">
                                    <button type="button" className="btn btn-secondary" onClick={this.closeModal} data-dismiss="modal">{this.getResource('GL_REFUSE_L')}</button>
                                </div>
                                <div className="right-side">
                                    <button id="BTN_MODAL_OK" type="button" className="btn btn-primary" onClick={this.addApplication} data-dismiss="modal">{this.getResource('GL_ADD_L')}</button>
                                </div>
                            </div>
                        </ModalFooter>
                    </Modal >
                </div >);
        } else
            return null;
    }

    renderManuItems(): JSX.Element[] {
        var sectionsUI: any[] = [];
        var sections: { hasHrAtherSection: boolean, hasHrBeforeSection: boolean, forms: Form[] }[] = [];

        for (var item of this.props.items) {

            if (Number(item.order) < 0) {

                if (sections.length == 0)
                    sections.push({ hasHrAtherSection: true, hasHrBeforeSection: false, forms: [] });

                sections[0].forms.push(item);
            } else if (Number(item.order) >= 1000 && sections.filter(s => s.hasHrBeforeSection).length == 0)
                sections.push({ hasHrAtherSection: false, hasHrBeforeSection: true, forms: [item] })
            else
                sections.push({ hasHrAtherSection: false, hasHrBeforeSection: false, forms: [item] })
        }

        for (var i = 0; i < sections.length; i++) {
            if (sections[i].hasHrBeforeSection)
                sectionsUI.push(<hr key={i + "_hrBef"} />)

            sectionsUI.push(this.renderMenuSection(sections[i], i));

            if (sections[i].hasHrAtherSection)
                sectionsUI.push(<hr key={i + "_hrAft"} />)
        }

        sectionsUI.push(<div key={i + "_footer"} className="nav-footer-text" role="alert">{this.getResource('CR_APP_00050_I')}</div>);

        return sectionsUI;
    }

    renderMenuSection(section: { hasHrAtherSection: boolean, hasHrBeforeSection: boolean, forms: Form[] }, index: number) {

        return (
            <ul className="nav-section" key={"menu-section-" + index}>
                {section.forms.map((form, i) => this.renderMenuForm(form, i))}
            </ul>
        )
    }

    renderMenuForm(form: Form, index: number) {

        if (form.formMenuNavItems.length == 1) {
            return (
                <li key={'menuForm' + form.order}>
                    <a href="javascript:;" onClick={() => { this.onApplicationChange(form.order, form.formMenuNavItems[0].anchor) }} className={"nav-item nav-link" + (form.formMenuNavItems[0].isCurrent ? " active" : "")}>
                        <div className="nav-item-state">
                            {form.state == FormState.Completed
                                ? <i className="ui-icon ui-icon-processed" />
                                : form.state == FormState.WithError
                                    ? <i className="ui-icon ui-icon-error" />
                                    : null}
                        </div>
                        <div className="nav-item-title">{form.formMenuNavItems[0].label}</div>
                        <div className="nav-item-action"></div>
                    </a>
                </li>
            )
        }
        else {
            return (
                <li key={'menuForm' + form.order}>
                    {form.formMenuNavItems[0].isApplicationTitle ? (
                        <div className="nav-item">
                            <div className="nav-item-state">
                                {form.state == FormState.Completed
                                    ? <i className="ui-icon ui-icon-processed" />
                                    : form.state == FormState.WithError
                                        ? <i className="ui-icon ui-icon-error" />
                                        : null}
                            </div>
                            <div className="nav-item-title nav-section-title"><GetApplicationCode appType={form.formManager.application.appType} alternativeCode={form.formMenuNavItems[0].label} /></div>
                            <div className="nav-item-action">
                                {form.canDelete &&
                                    <ConfirmationModal modalTitleKey='GL_REJECT_APPLICATION_L' modalTextKeys={rejectApplication} onSuccess={this.onDeleteApplication.bind(this, form)} yesTextKey='GL_DECLINE_APPLICATION_L' noTextKey='GL_BACK_TO_APPLICATION_L'>
                                        <button className="btn btn-secondary btn-sm" title={this.getResource("GL_APPLICATION_REJECT_L")}>
                                            <i className="ui-icon ui-icon-times" aria-hidden="true"></i>
                                        </button>
                                    </ConfirmationModal>
                                }
                            </div>
                        </div>) : null
                    }
                    <ul>
                        {form.formMenuNavItems.filter(item => !item.isApplicationTitle).map((item, appTitleIndex) => (
                            <a href="javascript:;" key={appTitleIndex} onClick={() => { this.onApplicationChange(form.order, item.anchor) }} className={"nav-item nav-link" + (item.isCurrent ? " active" : "")}>
                                <div className="nav-item-state">
                                </div>
                                <div className="nav-item-title">{item.label}</div>
                                <div className="nav-item-action"></div>
                            </a>
                        ))
                        }
                    </ul>
                </li>
            )
        }
    }

    renderSelectAdditionalApplicationsUI() {
        var possibleAdditionalApplicationsUI: any[] = [];
        let index = 0;
        let possibleAdditionalTypes = this.props.getPossibleAdditionalApplicationFormTypes();

        for (var applFormType of possibleAdditionalTypes) {
            let applType = this.applicationTypes.filter(app => app.appType == applFormType.applicationType.toString())[0]
            index += 1;

            possibleAdditionalApplicationsUI.push(
                <div className="custom-control custom-radio" key={index}>
                    <input className="custom-control-input" name="applFormType" id={'applFormType_' + applFormType.applicationType} value={applFormType.applicationType} type="radio" onChange={() => this.changeSelectedAdditionalApplication(Number(applType.appType))} checked={this.selectedAdditionalApplication == applFormType.applicationType} />
                    <label className="custom-control-label" htmlFor={'applFormType_' + applFormType.applicationType}>{applType.appCode} {applType.name}</label>
                    {applFormType.applicationType == ApplicationFormTypes.B7 && this.selectedAdditionalApplication == ApplicationFormTypes.B7 ? this.renderArticleSelection() : null}
                </div>);
        }

        return (
            <>
                <div className="row">
                    <div className="col">
                        <label className="field-title field-title--form">{this.getResource('GL_SAMPLE_APPLICATION_L')}</label>
                    </div>
                </div>
                <div className="row">
                    <div className="col-12 form-group">
                        {possibleAdditionalApplicationsUI}
                    </div>
                </div>
            </>
        )
    }

    renderArticleSelection(): JSX.Element {
        return (
            <div className="field-container">
                <div className="row">
                    <div className="form-group col">
                        <label className="field-title field-title--form">{this.getResource('CR_GL_REASON_FOR_REGISTRATION_L')}:</label>
                        <div className="form-group">
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleF529_ReasonForEntry529Change} id={this.articleGroupName + '_article63'} name={this.articleGroupName} value={'article63'} checked={this.article63} />
                                <label className={"custom-control-label"} htmlFor={this.articleGroupName + '_article63'}>{this.getResource('CR_APP_00049_L')}</label>
                            </div>
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleF529_ReasonForEntry529Change} id={this.articleGroupName + '_article6'} name={this.articleGroupName} value={'article6'} checked={this.article6} />
                                <label className={"custom-control-label"} htmlFor={this.articleGroupName + '_article6'}>{this.getResource('CR_APP_00050_L')}</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    renderSelectProcessStatesUI() {
        var selectedAdditionalApplicationFormType = this.props.getPossibleAdditionalApplicationFormTypes().filter(at => at.applicationType == this.selectedAdditionalApplication)[0];
        let isForChangeButtonDisabled = (this.mainApp.appType == ApplicationFormTypes.V1) && SpecificApplicationInfoAccessor.getF600_TransferringTypeOfTradeEnterprise(this.mainApp).taketransfer;
        let selectedAdditionalApplication = this.applicationTypes.filter(f => f.appType == this.selectedAdditionalApplication.toString());

        return (
            <>
                <div className="field-container">
                    <div className="row">
                        <div className="form-group col">
                            <label className="field-title field-title--form">{this.getResource('GL_SAMPLE_APPLICATION_L')}</label>
                            <div className="form-text">{`${selectedAdditionalApplication[0].appCode} ${selectedAdditionalApplication[0].name}`}</div>
                        </div>
                    </div>
                </div>
                <div className="field-container">
                    <div className="row">
                        <div className="form-group col">
                            <label className="field-title field-title--form">{this.getResource("GL_APPLICATION_FILED_L")}:</label>
                            {
                                selectedAdditionalApplicationFormType.possibleProcessStates.indexOf(ProcessStates.New) >= 0 &&
                                <div className="custom-control custom-radio" key="new">
                                    <input className="custom-control-input" type="radio" onChange={this.changeProcessStates} id="new" name="new" value={ProcessStates.New} checked={this.selectedProcessState == ProcessStates.New} />
                                    {this.labelFor(m => m, 'CR_GL_INITIAL_ENTRY_L', { htmlFor: "new", className: "custom-control-label" })}
                                </div>
                            }
                            {
                                selectedAdditionalApplicationFormType.possibleProcessStates.indexOf(ProcessStates.ForChange) >= 0 &&
                                <div className="custom-control custom-radio" key="forChange">
                                    <input className="custom-control-input" type="radio" onChange={this.changeProcessStates} id="forChange" name="forChange" value={ProcessStates.ForChange} checked={this.selectedProcessState == ProcessStates.ForChange} disabled={isForChangeButtonDisabled} />
                                    {this.labelFor(m => m, 'CR_GL_CHANGE_CIRCUMSTANCES_L', { htmlFor: "forChange", className: "custom-control-label" })}
                                </div>
                            }
                        </div>
                    </div>
                </div>
                {this.selectedProcessState == ProcessStates.ForChange && this.renderUICInput()}
            </>);
    }

    renderUICInput() {
        return (
            <>
                <div className="row">
                    <div className="col-sm-8 col-xl-6">

                        <div className="row">
                            <div className="col">
                                <label className="field-title field-title--form" >{this.getResource('CR_GL_COMPANY_ID_L')}</label>
                            </div>
                        </div>

                        <div className="row">
                            <div className="form-group col">

                                {this.textBoxFor(m => m.uic, attributesClassFormControlMaxL9, this.onUICChange)}
                            </div>
                            <div className="form-group col-auto">
                                <Button type="button" className="btn btn-outline-light text-dark" lableTextKey={"GL_CHECK_L"} onClick={this.deedSearch}>
                                    <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i></Button>
                            </div>
                        </div>
                    </div>
                </div>
                {this.uicErrorText ?
                    <>
                        <div className="row">
                            <div className="alert alert-danger" role="alert">
                                {this.uicErrorText}
                            </div>
                        </div>
                    </>
                    :
                    <>
                        {this.companyName && (
                            <div className="row">
                                <div className="form-group col">
                                    <label className="field-title field-title--form">{this.getResource('CR_GL_COMPANY_NAME_L')}</label>
                                    <p className="preview-text">{this.companyName}</p>
                                </div>
                            </div>)}
                    </>
                }
            </>
        );
    }

    //#endregion

    //#region Handlers

    private onApplicationChange(order: string, anchor?: string): void {
        var selectedItem = this.props.items.filter(item => item.order == order)[0];

        this.props.onApplicationChange(selectedItem.order, anchor);
    }

    //#endregion

    //#region Modal 

    @action private handleF529_ReasonForEntry529Change(e: any) {
        if (e.target.value == 'article63') {
            this.article63 = true;
            this.article6 = false;
        } else if (e.target.value == 'article6') {
            this.article63 = false;
            this.article6 = true;
        }
    }

    @action openModal() {
        this.showModal = true;
        this.selectedAdditionalApplication = null;
        this.isAdditionalApplicationSelected = false;
        this.selectedProcessState = null;
        this.model = new MenuModel();
        this.companyName = null;
        this.initForVApplications();
    }

    @action closeModal() {
        this.showModal = false;
        this.selectedAdditionalApplication = null;
        this.isAdditionalApplicationSelected = false;
        this.selectedProcessState = null;
        this.model = new MenuModel();
        this.initialErrorsForAddApplicationModal = [];
        this.errorsFromAdditionalValidations = [];
        this.uicErrorText = null;
        this.asyncErrors = [];
    }

    @action async addApplication(): Promise<void> {
        await this.validateForAdditionalApplications();
        let hasValidUIC = (this.model.uic && ValidatorHelpers.isValidUIC(this.model.uic)) || (this.selectedProcessState != ProcessStates.ForChange && this.selectedProcessState != ProcessStates.Preregistration);

        if (!this.selectedAdditionalApplication) {
            this.errorsFromAdditionalValidations.push(this.getResource('CR_GL_SELECT_APPLICATION_E')); // Изберете заявление.
        } else if (this.initialErrorsForAddApplicationModal.length == 0
            && this.errorsFromAdditionalValidations.length == 0
            && hasValidUIC) {
            var possibleStates = this.props.getPossibleAdditionalApplicationFormTypes().filter(at => at.applicationType == this.selectedAdditionalApplication)[0].possibleProcessStates;

            if (this.isAdditionalApplicationSelected && (possibleStates.length > 1) && (this.selectedProcessState == null)) {
                this.errorsFromAdditionalValidations.push(this.getResource('CR_APP_00226_E')); // Изберете "Първоначално вписване" или "Промяна на обстоятелства"
            } else if (possibleStates.length == 1 || this.selectedProcessState != null) {
                var request = new APApplicationRequest();

                request.applicationType = this.selectedAdditionalApplication;

                if (this.props.items[0].formManager.processContext.applicationItems.filter(app => app.isMainAppl)[0].applicationManager.additionalData.state == ProcessStates.Preregistration) {
                    request.additionalData = this.props.items[0].formManager.processContext.applicationItems.filter(app => app.isMainAppl)[0].applicationManager.additionalData;

                    var subUICs = this.props.applicationItems.map(ai => (ai.applicationManager.application as ApplicationWithFieldsForm).subUIC).filter(subUic => subUic).map(subUic => Number(subUic));

                    if (subUICs && subUICs.length > 0) {
                        request.additionalData.subUIC = Math.max(...subUICs) + 1;
                    }
                    else {
                        request.additionalData.subUIC = 100;
                    }
                }
                else
                    request.additionalData = { state: possibleStates.length == 1 ? possibleStates[0] : this.selectedProcessState }


                if (this.selectedAdditionalApplication == ApplicationFormTypes.B7) {
                    request.additionalData.article63 = this.article63;
                    request.additionalData.article6 = this.article6;
                }

                if (this.model && this.model.uic)
                    request.additionalData.uic = this.model.uic;

                this.props.registerAsyncOperation(this.props.onApplicationAdd(request).bind(this).then(() => {
                    this.closeModal();
                    this.refreshStickyElementsOnIE();
                }));
            } else
                this.isAdditionalApplicationSelected = true;
        }
    }

    private onDeleteApplication(form: Form) {
        this.props.onApplicationDelete(form)
        this.refreshStickyElementsOnIE();
    }

    private refreshStickyElementsOnIE() {
        if (StickyFill) {
            setTimeout(() => {
                StickyFill.refreshAll();
            }, 500)
        }
    }

    changeSelectedAdditionalApplication(applFormType: ApplicationFormTypes) {
        this.selectedAdditionalApplication = applFormType;
    }

    @action private changeProcessStates(e: any) {
        if (e.target.value == ProcessStates.New) {
            this.model.uic = null;
            this.selectedProcessState = ProcessStates.New;
        } else if (e.target.value == ProcessStates.ForChange)
            this.selectedProcessState = ProcessStates.ForChange;
    }

    private onUICChange(): void {
        if (ValidatorHelpers.isValidUIC(this.model.uic) == false) {
            this.model.removeError('uic');
            this.model.addError('uic', this.getResource('GL_INVALID_IDENTIFIER_E'));
        } else
            this.model.removeError('uic');
    }

    deedSearch(): any {
        if (ValidatorHelpers.isValidUIC(this.model.uic) == false) {
            this.model.removeError('uic');
            this.model.addError('uic', this.getResource('GL_INVALID_IDENTIFIER_E'));
        }
        else {
            this.uicErrorText = null;
            this.companyName = null;

            this.props.registerAsyncOperation(this.deedsService.getDeedSummary(this.model.uic).bind(this).then((deed: DeedSummary) => {

                if (deed)
                    this.companyName = deed.companyFullName;
                else
                    this.uicErrorText = this.getResource('GL_CR_COMPANY_NOT_FOUND_E');
            }));
        }
    }

    private initForVApplications(): void {
        this.initialErrorsForAddApplicationModal = [];

        switch (this.mainApp.appType) {
            case ApplicationFormTypes.V21:
                if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(this.mainApp).conversionOfBulgarianEuropeanCompanyIntoBulgarianPLC
                    || SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(this.mainApp).conversionOfBulgarianPLCIntoBulgarianEuropeanCompany) {
                    let successor = SpecificApplicationInfoAccessor.getF7030_Successor(this.mainApp).successorList[0].subject;
                    if (successor && successor.indent)
                        this.model.uic = successor.indent;
                    else
                        this.initialErrorsForAddApplicationModal.push(this.getResource('CR_APP_00217_E')); //Въведете съществуващо ЕИК в поле 703.Правоприемник
                }
                break;
            case ApplicationFormTypes.V24:
                if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(this.mainApp).influx) { //вливане
                    let successor = SpecificApplicationInfoAccessor.getF7030_Successor(this.mainApp).successorList[0].subject;
                    if (successor && successor.indent)
                        this.model.uic = successor.indent;
                    else
                        this.initialErrorsForAddApplicationModal.push(this.getResource('CR_APP_00217_E')); // Въведете съществуващо ЕИК в поле 703.Правоприемник
                } else if (!SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(this.mainApp).fusion) //сливане
                    this.initialErrorsForAddApplicationModal.push(this.getResource('CR_APP_00218_E')); //Изберете форма за преобразуване и попълнете данни в поле 703.Правоприемник
                break;
            case ApplicationFormTypes.V33:
                if (SpecificApplicationInfoAccessor.getF801a_FormOfTransforming801a(this.mainApp).influx801a
                    || SpecificApplicationInfoAccessor.getF801a_FormOfTransforming801a(this.mainApp).conversionToCoop
                    || SpecificApplicationInfoAccessor.getF801a_FormOfTransforming801a(this.mainApp).conversionToEUCoop) {
                    let successor = SpecificApplicationInfoAccessor.getF803_Successors803(this.mainApp).successorList[0].subject;
                    if (successor && successor.indent)
                        this.model.uic = successor.indent;
                    else
                        this.initialErrorsForAddApplicationModal.push(this.getResource('CR_APP_00220_E')); //Въведете съществуващо ЕИК в поле 803.Правоприемник
                } else if (!SpecificApplicationInfoAccessor.getF801a_FormOfTransforming801a(this.mainApp).fusion801a)
                    this.initialErrorsForAddApplicationModal.push(this.getResource('CR_APP_00219_E')); //Изберете форма за преобразуване и попълнете данни в поле 802a.\"Преобразуващо се ЕКД или кооперация\"
                break;
        }
    }

    private async validateForAdditionalApplications(): Promise<void> {
        this.errorsFromAdditionalValidations = [];

        if (this.model.uic && this.props.applicationItems.filter((app: ApplicationItem) => SpecificApplicationInfoAccessor.getF001_UIC(app.applicationManager.application).text == this.model.uic).length > 0)
            this.errorsFromAdditionalValidations.push(this.getResource('CR_APP_00222_E')); //Не може да подавате повече от едно заявление за промяна на обстоятелства по едно ЕИК

        await this.validateForVApplications();
    }

    private async validateForVApplications(): Promise<void> {
        switch (this.mainApp.appType) {
            case ApplicationFormTypes.V1:
                if (this.selectedProcessState == ProcessStates.ForChange && this.model.uic != SpecificApplicationInfoAccessor.getF601_TransferringEnterprise(this.mainApp).subject.indent)
                    this.errorsFromAdditionalValidations.push(this.getResource('CR_APP_00216_E')); //Може да добавите заявление за промяна само по партидата на отчуждител/наследодател
                break;
            case ApplicationFormTypes.V21:
                if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(this.mainApp).conversionOfBulgarianEuropeanCompanyIntoBulgarianPLC) {
                    let promise = this.deedsService.getDeedSummary(this.model.uic).then((deed: DeedSummary) => {
                        if (deed) {
                            if (deed.legalForm != LegalForms.ED)
                                this.errorsFromAdditionalValidations.push(this.getResource('CR_GL_INCONSISTENCY_BETWEEN_LEGAL_FORM_AND_APPLICATION_Е')); // Несъответствие между правна форма и заявление
                        }
                        else {
                            this.errorsFromAdditionalValidations.push(this.getResource('GL_CR_COMPANY_NOT_FOUND_E'));
                        }
                    });
                    this.props.registerAsyncOperation(promise);
                    await promise;
                } else if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(this.mainApp).conversionOfBulgarianPLCIntoBulgarianEuropeanCompany) {
                    let promise = this.deedsService.getDeedSummary(this.model.uic).then((deed: DeedSummary) => {
                        if (deed) {
                            if (deed.legalForm != LegalForms.AD && deed.legalForm != LegalForms.EAD)
                                this.errorsFromAdditionalValidations.push(this.getResource('CR_GL_INCONSISTENCY_BETWEEN_LEGAL_FORM_AND_APPLICATION_Е')); // Несъответствие между правна форма и заявление
                        }
                        else {
                            this.errorsFromAdditionalValidations.push(this.getResource('GL_CR_COMPANY_NOT_FOUND_E'));
                        }
                    });
                    this.props.registerAsyncOperation(promise);
                    await promise;
                }
                break;
            case ApplicationFormTypes.V24:
                if (this.model.uic && this.selectedAdditionalApplication == ApplicationFormTypes.A12) {
                    let promise = this.deedsService.getDeedSummary(this.model.uic).then((deed: DeedSummary) => {
                        if (deed) {
                            if (deed.legalForm != LegalForms.AD && deed.legalForm != LegalForms.EAD)
                                this.errorsFromAdditionalValidations.push(this.getResource('CR_GL_INCONSISTENCY_BETWEEN_LEGAL_FORM_AND_APPLICATION_Е')); // Несъответствие между правна форма и заявление
                        }
                        else {
                            this.errorsFromAdditionalValidations.push(this.getResource('GL_CR_COMPANY_NOT_FOUND_E'));
                        }
                    });
                    this.props.registerAsyncOperation(promise);
                    await promise;
                }
                break;
            case ApplicationFormTypes.V33:
                if (this.model.uic) {
                    let promise = this.deedsService.getDeedSummary(this.model.uic).then((deed: DeedSummary) => {
                        if (deed) {
                            if (deed.legalForm != LegalForms.EKD && deed.legalForm != LegalForms.LEKD && deed.legalForm != LegalForms.K)
                                this.errorsFromAdditionalValidations.push(this.getResource('CR_GL_INCONSISTENCY_BETWEEN_LEGAL_FORM_AND_APPLICATION_Е')); // Несъответствие между правна форма и заявление
                        }
                        else {
                            this.errorsFromAdditionalValidations.push(this.getResource('GL_CR_COMPANY_NOT_FOUND_E'));
                        }
                    });
                    this.props.registerAsyncOperation(promise);
                    await promise;
                }
                break;
        }

        if (this.mainApp.appType == ApplicationFormTypes.V21 || this.mainApp.appType == ApplicationFormTypes.V24 || this.mainApp.appType == ApplicationFormTypes.V33) {
            let additionalApps = this.props.applicationItems.filter((ap: ApplicationItem) => ap.isMainAppl == false);

            if (additionalApps.length > 0)
                this.errorsFromAdditionalValidations.push(this.getResource('CR_APP_00221_E')); //Има добавено допълнително заявление.
        }
    }

    //#endregion
}

export const MenuUI = withAsyncFrame(MenuUIImpl, false);