import { UrlHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, ConfirmationModal, withAsyncFrame } from "Cnsys.UI.React";
import { ApplicationType, EPZEUBaseComponent, Nomenclatures, ValidationSummaryErrors } from "EPZEU.Core";
import { ApplicationFormTypes, Constants } from "EPZEU.CR.Core";
import { ProcessStates, ProcessStatuses, SectionInfoUI } from "EPZEU.CR.Domain";
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import * as React from 'react';
import Modal from "reactstrap/lib/Modal";
import ModalBody from "reactstrap/lib/ModalBody";
import ModalFooter from "reactstrap/lib/ModalFooter";
import ModalHeader from "reactstrap/lib/ModalHeader";
import { ApplicationProcessContext } from "../ApplicationProcessContext";
import { APApplication, APApplicationProcess, APApplicationRequest } from "../Models/ModelsAutoGenerated";

interface PreregistrationUIProps extends BaseProps, AsyncUIProps {
    processContext: ApplicationProcessContext;
    onApplicationProcessDelete: (process?: APApplicationProcess) => void;
    onApplicationProcessAdd: (request: APApplicationRequest) => Promise<void>;
    onCompletePreregistration: () => void;
}

var rejectGroupOfApplications = ['GL_REJECT_MSG_00003_L', 'GL_REJECT_MSG_00004_L'];
var rejectApplication = ['GL_REJECT_MSG_00001_L', 'GL_REJECT_MSG_00002_L'];

@observer class PreregistrationUIImpl extends EPZEUBaseComponent<PreregistrationUIProps, any> {
    @observable nomApplicationTypes: ApplicationType[];
    @observable selectedChildProcess: { appFormType: ApplicationFormTypes, appName: string, applicationToChangeID?: number };
    @observable showModal: boolean;
    @observable errors: string[];
    @observable newProcessState: ProcessStates;
    @observable isSelectedNewProcessState: boolean;
    possibleChildProcesses: { appFormType: ApplicationFormTypes, appName: string, applicationToChangeID?: number }[];

    constructor(props?: PreregistrationUIProps) {
        super(props);

        this.openModal = this.openModal.bind(this);
        this.closeModal = this.closeModal.bind(this);
        this.addChildProcess = this.addChildProcess.bind(this);
        this.selectNewProcessState = this.selectNewProcessState.bind(this);

        Nomenclatures.getApplicationTypes().bind(this).then(appTypes => { this.nomApplicationTypes = appTypes });
    }

    render() {
        if (!this.props.processContext ||
            !this.props.processContext.mainApplicationProcess ||
            this.props.processContext.mainApplicationProcess.status != ProcessStatuses.WaitPreregistrationCompletion ||
            !this.nomApplicationTypes) {
            return null;
        }

        return (
            <>
                <div className="additional-nav-warapper section-wrapper mt-2">
                    <div className="fixed-content-width">
                        <section className="card card--search card--collapsible">
                            <div className="card-header" data-toggle="collapse" data-target="#collapsable-content" aria-expanded="true">
                                <h3>{this.getResource("CR_APP_LIST_PACKAGES_REREGISTRATION_L")}</h3>
                                <button className="system-button toggle-collapse">
                                    <i className="ui-icon ui-icon-chevron-up" aria-hidden="true"></i>
                                </button>
                            </div>
                            <div id="collapsable-content" className="collapse show">
                                <div className="card-body">
                                    <div className="table-responsive">
                                        <table className="table table-borderless table-striped table-transparent table-hover">
                                            <thead className="thead-invisible">
                                                <tr>
                                                    <th></th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {this.props.processContext.allApplicationProcesses.map(pr => {
                                                    var url = `~${Constants.PATHS.APPLICATION_DRAFT_PREVIEW}`;
                                                    url = url.replace(":processID", pr.applicationProcessID.toString())
                                                    var mainApplication = pr.applications.filter(app => app.applicationID == pr.mainApplicationID)[0];

                                                    return (
                                                        <tr key={pr.applicationProcessID}>
                                                            <td>
                                                                <p className="field-text"><b><a href={UrlHelper.generateLinkUrl(url)} target="_blank">{this.getApplicationProcessName(pr)}</a></b></p>
                                                                {mainApplication.additionalData.state == ProcessStates.New &&
                                                                    <p className="field-text">{this.getResource('GL_APPLICATION_FILED_L')} {this.getResource('CR_GL_INITIAL_ENTRY_L')}</p>}
                                                                {mainApplication.additionalData.state == ProcessStates.ForChange &&
                                                                    <p className="field-text">{this.getResource('GL_APPLICATION_FILED_L')} {this.getResource('CR_GL_CHANGE_CIRCUMSTANCES_L')}</p>}
                                                                {mainApplication.additionalData.state == ProcessStates.Preregistration &&
                                                                    <p className="field-text">{this.getResource('GL_APPLICATION_FILED_L')} {this.getResource('CR_GL_RE_REGISTRATION_L')}</p>}
                                                            </td>
                                                            <td className="buttons-td">
                                                                {pr.parentApplicationProcessID &&
                                                                    <ConfirmationModal modalTitleKey='GL_REJECT_APPLICATION_L' modalTextKeys={rejectApplication} onSuccess={() => this.props.onApplicationProcessDelete(pr)} yesTextKey='GL_DECLINE_APPLICATION_L' noTextKey='GL_BACK_TO_APPLICATION_L'>
                                                                        <button className="btn btn-secondary btn-sm" title={this.getResource("GL_APPLICATION_REJECT_L")}>
                                                                            <i className="ui-icon ui-icon-times" aria-hidden="true">
                                                                            </i>
                                                                        </button>
                                                                    </ConfirmationModal>
                                                                }
                                                            </td>
                                                        </tr>);
                                                })}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
                {this.rendereButtons()}
            </>);

    }

    private rendereButtons() {
        if (this.props.processContext.isContextInitialized &&
            this.props.processContext.status == ProcessStatuses.WaitPreregistrationCompletion &&
            !this.props.processContext.currentApplicationProcess) {
            return (
                <div className="main-wrapper section-wrapper section-wrapper--margins fixed-content-width">
                    <div className="page-wrapper">
                        <div className="section-wrapper">
                            <SectionInfoUI infoTextKey={["CR_APP_00248_I", "CR_APP_00249_I", "CR_APP_00250_I"]} />
                            <div className="button-bar button-bar--form">
                                <div className="left-side">
                                    <ConfirmationModal modalTitleKey='GL_REJECT_ALL_APPLICATIONS_L' modalTextKeys={rejectGroupOfApplications} onSuccess={() => this.props.onApplicationProcessDelete()} yesTextKey='GL_DECLINE_GROUP_APPLICATIONS_L' noTextKey='GL_BACK_TO_APPLICATION_L'>
                                        <button type="button" className="btn btn-secondary">{this.getResource('CR_APP_REFUSE_REREGISTRATION_L')}</button>
                                    </ConfirmationModal>
                                </div>
                                <div className="right-side">
                                    <button type="button" onClick={this.openModal} className="btn btn-secondary">{this.getResource('CR_APP_ADD_NEW_PACKAGE_L')}</button>
                                    <button type="button" onClick={this.props.onCompletePreregistration} className="btn btn-primary">{this.getResource("CR_APP_FINISH_L")}</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <Modal centered={true} backdrop='static' autoFocus={true} isOpen={this.showModal} onExit={this.closeModal}>
                        <ModalHeader toggle={this.closeModal} >
                            {this.getResource('CR_APP_ADD_APPLICATION_REREGISTRATION_L')}
                        </ModalHeader>
                        <ModalBody>
                            <>
                                {this.errors && this.errors.length != 0 && <ValidationSummaryErrors errors={this.errors} />}
                                <ValidationSummaryErrors errors={this.props.asyncErrorMessages} />
                                {this.showModal && this.renderAddChildProcessUI()}
                            </>
                        </ModalBody>
                        <ModalFooter>
                            <div className="button-bar">
                                <div className="left-side">
                                    <button type="button" className="btn btn-secondary" onClick={this.closeModal} data-dismiss="modal">{this.getResource('GL_REFUSE_L')}</button>
                                </div>
                                <div className="right-side">
                                    {!this.isSelectedNewProcessState &&
                                        <button id="BTN_MODAL_OK" type="button" className="btn btn-primary" onClick={this.selectNewProcessState} data-dismiss="modal">{this.getResource('GL_CONTINUE_L')}</button>}
                                    {this.isSelectedNewProcessState && this.possibleChildProcesses && this.possibleChildProcesses.length > 0 &&
                                        <button id="BTN_MODAL_OK" type="button" className="btn btn-primary" onClick={this.addChildProcess} data-dismiss="modal">{this.getResource('GL_ADD_L')}</button>}
                                </div>
                            </div>
                        </ModalFooter>
                    </Modal >
                </div>);
        }
        else {
            return null;
        }
    }

    private renderAddChildProcessUI() {
        if (!this.isSelectedNewProcessState) {
            return (
                <div className="field-container">
                    <div className="row">
                        <div className="form-group col">
                            <label className="field-title field-title--form">{this.getResource("GL_APPLICATION_FILED_L")}:</label>
                            <div className="custom-control custom-radio" key="new">
                                <input className="custom-control-input" type="radio" onChange={() => { this.newProcessState = ProcessStates.New }} id="new" name="new" value={ProcessStates.New} checked={this.newProcessState == ProcessStates.New} />
                                {this.labelFor(m => m, 'CR_GL_INITIAL_ENTRY_L', { htmlFor: "new", className: "custom-control-label" })}
                            </div>
                            <div className="custom-control custom-radio" key="forChange">
                                <input className="custom-control-input" type="radio" onChange={() => { this.newProcessState = ProcessStates.ForChange }} id="forChange" name="forChange" value={ProcessStates.ForChange} checked={this.newProcessState == ProcessStates.ForChange} />
                                {this.labelFor(m => m, 'CR_GL_CHANGE_CIRCUMSTANCES_L', { htmlFor: "forChange", className: "custom-control-label" })}
                            </div>
                        </div>
                    </div>
                </div>);
        }
        else {
            var possibleChildProcessesUI: any[] = [];
            let index = 0;


            for (let possibleChildProcess of this.possibleChildProcesses) {
                index += 1;

                possibleChildProcessesUI.push(
                    <div className="custom-control custom-radio" key={index}>
                        <input className="custom-control-input" name="applFormType" id={'applFormType_' + index} value={index} type="radio" onChange={() => this.onSelectNewChildProcess(possibleChildProcess)}
                            checked={this.selectedChildProcess && (
                                (this.newProcessState == ProcessStates.New && this.selectedChildProcess.appFormType == possibleChildProcess.appFormType) ||
                                (this.newProcessState == ProcessStates.ForChange && this.selectedChildProcess.applicationToChangeID == possibleChildProcess.applicationToChangeID))} />
                        <label className="custom-control-label" htmlFor={'applFormType_' + index}>{possibleChildProcess.appName}</label>
                    </div>);
            }

            return (
                <>
                    <div className="row">
                        <div className="form-group col">
                            <label className="field-title field-title--form">{this.getResource("GL_APPLICATION_FILED_L")}:</label>
                            <div className="field-text">{this.newProcessState == ProcessStates.New ? this.getResource("CR_GL_INITIAL_ENTRY_L") : this.getResource("CR_GL_CHANGE_CIRCUMSTANCES_L")}</div>
                        </div>
                    </div>
                    <div className="row">
                        <div className="col">
                            <label className="field-title field-title--form">{this.getResource("GL_APPLICATION_L")}</label>
                        </div>
                    </div>
                    <div className="row">
                        <div className="col-12 form-group">
                            {
                                possibleChildProcessesUI.length > 0
                                    ? possibleChildProcessesUI
                                    : this.getResource("CR_APP_00260_I")
                            }
                        </div>
                    </div>
                </>);
        }
    }

    //#region Events

    @action private openModal() {
        this.possibleChildProcesses = this.getPossibleNewProcessTypes();
        this.isSelectedNewProcessState = false;
        this.newProcessState = ProcessStates.New;
        this.selectedChildProcess = null;

        this.showModal = true;
    }

    private onSelectNewChildProcess(newProcess: { appFormType: ApplicationFormTypes, appName: string, applicationToChangeID?: number }) {
        this.selectedChildProcess = newProcess;
    }

    @action private selectNewProcessState() {
        this.isSelectedNewProcessState = true;

        if (this.newProcessState == ProcessStates.New) {
            this.possibleChildProcesses = this.getPossibleNewProcessTypes();
        }
        else {
            this.possibleChildProcesses = this.getPossibleChangeProcessTypes();
        }
    }

    @action private closeModal() {
        this.newProcessState = null;
        this.selectedChildProcess = null;
        this.possibleChildProcesses = [];
        this.isSelectedNewProcessState = false;
        this.errors = null;

        this.showModal = false;
    }

    @action private addChildProcess() {
        if (!this.selectedChildProcess) {
            this.errors = [this.getResource("CR_GL_SELECT_APPLICATION_E")]
        }
        else {
            var request = new APApplicationRequest();
            request.applicationType = this.selectedChildProcess.appFormType;
            request.additionalData = {
                state: this.newProcessState,
                isPreregistrationChildProcess: true,
            }

            if (this.selectedChildProcess.applicationToChangeID) {
                request.additionalData.applicationToChangeID = this.selectedChildProcess.applicationToChangeID
            }

            this.props.registerAsyncOperation(this.props.onApplicationProcessAdd(request).bind(this).then(() => {
                runInAction(() => {
                    this.selectedChildProcess = null;
                    this.showModal = false;
                })
            }))
        }

    }

    //#endregion

    //#region Helpers

    private getPossibleNewProcessTypes(): { appFormType: ApplicationFormTypes, appName: string }[] {
        var possibleFormTypes = [
            ApplicationFormTypes.B1,
            ApplicationFormTypes.B2,
            ApplicationFormTypes.B3,
            ApplicationFormTypes.B4,
            ApplicationFormTypes.B5,
            ApplicationFormTypes.B6,
            ApplicationFormTypes.G1,
            ApplicationFormTypes.G2,
            ApplicationFormTypes.G3];

        // A8 nqma klon i procura
        if (this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A8 ||
            this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A18) {
            possibleFormTypes.indexOf(ApplicationFormTypes.B1) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B1), 1) : null;
            possibleFormTypes.indexOf(ApplicationFormTypes.B2) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B2), 1) : null;
        }

        if (this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A1 ||
            this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A8 ||
            this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A18) {
            possibleFormTypes.indexOf(ApplicationFormTypes.B6) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B6), 1) : null;
        }

        if (this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A15 ||
            this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A16 ||
            this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A17) {
            possibleFormTypes.indexOf(ApplicationFormTypes.B1) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B1), 1) : null;
            possibleFormTypes.indexOf(ApplicationFormTypes.B4) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B4), 1) : null;
        }

        if (this.props.processContext.mainApplicationProcess.mainApplicationType == ApplicationFormTypes.A18) {
            possibleFormTypes.indexOf(ApplicationFormTypes.B4) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B4), 1) : null;
        }

        // Zapor i zalog na dql imat samo kapitalovite druzestva
        if (this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A2 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A3 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A4 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A6 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A10 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A11 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A12 &&
            this.props.processContext.mainApplicationProcess.mainApplicationType != ApplicationFormTypes.A13) {
            possibleFormTypes.indexOf(ApplicationFormTypes.B3) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B3), 1) : null;
            possibleFormTypes.indexOf(ApplicationFormTypes.B5) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B5), 1) : null;
        }

        //B1 - прокура може да се подава при пререгистрация 
        //ако досега не е подадена т.к. прокурата трябва да е една.
        if (this.props.processContext.mainApplicationProcess.applications.filter(app => app.type == ApplicationFormTypes.B1).length > 0 ||
            (this.props.processContext.allApplicationProcesses && this.props.processContext.allApplicationProcesses.filter(pr => pr.mainApplicationType == ApplicationFormTypes.B1).length > 0)) {
            possibleFormTypes.indexOf(ApplicationFormTypes.B1) > -1 ? possibleFormTypes.splice(possibleFormTypes.indexOf(ApplicationFormTypes.B1), 1) : null;
        }

        var result: { appFormType: ApplicationFormTypes, appName: string }[] = [];
        for (var possibleFormType of possibleFormTypes) {
            var nomAppFormType = this.nomApplicationTypes.filter(app => app.appType == possibleFormType.toString())[0]
            var appName = nomAppFormType.appCode ? `${nomAppFormType.appCode} ${nomAppFormType.name}` : nomAppFormType.name;

            result.push({ appFormType: possibleFormType, appName: appName });
        }

        return result;
    }

    private getPossibleChangeProcessTypes(): { appFormType: ApplicationFormTypes, appName: string, applicationToChangeID: number }[] {
        var result: { appFormType: ApplicationFormTypes, appName: string, applicationToChangeID: number }[] = []

        for (var application of this.props.processContext.mainApplicationProcess.applications) {
            if (application.type == ApplicationFormTypes.G1 ||
                application.type == ApplicationFormTypes.G2 ||
                application.type == ApplicationFormTypes.G3) {
                continue;
            }

            if (this.props.processContext.allApplicationProcesses.filter(pr => pr.applications.filter(app => app.applicationID == pr.mainApplicationID)[0].additionalData.applicationToChangeID == application.applicationID).length == 0) {

                var appName = this.getApplicationName(application);

                result.push({ appFormType: application.type, appName: appName, applicationToChangeID: application.applicationID });
            }
        }

        return result;
    }

    private getApplicationName(application: APApplication): string {
        var nomAppFormType = this.nomApplicationTypes.filter(app => app.appType == application.type.toString())[0]

        var appDescription = "";

        if (application.type == ApplicationFormTypes.B2) {
            appDescription = application.content.fields.branchFirm ? application.content.fields.branchFirm.text : "";
        }
        if (application.type == ApplicationFormTypes.B3) {
            if (application.content.fields.pledgeCreditors) {
                var separator = "";
                for (var pledgeCreditor of application.content.fields.pledgeCreditors.pledgeCreditorsList) {
                    appDescription += (separator + pledgeCreditor.subject.name);
                    separator = ", ";
                }
            }
        }
        if (application.type == ApplicationFormTypes.B4) {
            if (application.content.fields.atPawnCreditors) {
                var separator = "";
                for (var atPawnCreditor of application.content.fields.atPawnCreditors.atPawnCreditorsList) {
                    appDescription += (separator + atPawnCreditor.subject.name);
                    separator = ", ";
                }
            }
        }
        if (application.type == ApplicationFormTypes.B5) {
            if (application.content.fields.distraints) {
                var separator = "";
                for (var distraint of application.content.fields.distraints.distraintsList) {
                    appDescription += (separator + distraint.subject.name);
                    separator = ", ";
                }
            }
        }

        //TODO: ADD ALL RegFormManagerVersion2 GetLeadingPackageApplications

        var appName = nomAppFormType.appCode ? `${nomAppFormType.appCode} ${nomAppFormType.name} ${appDescription ? '- ' + appDescription : ''}` : `${nomAppFormType.name} ${appDescription ? '- ' + appDescription : ''}`;

        return appName;
    }

    private getApplicationProcessName(process: APApplicationProcess): string {

        var appType = this.nomApplicationTypes.filter(at => at.appType == (+process.mainApplicationType).toString())[0]
        var mainApplication = process.applications.filter(app => app.applicationID == process.mainApplicationID)[0];

        if (!mainApplication.additionalData.applicationToChangeID) {
            return appType.appCode ? `${appType.appCode} ${appType.name}` : appType.name;
        }
        else {
            return this.getApplicationName(this.props.processContext.mainApplicationProcess.applications.filter(app => app.applicationID == mainApplication.additionalData.applicationToChangeID)[0]);
        }
    }

    //#endregion
}

export const PreregistrationUI = withAsyncFrame(PreregistrationUIImpl, false);