import { BaseDataService } from 'Cnsys.Core'
import { ApplicationFormTypes } from 'EPZEU.CR.Core'
import { ApplicationFormBase, AttachedDocument, ProcessStatuses } from 'EPZEU.CR.Domain'
import { APApplicationProcess, APApplicationRequest, APApplication } from '../Models/ModelsAutoGenerated'
import { Obligation } from 'EPZEU.Core';

export class ApplicationProcessDataService extends BaseDataService {
    protected baseUrl(): string {
        return super.baseUrl() + "ApplicationProcesses";
    }

    public getApplicationProcessByApplicationFormType(applType: ApplicationFormTypes): Promise<APApplicationProcess> {
        return this.get<APApplicationProcess>(null, APApplicationProcess, { applType: applType });
    }

    public getApplicationProcess(appProcessID: number, loadAllData: boolean): Promise<APApplicationProcess> {
        return this.get<APApplicationProcess>(`${appProcessID}`, APApplicationProcess, { loadAllData: loadAllData });
    }

    public createApplicationProcess(appRequest: APApplicationRequest): Promise<APApplicationProcess> {
        return this.post<APApplicationProcess>(null, APApplicationProcess, appRequest);
    }

    public addChildApplicationProcess(parentAppProcessID: number, appRequest: APApplicationRequest): Promise<APApplicationProcess> {
        return this.post<APApplicationProcess>(`${parentAppProcessID}/AddChildProcess`, APApplicationProcess, appRequest);
    }

    public deleteApplicationProcess(appProcessID: number): Promise<void> {
        return this.delete(`${appProcessID}`, null);
    }

    public getApplication(appProcessID: number, applID: number): Promise<APApplication> {
        return this.get<APApplication>(`${appProcessID}/Applications/${applID}`, APApplication);
    }

    public deleteApplication(appProcessID: number, applID: number): Promise<void> {
        return this.delete(`${appProcessID}/Applications/${applID}`, null);
    }

    public createApplication(appProcessID: number, appRequest: APApplicationRequest): Promise<APApplication> {
        return this.post<APApplication>(`${appProcessID}/Applications`, APApplication, appRequest);
    }

    public saveApplicationContent(appProcessID: number, applID: number, application: ApplicationFormBase): Promise<void> {
        return this.put(`${appProcessID}/Applications/${applID}`, null, application);
    }

    public getApplicationDocuments(appProcessID: number, applID: number): Promise<AttachedDocument[]> {
        return this.get<AttachedDocument[]>(`${appProcessID}/Applications/${applID}/AttachedDocuments`, AttachedDocument);
    }

    public deleteApplicationDocument(appProcessID: number, applID: number, docID: number): Promise<void> {
        return this.delete(`${appProcessID}/Applications/${applID}/AttachedDocuments/${docID}`, null);
    }

    public createApplicationDocument(appProcessID: number, applID: number, document: AttachedDocument): Promise<AttachedDocument> {
        return this.post(`${appProcessID}/Applications/${applID}/AttachedDocuments`, AttachedDocument, document);
    }

    public updateApplicationDocument(appProcessID: number, applID: number, document: AttachedDocument): Promise<void> {
        return this.post(`${appProcessID}/Applications/${applID}/AttachedDocuments/${document.applicationDocumentID}`, null, document);
    }

    public startSigningApplicationDocument(appProcessID: number, applID: number, docID: number): Promise<string> {
        return this.post<string>(`${appProcessID}/Applications/${applID}/AttachedDocuments/${docID}/StartSigning`, null);
    }

    public getUploadURL(application: APApplication): string {
        let result = this.baseUrl()
            + '/' + application.applicationProcessID
            + '/Applications/' + application.applicationID
            + '/AttachedDocuments/WithContent'

        return result;
    }

    public getObligations(appProcessID: number): Promise<Obligation[]> {
        return this.get<Obligation[]>(`${appProcessID}/Obligations`, Obligation);
    }

    public startSigning(appProcessID: number): Promise<string> {
        return this.post<string>(`${appProcessID}/StartSigning`, null);
    }

    public startSending(appProcessID: number): Promise<void> {
        return this.post<void>(`${appProcessID}/StartSending`, null);
    }

    public returnToBeginningStatus(appProcessID: number): Promise<ProcessStatuses> {
        return this.post<ProcessStatuses>(`${appProcessID}/ReturnToBeginningStatus`, null);
    }
}