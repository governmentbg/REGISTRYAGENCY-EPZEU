import { UrlHelper } from 'Cnsys.Core';
import { Obligation } from 'EPZEU.Core';
import { ApplicationFormTypes, Constants, DocumentsDataService } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationFormTypesHelper, ApplicationProviderFactory, AttachedDocument, IApplicationFormManager, IApplicationProcessContext, IApplicationProvider, ProcessStates, ProcessStatuses, SpecificApplicationInfoAccessor, UIModes } from 'EPZEU.CR.Domain';
import { action, observable, runInAction } from 'mobx';
import { APApplication, APApplicationProcess, APApplicationRequest } from './Models/ModelsAutoGenerated';
import { ApplicationProcessDataService } from './Services/ApplicationProcessDataService';

interface ApplicationItem {
    order: number,
    application: APApplication,
    applicationManager: IApplicationFormManager,
    applicationProvider: IApplicationProvider,
    applicationSavedState?: string;
    isMainAppl: boolean,
}

export class ApplicationProcessContext implements IApplicationProcessContext {
    @observable private _isContextInitialized: boolean;
    @observable private _allApplProcesses: APApplicationProcess[];

    private _mainApplProcess: APApplicationProcess;
    private _applProcess: APApplicationProcess;
    private _applicationItems: ApplicationItem[];
    private _service: ApplicationProcessDataService;
    private refreshInerval: number;
    private refreshCounts: number = 1;

    constructor() {
        this.refreshProcessState = this.refreshProcessState.bind(this);
        this.refreshProcessStateSecondary = this.refreshProcessStateSecondary.bind(this);
        this.getAdditionalApplicationFormTypes = this.getAdditionalApplicationFormTypes.bind(this);

        this._isContextInitialized = false;
        this._applicationItems = [];
        this._service = new ApplicationProcessDataService();
    }

    public isDraftApplicationProcess(): boolean {
        return true;
    }

    public get documents(): AttachedDocument[] {
        var docs: AttachedDocument[] = [];

        for (var ai of this._applicationItems) {
            if (ai.applicationManager.application.documents && ai.applicationManager.application.documents.length > 0) {
                for (var doc of ai.applicationManager.application.documents) {
                    docs.push(doc);
                }
            }
        }
        return docs;
    }

    public get mainApplicationProcess(): APApplicationProcess {
        return this._mainApplProcess;
    }

    public get allApplicationProcesses(): APApplicationProcess[] {
        return this._allApplProcesses;
    }

    public get currentApplicationProcess(): APApplicationProcess {
        return this._applProcess;
    }

    public get isPreregistration(): boolean {
        return this.mainApplicationProcess.applications.filter(app => app.applicationID == this.mainApplicationProcess.mainApplicationID)[0].additionalData.state == ProcessStates.Preregistration;
    }

    public async createApplicationProcess(request: APApplicationRequest): Promise<void> {
        if (ApplicationFormTypesHelper.isTypeV(request.applicationType))
            request.additionalData = { state: ProcessStates.New };

        var appProcess = await this._service.createApplicationProcess(request);

        return await this.loadApplicationProcess(appProcess);
    }

    public addChildApplicationProcess(request: APApplicationRequest): Promise<void> {
        request.additionalData.uic = this._mainApplProcess.applications.filter(app => app.applicationID == this._mainApplProcess.mainApplicationID)[0].additionalData.uic;
        request.additionalData.companyName = this._mainApplProcess.applications.filter(app => app.applicationID == this._mainApplProcess.mainApplicationID)[0].additionalData.companyName;

        return this._service.addChildApplicationProcess(this._mainApplProcess.applicationProcessID, request).bind(this).then(newProcess => {
            runInAction(() => {
                if (!this._mainApplProcess.childApplicationProcesses) {
                    this._mainApplProcess.childApplicationProcesses = [];
                }

                this._mainApplProcess.childApplicationProcesses.push(newProcess);
                this._allApplProcesses.push(newProcess);
            })

            return this.loadApplicationProcess(this._mainApplProcess);
        });
    }

    public deleteChildApplicationProcess(appProcess: APApplicationProcess): Promise<void> {
        if (this._mainApplProcess.childApplicationProcesses.indexOf(appProcess) >= 0) {
            return this._service.deleteApplicationProcess(appProcess.applicationProcessID).bind(this).then(() => {

                runInAction(() => {
                    this._mainApplProcess.childApplicationProcesses.splice(this._mainApplProcess.childApplicationProcesses.indexOf(appProcess), 1);
                    this._allApplProcesses.splice(this._mainApplProcess.childApplicationProcesses.indexOf(appProcess), 1);

                    if (appProcess == this._applProcess) {
                        this._applProcess = null;
                        this._applicationItems = [];
                    }
                })
            })
        }

        return Promise.resolve();
    }

    public tryLoadApplicationProcess(applType: ApplicationFormTypes): Promise<boolean> {
        return this._service.getApplicationProcessByApplicationFormType(applType).bind(this).then(pp => {
            if (pp) {
                return this.loadApplicationProcess(pp).then(() => true);
            }
            else {
                return false;
            }
        })
    }

    public getObligations(): Promise<Obligation[]> {
        return this._service.getObligations(this.mainApplicationProcess.applicationProcessID);
    }

    //#region IApplicationProcessContext 

    public get applicationItems(): ApplicationItem[] {
        return this._applicationItems;
    }

    public get isContextInitialized(): boolean {
        return this._isContextInitialized;
    }

    public get status(): ProcessStatuses {
        return this._mainApplProcess.status;
    }

    public get signingGuid(): string {
        return this._applProcess.signingGuid;
    }

    @action public clearContext() {
        this._applProcess = null;
        this._applicationItems = [];
        this._isContextInitialized = false;
    }

    public deleteApplicationProcess(): Promise<void> {
        return this._service.deleteApplicationProcess(this._mainApplProcess.applicationProcessID).bind(this).then(() => {
            this.clearContext();
        });
    }

    public addApplication(request: APApplicationRequest): Promise<ApplicationItem> {
        var mainAppItem = this.applicationItems.filter(item => item.isMainAppl)[0];

        var providerPromise = ApplicationProviderFactory.getApplicationProvider(request.applicationType);
        var applPromise = this._service.createApplication(this._applProcess.applicationProcessID, request);

        return Promise.all([providerPromise, applPromise]).bind(this).then(result => {
            var applFormManager = result[0].getApplicationManager();

            applFormManager.init(result[1].content, {
                processContext: this,
                additionalData: result[1].additionalData,
                uiMode: UIModes.Edit
            });

            var item: ApplicationItem = {
                application: result[1],
                applicationManager: applFormManager,
                applicationProvider: result[0],
                isMainAppl: false,
                order: result[1].order
            }

            this.applicationItems.push(item);
            this._applProcess.applications.push(result[1]);


            return item;
        })
    }

    public deleteApplication(applicationForm: ApplicationFormBase): Promise<void> {
        var application = this.getApplicationItem(applicationForm).application;

        return this._service.deleteApplication(this._applProcess.applicationProcessID, application.applicationID).bind(this).then(() => {
            let appToDel = this._applProcess.applications.filter(a => a.applicationID == application.applicationID)[0];
            let appToDelIndex = this._applProcess.applications.indexOf(appToDel);

            if (appToDelIndex > -1)
                this._applProcess.applications.splice(appToDelIndex, 1);

            let appItemToDel = this.applicationItems.filter(a => a.application.applicationID == application.applicationID)[0];
            let appItemToDelIndex = this.applicationItems.indexOf(appItemToDel);

            if (appItemToDelIndex > -1)
                this.applicationItems.splice(appItemToDelIndex, 1);
        });
    }

    public saveApplication(application: ApplicationFormBase): Promise<void> {
        var appItem = this.getApplicationItem(application);

        return appItem.applicationManager.prepareForSave().bind(this).then(t => {
            var appFormState = JSON.stringify(appItem.applicationManager.application);

            if (appItem.applicationSavedState != appFormState) {
                return this._service.saveApplicationContent(this._applProcess.applicationProcessID, appItem.application.applicationID, appItem.applicationManager.application).bind(this).then(() => {
                    appItem.applicationSavedState = appFormState;
                })
            }
            else {
                return Promise.resolve();
            }
        });
    }

    public getAdditionalApplicationFormTypes(): { applicationType: ApplicationFormTypes, possibleProcessStates: ProcessStates[] }[] {

        var mainApplItem = this._applicationItems.filter(item => item.isMainAppl)[0];
        var allAdditionalApplTypes = this._applicationItems.map(item => item.application.type);
        var result: { applicationType: ApplicationFormTypes, possibleProcessStates: ProcessStates[] }[] = [];

        if (mainApplItem.applicationManager.processState == ProcessStates.New && ApplicationFormTypesHelper.isTypeA(mainApplItem.application.type)) {
            if (allAdditionalApplTypes.filter(r => r == ApplicationFormTypes.B1).length == 0
                && mainApplItem.application.type != ApplicationFormTypes.A8
                && mainApplItem.application.type != ApplicationFormTypes.A15
                && mainApplItem.application.type != ApplicationFormTypes.A16
                && mainApplItem.application.type != ApplicationFormTypes.A17
                && mainApplItem.application.type != ApplicationFormTypes.A18) {
                result.push({ applicationType: ApplicationFormTypes.B1, possibleProcessStates: [ProcessStates.New] });
            }

            if (mainApplItem.application.type != ApplicationFormTypes.A8
                && mainApplItem.application.type != ApplicationFormTypes.A11
                && mainApplItem.application.type != ApplicationFormTypes.A14
                && mainApplItem.application.type != ApplicationFormTypes.A18) {
                result.push({ applicationType: ApplicationFormTypes.B2, possibleProcessStates: [ProcessStates.New] });
            }

            if (mainApplItem.application.type == ApplicationFormTypes.A12) {
                result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.New] });

                if (allAdditionalApplTypes.filter(r => r == ApplicationFormTypes.B6).length == 0) {
                    result.push({ applicationType: ApplicationFormTypes.B6, possibleProcessStates: [ProcessStates.New] });
                }
            }

            if (mainApplItem.application.type == ApplicationFormTypes.A14) {
                if (allAdditionalApplTypes.filter(r => r == ApplicationFormTypes.B7).length == 0) {
                    result.push({ applicationType: ApplicationFormTypes.B7, possibleProcessStates: [ProcessStates.New] });
                }
            }

            if (mainApplItem.application.type == ApplicationFormTypes.A10
                || mainApplItem.application.type == ApplicationFormTypes.A13) {
                result.push({ applicationType: ApplicationFormTypes.B3, possibleProcessStates: [ProcessStates.New] });
                result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.New] });
                result.push({ applicationType: ApplicationFormTypes.B5, possibleProcessStates: [ProcessStates.New] });
                result.push({ applicationType: ApplicationFormTypes.B6, possibleProcessStates: [ProcessStates.New] });
            }

            if (allAdditionalApplTypes.filter(r => r == ApplicationFormTypes.G1).length == 0) {
                result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.New] });
            }
        }

        if (mainApplItem.applicationManager.processState == ProcessStates.Preregistration && ApplicationFormTypesHelper.isTypeA(mainApplItem.application.type)) {
            switch (mainApplItem.application.type) {
                case ApplicationFormTypes.A1:
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B1) < 0 && result.push({ applicationType: ApplicationFormTypes.B1, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B2, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;

                case ApplicationFormTypes.A2:
                case ApplicationFormTypes.A3:
                case ApplicationFormTypes.A4:
                case ApplicationFormTypes.A6:
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B1) < 0 && result.push({ applicationType: ApplicationFormTypes.B1, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B2, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B3, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B5, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B6) < 0 && result.push({ applicationType: ApplicationFormTypes.B6, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;

                case ApplicationFormTypes.A5:
                case ApplicationFormTypes.A7:
                case ApplicationFormTypes.A9:
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B1) < 0 && result.push({ applicationType: ApplicationFormTypes.B1, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B2, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B6) < 0 && result.push({ applicationType: ApplicationFormTypes.B6, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;

                case ApplicationFormTypes.A8:
                    result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;

                case ApplicationFormTypes.A14:
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B1) < 0 && result.push({ applicationType: ApplicationFormTypes.B1, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B2, possibleProcessStates: [ProcessStates.Preregistration] });
                    result.push({ applicationType: ApplicationFormTypes.B4, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;

                case ApplicationFormTypes.A15:
                case ApplicationFormTypes.A16:
                case ApplicationFormTypes.A17:
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.B6) < 0 && result.push({ applicationType: ApplicationFormTypes.B6, possibleProcessStates: [ProcessStates.Preregistration] });
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;

                case ApplicationFormTypes.A18:
                    allAdditionalApplTypes.indexOf(ApplicationFormTypes.G1) < 0 && result.push({ applicationType: ApplicationFormTypes.G1, possibleProcessStates: [ProcessStates.Preregistration] });
                    break;
            }
        }

        if (ApplicationFormTypesHelper.isTypeV(mainApplItem.application.type)) {
            switch (mainApplItem.application.type) {
                case ApplicationFormTypes.V1:
                    result.push({ applicationType: ApplicationFormTypes.A1, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    break;
                case ApplicationFormTypes.V21:
                    if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(mainApplItem.applicationManager.application).transferringProperty) {
                        result.push({ applicationType: ApplicationFormTypes.A1, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A9, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A14, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    } else if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(mainApplItem.applicationManager.application).conversionOfBulgarianPLCIntoBulgarianEuropeanCompany) {
                        result.push({ applicationType: ApplicationFormTypes.A12, possibleProcessStates: [ProcessStates.New] });
                    } else if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(mainApplItem.applicationManager.application).conversionOfBulgarianEuropeanCompanyIntoBulgarianPLC) {
                        result.push({ applicationType: ApplicationFormTypes.A5, possibleProcessStates: [ProcessStates.New] });
                    } else {
                        result.push({ applicationType: ApplicationFormTypes.A2, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A3, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A4, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A5, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A6, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A9, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A14, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    }
                    break;
                case ApplicationFormTypes.V22:
                    result.push({ applicationType: ApplicationFormTypes.A2, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A3, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A4, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A5, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A6, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A9, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A14, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    break;
                case ApplicationFormTypes.V24:
                    if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(mainApplItem.applicationManager.application).influx) { //вливане
                        result.push({ applicationType: ApplicationFormTypes.A4, possibleProcessStates: [ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A5, possibleProcessStates: [ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A6, possibleProcessStates: [ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A12, possibleProcessStates: [ProcessStates.New] });
                        result.push({ applicationType: ApplicationFormTypes.A14, possibleProcessStates: [ProcessStates.ForChange] });
                    } else if (SpecificApplicationInfoAccessor.getF701_FormOfTransforming701(mainApplItem.applicationManager.application).fusion) { //сливане
                        result.push({ applicationType: ApplicationFormTypes.A4, possibleProcessStates: [ProcessStates.New] });
                        result.push({ applicationType: ApplicationFormTypes.A5, possibleProcessStates: [ProcessStates.New] });
                        result.push({ applicationType: ApplicationFormTypes.A6, possibleProcessStates: [ProcessStates.New] });
                        result.push({ applicationType: ApplicationFormTypes.A12, possibleProcessStates: [ProcessStates.New] });
                        result.push({ applicationType: ApplicationFormTypes.A14, possibleProcessStates: [ProcessStates.New] });
                    } else {
                        result.push({ applicationType: ApplicationFormTypes.A4, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A5, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A6, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                        result.push({ applicationType: ApplicationFormTypes.A12, possibleProcessStates: [ProcessStates.New] });
                        result.push({ applicationType: ApplicationFormTypes.A14, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    }
                    break;
                case ApplicationFormTypes.V25:
                case ApplicationFormTypes.V26:
                    result.push({ applicationType: ApplicationFormTypes.A15, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A16, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    result.push({ applicationType: ApplicationFormTypes.A17, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    break;
                case ApplicationFormTypes.V31:
                case ApplicationFormTypes.V32:
                    result.push({ applicationType: ApplicationFormTypes.A7, possibleProcessStates: [ProcessStates.New, ProcessStates.ForChange] });
                    break;
                case ApplicationFormTypes.V33:
                    result.push({ applicationType: ApplicationFormTypes.A7, possibleProcessStates: [ProcessStates.New] });
                    result.push({ applicationType: ApplicationFormTypes.A13, possibleProcessStates: [ProcessStates.New] });
                    break;
            }
        }

        return result;
    }


    public getAttachedDocumentUploadURL(application: ApplicationFormBase): string {
        var appItem = this.getApplicationItem(application);

        return this._service.getUploadURL(appItem.application);
    }

    public getAttachedDocumentDownloadURL(document: AttachedDocument): Promise<string> {
        var docService = new DocumentsDataService();

        return docService.getDraftDownloadUrl(document.guid);
    }
    public getAttachedDocumentCopyDownloadURL(document: AttachedDocument): string {

        return UrlHelper.generateLinkUrl(`~${Constants.PATHS.DOCUMENT_DRAFT_ACCESS.replace(":guid", document.guid)}`);
    }

    public addAttachedDocument(application: ApplicationFormBase, applAttDocument: AttachedDocument): Promise<AttachedDocument> {
        var appItem = this.getApplicationItem(application);

        if (!applAttDocument.applicationDocumentID) {
            return this._service.createApplicationDocument(this._applProcess.applicationProcessID, appItem.application.applicationID, applAttDocument).bind(this).then(attDoc => {
                appItem.applicationManager.addAttachedDocument(attDoc);

                return this.saveApplication(appItem.applicationManager.application).then(() => attDoc);
            })
        }

        appItem.applicationManager.addAttachedDocument(applAttDocument);

        return this.saveApplication(appItem.applicationManager.application).then(() => applAttDocument);
    }

    public updateAttachedDocument(application: ApplicationFormBase, applAttDocument: AttachedDocument): Promise<void> {
        var appItem = this.getApplicationItem(application);

        return this._service.updateApplicationDocument(this._applProcess.applicationProcessID, appItem.application.applicationID, applAttDocument).bind(this).then(() => {
            var docToUpdate = appItem.applicationManager.application.documents.filter(d => d.applicationDocumentID == applAttDocument.applicationDocumentID)[0];
            docToUpdate.documentTypeID = applAttDocument.documentTypeID;
            docToUpdate.description = applAttDocument.description;
            docToUpdate.htmlTemplateContent = applAttDocument.htmlTemplateContent;
            docToUpdate.isActWithErasedPersonalData = applAttDocument.isActWithErasedPersonalData;

            return this.saveApplication(appItem.applicationManager.application)
        });
    }

    public deleteAttachedDocument(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        var appItem = this.getApplicationItem(application);

        return this._service.deleteApplicationDocument(this._applProcess.applicationProcessID, appItem.application.applicationID, document.applicationDocumentID).bind(this).then(() => {
            appItem.applicationManager.deleteAttachedDocument(document);

            return this.saveApplication(appItem.applicationManager.application);
        })
    }

    public startSigningAttachedDocumentTemplate(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        var appItem = this.getApplicationItem(application);

        return this._service.startSigningApplicationDocument(this._applProcess.applicationProcessID, appItem.application.applicationID, document.applicationDocumentID).bind(this).then(signingGuid => {
            document.signingGuid = signingGuid

            this.saveApplication(appItem.applicationManager.application)
        });
    }

    public signingAttachedDocumentTemplateCompleted(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        var appItem = this.getApplicationItem(application);

        return this._service.getApplication(this._applProcess.applicationProcessID, appItem.application.applicationID).bind(this).then(app => {

            var appDocs: AttachedDocument[] = app.content.documents;
            var appDoc = appDocs.filter(d => d.applicationDocumentID == document.applicationDocumentID)[0];

            runInAction(() => {
                document.signingGuid = null;
                document.htmlTemplateContent = null;
                document.guid = appDoc.guid;
                document.numberOfPages = appDoc.numberOfPages;
                document.size = appDoc.size;
                document.hash = appDoc.hash;
                document.hashAlgorithm = appDoc.hashAlgorithm;
                document.contentType = appDoc.contentType;
                document.fileName = appDoc.fileName;
            });
        });
    }

    public signingAttachedDocumentTemplateRejected(application: ApplicationFormBase, document: AttachedDocument): Promise<void> {
        document.signingGuid = null;

        return Promise.resolve();
    }


    public startSinging(): Promise<void> {
        return this._service.startSigning(this._applProcess.applicationProcessID).bind(this).then(signingGuid => {
            runInAction(() => {
                this._applProcess.status = ProcessStatuses.Signing;
                this._applProcess.signingGuid = signingGuid;
            })
        });
    }

    @action public signingRejected(): void {
        this._applProcess.status = ProcessStatuses.InProcess;
        this._applProcess.signingGuid = null;
    }

    public signingCompleted(): Promise<void> {

        return this._service.getApplicationProcess(this._applProcess.applicationProcessID, false).bind(this).then(proc => {
            runInAction(() => {
                this._applProcess.status = proc.status;
                this._applProcess.incomingNumber = proc.incomingNumber;
                this._applProcess.signingGuid = proc.signingGuid;
                this._applProcess.errorMessage = proc.errorMessage;
            });

            if (this._applProcess.status == ProcessStatuses.WaitPreregistrationCompletion) {
                return this.loadApplicationProcess(this._applProcess);
            }

            if (this._applProcess.parentApplicationProcessID) {
                return this.tryLoadApplicationProcess(this._mainApplProcess.mainApplicationType).then(v => { });
            }

            if (this._applProcess && (this._applProcess.status == ProcessStatuses.Sending || this._applProcess.status == ProcessStatuses.Accepted)) {
                this.refreshProcessState();
            }
        });
    }

    public completePreregistration(): Promise<void> {
        return this._service.startSending(this._mainApplProcess.applicationProcessID).bind(this).then(() => {
            return this.tryLoadApplicationProcess(this._mainApplProcess.mainApplicationType).then(v => { });
        });
    }

    public startSending(): Promise<void> {
        return this._service.startSending(this._applProcess.applicationProcessID).bind(this).then(() => {
            this._applProcess.status = ProcessStatuses.Sending;

            this.refreshProcessState();
        });
    }

    public returnToBeginningStatus(): Promise<void> {
        return this._service.returnToBeginningStatus(this._applProcess.applicationProcessID).bind(this).then(newStatus => {
            this._applProcess.status = newStatus;
        });
    }

    public refreshProcessState(isSecondary: boolean = false): Promise<void> {

        if (this.refreshInerval) {
            clearInterval(this.refreshInerval);
            this.refreshInerval = null;
        }

        if (isSecondary) {
            this.refreshCounts += 1;
        }
        else {
            this.refreshCounts = 1;
        }

        if (this._applProcess) {
            return this._service.getApplicationProcess(this._applProcess.applicationProcessID, false).bind(this).then(appProcess => {

                runInAction(() => {
                    this._applProcess.incomingNumber = appProcess.incomingNumber;
                    this._applProcess.errorMessage = appProcess.errorMessage;
                    this._applProcess.status = appProcess.status;

                    var applProcess = this._allApplProcesses.filter(p => p.applicationProcessID == this._applProcess.applicationProcessID)[0];

                    //При някои ситуации се получва така че обекта в this._allApplProcesses има различна референция от другия
                    if (applProcess != this._applProcess) {
                        applProcess.incomingNumber = appProcess.incomingNumber;
                        applProcess.errorMessage = appProcess.errorMessage;
                        applProcess.status = appProcess.status;
                    }

                    if (this._applProcess.childApplicationProcesses && this._applProcess.childApplicationProcesses.length > 0) {
                        for (var chProcess of this._applProcess.childApplicationProcesses) {
                            var newChProcess = appProcess.childApplicationProcesses.filter(p => p.applicationProcessID == chProcess.applicationProcessID)[0];

                            chProcess.incomingNumber = newChProcess.incomingNumber;
                            chProcess.errorMessage = newChProcess.errorMessage;
                            chProcess.status = newChProcess.status;
                        }
                    }
                });

                if (appProcess.status == ProcessStatuses.ReadyForSending) {
                    this._service.startSending(this._applProcess.applicationProcessID).bind(this).then(() => {
                        this.refreshInerval = setInterval(this.refreshProcessStateSecondary, this.refreshCounts > 100 ? 5000 : 500);
                    })
                }
                else {
                    if (this._applProcess.status == ProcessStatuses.Sending ||
                        this._applProcess.status == ProcessStatuses.Accepted)
                        this.refreshInerval = setInterval(this.refreshProcessStateSecondary, this.refreshCounts > 100 ? 5000 : 500);
                }
            })
        }
    }

    //#endregion

    //#region Helpers

    private refreshProcessStateSecondary(): Promise<void> {
        return this.refreshProcessState(true);
    }

    @action private async loadApplicationProcess(applProcess: APApplicationProcess): Promise<void> {
        if (this.isContextInitialized) {
            this.clearContext();
        }

        this._mainApplProcess = applProcess;
        this._allApplProcesses = [this._mainApplProcess];

        if (applProcess.childApplicationProcesses && applProcess.childApplicationProcesses.length) {
            this._allApplProcesses.push(...applProcess.childApplicationProcesses);

            this._allApplProcesses = this._allApplProcesses.sort((item1, item2) => item1.applicationProcessID > item2.applicationProcessID ? 1 : -1);
        }

        if (applProcess.status != ProcessStatuses.WaitPreregistrationCompletion) {
            this._applProcess = applProcess;
        }
        else {
            var currentProcesses = this._allApplProcesses.filter(ap => ap.status != ProcessStatuses.Sending && ap.status != ProcessStatuses.WaitPreregistrationCompletion);

            if (currentProcesses && currentProcesses.length == 1) {
                this._applProcess = currentProcesses[0];
            }
        }

        if (applProcess.status == ProcessStatuses.WaitPreregistrationCompletion && !this._applProcess) {
            this._isContextInitialized = true;

            return Promise.resolve();
        }

        this._applicationItems = [];

        var providerPromises: Promise<IApplicationProvider>[] = [];

        for (var appl of this._applProcess.applications) {
            providerPromises.push(ApplicationProviderFactory.getApplicationProvider(appl.type));
        };

        var providers: IApplicationProvider[] = [];

        for (var providerPromise of providerPromises) {
            providers.push(await providerPromise);
        }

        runInAction(() => {
            var mainAppl = this._applProcess.applications.filter(appl => appl.applicationID == this._applProcess.mainApplicationID)[0];
            var mainApplProvider = providers.filter(p => p.applicationType == mainAppl.type)[0];
            var mainApplManager = mainApplProvider.getApplicationManager();

            for (var appl of this._applProcess.applications) {
                let manager: IApplicationFormManager;
                let provider = providers.filter(p => p.applicationType == appl.type)[0];

                if (appl.applicationID == mainAppl.applicationID) {
                    manager = mainApplManager;

                    manager.init(appl.content, {
                        processContext: this,
                        additionalData: appl.additionalData,
                        uiMode: UIModes.Edit
                    });
                }
                else {
                    manager = provider.getApplicationManager();

                    manager.init(appl.content, {
                        processContext: this,
                        additionalData: appl.additionalData,
                        uiMode: UIModes.Edit
                    });
                }

                var applItem: ApplicationItem = {
                    application: appl,
                    applicationManager: manager,
                    applicationProvider: provider,
                    order: appl.order,
                    isMainAppl: appl.applicationID == mainAppl.applicationID
                };

                this._applicationItems.push(applItem);
            };

            this._isContextInitialized = true;
        });

        if (this._applProcess.status == ProcessStatuses.ReadyForSending ||
            this._applProcess.status == ProcessStatuses.Sending ||
            this._applProcess.status == ProcessStatuses.Accepted) {
            this.refreshProcessState();
        }
    }

    private getApplicationItem(application: ApplicationFormBase): ApplicationItem {
        var selectedApplicationItem = this.applicationItems.filter(ai => ai.applicationManager.application === application);

        if (selectedApplicationItem && selectedApplicationItem.length > 0) {
            return selectedApplicationItem[0];
        }
        else {
            return null;
        }
    }

    //#endregion   
} 
