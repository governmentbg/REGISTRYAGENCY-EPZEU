import { ObjectHelper } from 'Cnsys.Core';
import { Applicant, ApplicantsValidator, ApplicationFormBaseManager, BirthPlace, Person, Address, Passport } from 'EPZEU.CR.Domain';
import { AppealRefusal, ComplaintPerson } from '../Models/ModelsAutoGenerated';

export class AppealRefusalFormManager extends ApplicationFormBaseManager<AppealRefusal> {

    protected createApplication(obj: any): AppealRefusal {
        return new AppealRefusal(obj);
    }

    public prepareForSave(): Promise<void> {
        this.application.applicantInfo.applicants.applicantsList = []
        if (this.application.complaintPersons
            && this.application.complaintPersons.complaintPersonsList
            && this.application.complaintPersons.complaintPersonsList.length > 0) {

            this.application.complaintPersons.complaintPersonsList.forEach((complaintPerson: ComplaintPerson, index: number) => {
                if (complaintPerson.includeApplicant == true) {
                    let applicant: Applicant = new Applicant();

                    applicant.person = new Person();
                    ObjectHelper.clone(complaintPerson.person, applicant.person);                    

                    applicant.address = new Address();
                    ObjectHelper.clone(complaintPerson.address, applicant.address);

                    applicant.applicantGuid = ObjectHelper.newGuid();
                    applicant.birthPlace = new BirthPlace();
                    applicant.birthPlace.place = complaintPerson.birthPlace;
                    applicant.birthPlace.country = complaintPerson.birthCountry;

                    applicant.clearErrors(true);

                    this.application.applicantInfo.applicants.applicantsList.push(applicant)
                }
                else {
                    this.application.complaintPersons.complaintPersonsList[index].includeApplicant = false;
                }
            });

            new ApplicantsValidator().validate(this.application.applicantInfo.applicants);

            return Promise.resolve();
        }
        else {
            return Promise.resolve();
        }
    }
}