import { DataServiceProvider } from 'EPZEU.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { applicantExchangeOrderNumber, ApplicantExchangeUI, ApplicantExchangeValidator, applicantInfoOrderNumber, ApplicantInfoUI, ApplicantInfoValidator, ApplicationItem, ApplicationProviderBase, ApplicationWithFieldsStartUI, entityIdentificationOrderNumber, EntityIdentificationUI, Form, FormState, IApplicationFormManager, MenuNavItem, UICValidator } from 'EPZEU.CR.Domain';
import { moduleContext } from '../';
import { E1Validator } from '../Models/ApplicationForms/Validators/E1Validator';
import { E1 } from '../Models/ModelsAutoGenerated';
import { E1UI } from '../UI/Applications/E1UI';
import { E1FormManager } from './E1FormManager';

export class E1Provider extends ApplicationProviderBase {

    public getStartUIComponentType(): any {
        return ApplicationWithFieldsStartUI;
    }

    getUIComponentType(): any {
        return E1UI;
    }

    getMenuNavItems(appManager: IApplicationFormManager): MenuNavItem[] {
        return [
            {
                isApplicationTitle: true,
                label: ApplicationFormTypes[ApplicationFormTypes.E1]
            },
            {
                isApplicationTitle: false,
                label: moduleContext.resourceManager.getResourceByKey("CR_GL_CERTIFICATE_OF_LEGALITY_L"),
                anchor: "certificateLegality"
            },
            {
                isApplicationTitle: false,
                label: moduleContext.resourceManager.getResourceByKey("GL_APPLIEDS_L"),
                anchor: "documents"
            }
        ];
    }

    public getApplicationForms(appItem: ApplicationItem, dataServiceProvider: DataServiceProvider): Form[] {
        var forms = super.getApplicationForms(appItem, dataServiceProvider);

        var entityIdentification: Form = {
            form: (<E1>appItem.applicationManager.application).uic,
            formManager: appItem.applicationManager,
            formMenuNavItems: [{
                isApplicationTitle: false,
                label: moduleContext.resourceManager.getResourceByKey("GL_IDENTIFICATION_L"),
            }],
            formUICmp: EntityIdentificationUI,
            formValidator: new UICValidator(),
            state: FormState.New,
            order: entityIdentificationOrderNumber,
            isMain: false,
            canEdit: false,
            canDelete: false
        }

        entityIdentification.formValidator.setValidationContext(this.getValidationContext(appItem, dataServiceProvider));

        forms.push(entityIdentification);


        var applicantInfo: Form = {
            form: appItem.applicationManager.application.applicantInfo,
            formManager: appItem.applicationManager,
            formMenuNavItems: [{
                isApplicationTitle: false,
                label: moduleContext.resourceManager.getResourceByKey("GL_APPLICANT_DATA_L"),
            }],
            formUICmp: ApplicantInfoUI,
            formValidator: new ApplicantInfoValidator(),
            state: FormState.New,
            order: applicantInfoOrderNumber,
            isMain: false,
            canEdit: true,
            canDelete: false
        }

        applicantInfo.formValidator.setValidationContext(this.getValidationContext(appItem, dataServiceProvider));

        forms.push(applicantInfo);

        var applicantExchange: Form = {
            form: appItem.applicationManager.application.applicantExchange,
            formManager: appItem.applicationManager,
            formMenuNavItems: [{
                isApplicationTitle: false,
                label: moduleContext.resourceManager.getResourceByKey("CR_APP_00001_SHORT_L"),
            }],
            formUICmp: ApplicantExchangeUI,
            formValidator: new ApplicantExchangeValidator(),
            state: FormState.New,
            order: applicantExchangeOrderNumber,
            isMain: false,
            canEdit: true,
            canDelete: false
        }

        applicantExchange.formValidator.setValidationContext(this.getValidationContext(appItem, dataServiceProvider));

        forms.push(applicantExchange);

        return forms;
    }

    getApplicationManager(): IApplicationFormManager {
        return new E1FormManager();
    }

    getValidator(): E1Validator {
        return new E1Validator();
    }

    get applicationType(): ApplicationFormTypes {
        return ApplicationFormTypes.E1;
    }
}