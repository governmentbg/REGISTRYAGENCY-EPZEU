import { ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicationFormBaseManager } from 'EPZEU.CR.Domain';
import { AppointingDemandDocuments } from '../Models/ModelsAutoGenerated';

export interface IAppointingDemandDocumentsFormManager{
    getDocumentTypeKey: () => string;
    hasApplicantExcange: () => boolean;
    hasActiveExperts: () => boolean;
    hasReleaseReasons: () => boolean;
}

export function IsAppointingDemandDocumentsFormManager(obj: IAppointingDemandDocumentsFormManager | any): obj is IAppointingDemandDocumentsFormManager {
    return obj && (ObjectHelper.isSubClassOf(obj, AppointingDemandDocumentsFormManager));
}

export class AppointingDemandDocumentsFormManager extends ApplicationFormBaseManager<AppointingDemandDocuments> implements IAppointingDemandDocumentsFormManager {

    protected createApplication(obj: any): AppointingDemandDocuments {
        return new AppointingDemandDocuments(obj);
    }

    public getDocumentTypeKey(): string {

        switch (this.application.appType) {
            case ApplicationFormTypes.AppointingDeclaration: return "CR_GL_DECLARATION_CONSENT_L";
            case ApplicationFormTypes.AppointingReportAndExamination: return "CR_GL_REPORT_EXPERTISE_L";
            case ApplicationFormTypes.AppointingRequestForCorrection: return "CR_GL_REQUEST_ADJUSTMENT_APPOINTMENT_L";
            case ApplicationFormTypes.AppointingControllerReward: return "CR_GL_REQUEST_REMUNERATION_CONTROLLER_L";
            case ApplicationFormTypes.AppointingReleaseDeposit: return "CR_GL_REQUEST_DEPOSIT_RELEASE_L";
            case ApplicationFormTypes.AppointingChangeRequest: return "CR_GL_REQUEST_CHANGE_PERSON_L";
            case ApplicationFormTypes.ReleaseAppointingExpert: return "CR_GL_INABILITY_OF_PERSON_L";
            case ApplicationFormTypes.AppointingPaidDeposit: return "CR_GL_ACCEPTANCE_DEPOSIT_L";
            case ApplicationFormTypes.AttitudeOfChangeRequest: return "CR_GL_OPINION_REQUEST_CHANGE_PERSION_L";
            case ApplicationFormTypes.NotificationOfLackOfMeans: return "CR_GL_NOTIFICATION_LACK_FUNDS_L";
            case ApplicationFormTypes.AppointingContactAddressChange: return "CR_GL_NOTIFICATION_CHANGE_CORRESPONDENCE_ADDRESS_L";
            case ApplicationFormTypes.NotificationOfExaminationImpossibility: return "CR_GL_ACKNOWLEDGE_EXPERT_CANNOT_TAKE_EXPERTISE_ON_TIME_L";

            default: return "";
        }
    }

    public hasApplicantExcange(): boolean {
        switch (this.application.appType) {
            case ApplicationFormTypes.AppointingRequestForCorrection:
            case ApplicationFormTypes.AppointingControllerReward:
            case ApplicationFormTypes.AppointingReleaseDeposit:
            case ApplicationFormTypes.AppointingChangeRequest:
            case ApplicationFormTypes.ReleaseAppointingExpert:
            case ApplicationFormTypes.AppointingPaidDeposit:
            case ApplicationFormTypes.AppointingContactAddressChange:
                return true;
        }

        return false;
    }

    public hasActiveExperts(): boolean {

        switch (this.application.appType) {
            case ApplicationFormTypes.AppointingPaidDeposit: 
            case ApplicationFormTypes.AppointingRequestForCorrection: 
            case ApplicationFormTypes.AppointingControllerReward: 
            case ApplicationFormTypes.AppointingReleaseDeposit: 
            case ApplicationFormTypes.AppointingContactAddressChange: 
            case ApplicationFormTypes.NotificationOfExaminationImpossibility: 
            case ApplicationFormTypes.AppointingReportAndExamination: 
            case ApplicationFormTypes.NotificationOfLackOfMeans: 
                return false;
        }

        return true;
    }

    public hasReleaseReasons(): boolean{
        switch (this.application.appType) {
            case ApplicationFormTypes.ReleaseAppointingExpert:
            case ApplicationFormTypes.AppointingChangeRequest:
                return true;
        }

        return false;
    }
}