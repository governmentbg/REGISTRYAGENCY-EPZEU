import * as moment from 'moment'
import { observable, computed } from 'mobx'
import { TypeSystem, BaseDataModel } from 'Cnsys.Core'
import { ApplicationFormBase, Person, Address, Passport, OutgoingNumber, IndentTypes  } from 'EPZEU.CR.Domain'
import { moduleContext } from '../ModuleContext'
import { ActSenderType } from './ModelsAutoGenerated'
import { ApplicationStatuses, ApplicationInfo } from 'EPZEU.CR.Core';


@TypeSystem.typeDecorator('IncomingRequestForCorrectionSearchCriteria', moduleContext.moduleName)
export class IncomingRequestForCorrectionSearchCriteria extends BaseDataModel {

    @observable private _enableIncomingNumber: boolean = null;

    @TypeSystem.propertyDecorator('boolean')
    public set enableIncomingNumber(val: boolean) {
        this._enableIncomingNumber = val;
    }

    public get enableIncomingNumber(): boolean {
        return this._enableIncomingNumber;
    }

    @observable private _enableEntryNumber: boolean = null;

    @TypeSystem.propertyDecorator('boolean')
    public set enableEntryNumber(val: boolean) {
        this._enableEntryNumber = val;
    }

    public get enableEntryNumber(): boolean {
        return this._enableEntryNumber;
    }

    @observable private _incomingNumber: string = null;

    @TypeSystem.propertyDecorator('string')
    public set incomingNumber(val: string) {
        this._incomingNumber = val;
    }

    public get incomingNumber(): string {
        return this._incomingNumber;
    }

    @observable private _entryNumber: string = null;

    @TypeSystem.propertyDecorator('string')
    public set entryNumber(val: string) {
        this._entryNumber = val;
    }

    public get entryNumber(): string {
        return this._entryNumber;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}

@TypeSystem.typeDecorator('IncomingRequestForCorrectionSearchResults', moduleContext.moduleName)
export class IncomingRequestForCorrectionSearchResults extends BaseDataModel {

    @observable private _incomingRequestForCorrectionSearchResults: IncomingRequestForCorrectionSearchResult[] = null;

    @TypeSystem.propertyArrayDecorator(IncomingRequestForCorrectionSearchResult ? IncomingRequestForCorrectionSearchResult : moduleContext.moduleName + '.' + 'IncomingRequestForCorrectionSearchResult')
    public set incomingRequestForCorrectionSearchResults(val: IncomingRequestForCorrectionSearchResult[]) {
        this._incomingRequestForCorrectionSearchResults = val;
    }

    public get incomingRequestForCorrectionSearchResults(): IncomingRequestForCorrectionSearchResult[] {
        return this._incomingRequestForCorrectionSearchResults;
    }

    @observable private _applicationInfo: ApplicationInfo = null;

    @TypeSystem.propertyDecorator(ApplicationInfo ? ApplicationInfo : moduleContext.moduleName + '.' + 'ApplicationInfo')
    public set applicationInfo(val: ApplicationInfo) {
        this._applicationInfo = val;
    }

    public get applicationInfo(): ApplicationInfo {
        return this._applicationInfo;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}

@TypeSystem.typeDecorator('IncomingRequestForCorrectionSearchResult', moduleContext.moduleName)
export class IncomingRequestForCorrectionSearchResult extends BaseDataModel {

    @observable private _entryNumber: string = null;

    @TypeSystem.propertyDecorator('string')
    public set entryNumber(val: string) {
        this._entryNumber = val;
    }

    public get entryNumber(): string {
        return this._entryNumber;
    }

    @observable private _indent: string = null;

    @TypeSystem.propertyDecorator('string')
    public set indent(val: string) {
        this._indent = val;
    }

    public get indent(): string {
        return this._indent;
    }

    @observable private _name: string = null;

    @TypeSystem.propertyDecorator('string')
    public set name(val: string) {
        this._name = val;
    }

    public get name(): string {
        return this._name;
    }

    @observable private _isSelected: boolean = null;

    @TypeSystem.propertyDecorator('boolean')
    public set isSelected(val: boolean) {
        this._isSelected = val;
    }

    public get isSelected(): boolean {
        return this._isSelected;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}

@TypeSystem.typeDecorator('IncomingRequestForCorrectionSearch', moduleContext.moduleName)
export class IncomingRequestForCorrectionSearch extends BaseDataModel {

    @observable private _searchCriteria: IncomingRequestForCorrectionSearchCriteria = null;

    @TypeSystem.propertyDecorator(IncomingRequestForCorrectionSearchCriteria ? IncomingRequestForCorrectionSearchCriteria : moduleContext.moduleName + '.' + 'IncomingRequestForCorrectionSearchCriteria')
    public set searchCriteria(val: IncomingRequestForCorrectionSearchCriteria) {
        this._searchCriteria = val;
    }

    public get searchCriteria(): IncomingRequestForCorrectionSearchCriteria {
        return this._searchCriteria;
    }

    @observable private _incomingRequestForCorrectionSearchResults: IncomingRequestForCorrectionSearchResults = null;

    @TypeSystem.propertyDecorator(IncomingRequestForCorrectionSearchResults ? IncomingRequestForCorrectionSearchResults : moduleContext.moduleName + '.' + 'IncomingRequestForCorrectionSearchResults')
    public set incomingRequestForCorrectionSearchResults(val: IncomingRequestForCorrectionSearchResults) {
        this._incomingRequestForCorrectionSearchResults = val;
    }

    public get incomingRequestForCorrectionSearchResults(): IncomingRequestForCorrectionSearchResults {
        return this._incomingRequestForCorrectionSearchResults;
    }

    constructor(obj?: any) {
        super(obj)

        this.copyFrom(obj);
    }
}