import { ErrorLevels, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicantExchangeValidator, ApplicantInfoValidator, ApplicationFormBaseValidator, IApplicationFormValidationContext } from 'EPZEU.CR.Domain';
import { isMoment } from 'moment';
import { AppointingDemandDocumentsFormManager } from '../../Common/AppointingDemandDocumentsFormManager';
import { AppointingDemandDocuments, ReleaseReaseonsX110 } from '../ModelsAutoGenerated';

export class AppointingDemandDocumentsValidator extends ApplicationFormBaseValidator<AppointingDemandDocuments> {

    possibleActAttachedDocuments: any = null;

    constructor(appType: ApplicationFormTypes) {
        super();

        this.ruleFor(m => m.applicantInfo).setValidator(new ApplicantInfoValidator());

        if (appType == ApplicationFormTypes.ReleaseAppointingExpert || appType == ApplicationFormTypes.AppointingChangeRequest)
            this.ruleFor(m => m.releaseReaseonsX110).setValidator(new ReleaseReaseonsX110Validator());
    }

    setValidationContext(validationContext: IApplicationFormValidationContext): void {
        super.setValidationContext(validationContext);

        this.getValidationContext().applicationManager.getPossibleAttachedDocumentTypes()
            .bind(this).then(s => {
                this.possibleActAttachedDocuments = s.filter(s => s.minOccurs == 1 && s.maxOccurs == 1);
            })
    }

    public validate(obj: AppointingDemandDocuments): boolean {

        let isValid = super.validate(obj);

        //Когато е избрано назначено лице не трябва да имаме секция за адреса
        var hasApplicantExchangeSection = (<AppointingDemandDocumentsFormManager>this.validationContext.applicationManager).hasApplicantExcange()
            && obj.applicantInfo && obj.applicantInfo.applicantCapacity && !obj.applicantInfo.applicantCapacity.assignedExpert

        if (hasApplicantExchangeSection) {
            const isValidApplicantExchange = new ApplicantExchangeValidator();
            isValidApplicantExchange.setValidationContext(this.getValidationContext())

            if (!isValidApplicantExchange.validate(obj.applicantExchange))
                isValid = false;
        }

        if (this.possibleActAttachedDocuments != null) {

            let hasAttachedAct = false;

            for (var i = 0; i < this.possibleActAttachedDocuments.length; i++) {
                if (obj.documents.filter(d => d.documentTypeID == this.possibleActAttachedDocuments[i].documentTypeID).length > 0)
                    hasAttachedAct = true;
            }

            if (!hasAttachedAct) {
                if (obj.appType == ApplicationFormTypes.AppointingReportAndExamination)
                    obj.addError('documents', this.getMessage('CR_APP_00179_E'));
                else
                    obj.addError('documents', this.getMessage('GL_NOATTACHED_DOCUMENTS_E'));

                isValid = false;
            }
        }

        obj.setAllErrorsLevel(ErrorLevels.Error);

        return isValid;
    }
}

class ReleaseReaseonsX110Validator extends EPZEUBaseValidator<ReleaseReaseonsX110, IApplicationFormValidationContext>{
    public validate(obj: ReleaseReaseonsX110): boolean {

        var isValid = super.validate(obj);
        var mainApp = (<AppointingDemandDocuments>this.validationContext.applicationManager.application);

        if (ObjectHelper.isNullOrUndefined(mainApp.outgoingNumberX108.parts) || ObjectHelper.isStringNullOrEmpty(mainApp.outgoingNumberX108.parts.incomingNumber)
            || !isMoment(mainApp.outgoingNumberX108.parts.outgoingDate)) {

            return true;
        }

        if (ObjectHelper.isStringNullOrEmpty(obj.releaseReasonText) || ObjectHelper.isNullOrUndefined(obj.releaseReasonID)) {
            isValid = false;
            obj.addError(this.getMessage("CR_APP_CHOOSE_REASON_RELEASE_E"), ErrorLevels.Error)
        }

        return isValid;
    }
}