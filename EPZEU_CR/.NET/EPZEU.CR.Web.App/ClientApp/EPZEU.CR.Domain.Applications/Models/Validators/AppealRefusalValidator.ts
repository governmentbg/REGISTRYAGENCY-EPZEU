import { ErrorLevels } from 'Cnsys.Core';
import { ApplicantCapacityValidator, ApplicationFormBaseValidator, DomainModelHepler, IApplicationFormValidationContext } from 'EPZEU.CR.Domain';
import { AppealRefusal } from '../ModelsAutoGenerated';
import { ComplaintPersonApplicantsValidator } from './ComplaintPersonApplicantsValidator';
import { RefusalValidator } from './RefusalValidator';

export class AppealRefusalValidator extends ApplicationFormBaseValidator<AppealRefusal> {

    private possibleComplaintAttachedDocuments: any = null;

    constructor() {
        super();

        this.ruleFor(m => m.applicantInfo.applicantCapacity).setValidator(new ApplicantCapacityValidator());
        this.ruleFor(m => m.complaintPersons).setValidator(new ComplaintPersonApplicantsValidator());
        this.ruleFor(m => m.refusal).setValidator(new RefusalValidator());
    }

    setValidationContext(validationContext: IApplicationFormValidationContext): void {
        super.setValidationContext(validationContext);

        this.getValidationContext().applicationManager.getPossibleAttachedDocumentTypes()
            .bind(this).then(s => {
                this.possibleComplaintAttachedDocuments = s.filter(s => s.minOccurs == 1 && s.maxOccurs == 1);
            })
    }

    public validate(obj: AppealRefusal): boolean {
        let isValid = super.validate(obj);
        let that = this;

        if (!obj.complaintPersons
            || !obj.complaintPersons.complaintPersonsList
            || obj.complaintPersons.complaintPersonsList.length < 1
            || obj.complaintPersons.complaintPersonsList.filter(t => !DomainModelHepler.isObjectEmpty(t)).length < 1) {
            obj.complaintPersons.addError(that.getMessage('CR_APP_00025_E')); //Изберете поне един жалбоподател
            isValid = false;
        } else if (obj.complaintPersons.complaintPersonsList.filter(t => t.includeApplicant == true).length < 1) {
            obj.complaintPersons.addError(that.getMessage('CR_APP_00183_E')); //Изберете поне един заявител
            isValid = false;
        }

        if (obj.documents == null || obj.documents.length == 0) {
            obj.addError('documents', that.getMessage('GL_NOATTACHED_DOCUMENTS_E')); // Няма приложени документи.
            isValid = false;
        } else {
            if (this.possibleComplaintAttachedDocuments != null) {

                this.possibleComplaintAttachedDocuments.forEach(function (possibleDoc: any) {

                    let possibleActDocCount: number = obj.documents.filter(d => d.documentTypeID == possibleDoc.documentTypeID).length;

                    if (possibleActDocCount < possibleDoc.minOccurs || possibleActDocCount > possibleDoc.maxOccurs) {
                        obj.addError('documents', that.getMessage('GL_NOATTACHED_DOCUMENTS_E')); // Няма приложени документи.
                        isValid = false;
                    }
                });
            }
        }

        obj.setAllErrorsLevel(ErrorLevels.Error);

        return isValid;
    }
}