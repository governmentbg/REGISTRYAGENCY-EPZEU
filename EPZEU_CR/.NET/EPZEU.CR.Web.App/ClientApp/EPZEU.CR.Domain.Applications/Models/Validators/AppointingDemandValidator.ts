import { ObjectHelper, ErrorLevels } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { ApplicantExchangeValidator, ApplicantInfoValidator, ApplicationFormBaseValidator, IApplicationFormValidationContext, IndentTypes } from 'EPZEU.CR.Domain';
import { AppointingType, AppointingDemand, AppointingExpertType } from '../ModelsAutoGenerated';

export class AppointingDemandValidator extends ApplicationFormBaseValidator<AppointingDemand> {

    possibleActAttachedDocuments: any = null;

    constructor() {
        super();

        this.ruleFor(m => m.applicantInfo).setValidator(new ApplicantInfoValidator());
        this.ruleFor(m => m.applicantExchange).setValidator(new ApplicantExchangeValidator());
        this.ruleFor(m => m.appointingType).setValidator(new AppointingTypeValidator());
    }

    setValidationContext(validationContext: IApplicationFormValidationContext): void {
        super.setValidationContext(validationContext);

        this.getValidationContext().applicationManager.getPossibleAttachedDocumentTypes()
            .bind(this).then(s => {
                this.possibleActAttachedDocuments = s.filter(s => s.minOccurs == 1 && s.maxOccurs == 1);
            })
    }

    public validate(obj: AppointingDemand): boolean {
        let isValid = super.validate(obj);

        if (this.possibleActAttachedDocuments != null) {

            let hasAttachedAct = false;

            for (var i = 0; i < this.possibleActAttachedDocuments.length; i++) {
                if (obj.documents.filter(d => d.documentTypeID == this.possibleActAttachedDocuments[i].documentTypeID).length > 0)
                    hasAttachedAct = true;
            }

            if (!hasAttachedAct) {
                obj.addError('documents', this.getMessage('GL_NOATTACHED_DOCUMENTS_E'), ErrorLevels.Error);

                isValid = false;
            }
        }

        if (!ObjectHelper.isNullOrUndefined(obj.appointingType) && obj.appointingType.appointingExpertType == AppointingExpertType.Surveyor) {

            for (var i = 0; i < obj.appointingFirms.appointingFirmList.length; i++) {
                ObjectHelper.isStringNullOrEmpty(obj.appointingFirms.appointingFirmList[i].clearErrors(true));

                if (!ObjectHelper.isStringNullOrEmpty(obj.appointingFirms.appointingFirmList[i].firm.indent)
                    && obj.appointingFirms.appointingFirmList[i].firm.indentType != IndentTypes.UIC) {
                    isValid = false;
                    obj.appointingFirms.appointingFirmList[i].addError(this.getMessage('GL_INVALID_IDENTIFIER_E'), ErrorLevels.Error)
                }

                if (ObjectHelper.isStringNullOrEmpty(obj.appointingFirms.appointingFirmList[i].firm.indent)
                    && ObjectHelper.isStringNullOrEmpty(obj.appointingFirms.appointingFirmList[i].firm.nameAndLegalFormText)
                    && obj.appointingFirms.appointingFirmList.length > 1) {

                    isValid = false;
                    obj.appointingFirms.appointingFirmList[i].addError(this.getMessage('CR_APP_00063_E'), ErrorLevels.Error);//Попълнете данните за полето или го изтрийте.
                }
            }
        }

        return isValid;
    }
}

class AppointingTypeValidator extends EPZEUBaseValidator<AppointingType, IApplicationFormValidationContext>{

    public validate(obj: AppointingType): boolean {

        let isValid = super.validate(obj);

        if (!obj.appointingExpertType) {
            obj.addError(this.getMessage('CR_APP_SELECT_TYPE_OFFICIAL_APPOINMENT_E'), ErrorLevels.Error)

            isValid = false;
        }

        return isValid;
    }
}