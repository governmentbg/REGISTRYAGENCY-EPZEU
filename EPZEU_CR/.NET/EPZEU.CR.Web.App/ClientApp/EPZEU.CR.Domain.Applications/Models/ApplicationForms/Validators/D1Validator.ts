import { ErrorLevels, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormBaseValidator, ApplicationFormFieldsBaseValidator, ProcessStates } from 'EPZEU.CR.Domain';
import { D1Fields } from '../../ModelsAutoGenerated';
import { F027b_EraseReservationValidator } from '../../Validators/F027b_EraseReservationValidator';
import { F029_PersonConcernedValidator } from '../../Validators/F029_PersonConcernedValidator';
import { D1 } from '../ApplicationForms';
import { F002_CompanyValidator } from '../../Validators/F002_CompanyValidator';

export class D1Validator extends ApplicationFormBaseValidator<D1> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new D1FieldsValidator());
    }

    public validate(obj: D1): boolean {
        let isValid = super.validate(obj);

        if (obj.documents == null || obj.documents.length == 0) {
            obj.addError('documents', this.getMessage('GL_NOATTACHED_DOCUMENTS_E'));
            isValid = false;
        }

        return isValid;
    }
}

export class D1FieldsValidator extends ApplicationFormFieldsBaseValidator<D1Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.company).setValidator(new F002_CompanyValidator());
		this.ruleFor(m => m.eraseReservation).setValidator(new F027b_EraseReservationValidator());
		this.ruleFor(m => m.personConcerned).setValidator(new F029_PersonConcernedValidator());
    }

    public validate(obj: D1Fields): boolean {
        let isValid = super.validate(obj);

        if (this.validationContext.processStates == ProcessStates.ForChange && ObjectHelper.isStringNullOrEmpty(obj.company.text)) {
            obj.company.addError('text', this.getMessage('CR_APP_INPUT_COMPANY_NAME_E'));
            isValid = false;
        }

        obj.setAllErrorsLevel(ErrorLevels.Error);

        return isValid;
    }
}