import { BaseProps } from 'Cnsys.UI.React';
import { EPZEUBaseComponent, ValidationSummaryErrorsPreviewUI } from 'EPZEU.Core';
import { ApplicantCapacityUI, ApplicantsUI, ApplicationFormContextProviderProps, DocumentsUI, SectionTitleUI, withApplicationFormContext } from 'EPZEU.CR.Domain';
import { observer } from "mobx-react";
import * as React from "react";
import { AppealRefusal } from '../Models/ModelsAutoGenerated';
import { ComplaintPersonsUI } from './ComplaintPersonUI';
import { RefusalUI } from './RefusalUI';

interface AppealRefusalUIProps extends BaseProps, ApplicationFormContextProviderProps {
}

@observer class AppealRefusalUIImpl extends EPZEUBaseComponent<AppealRefusalUIProps, AppealRefusal> {

    renderEdit(): JSX.Element {

        return (<>
            <SectionTitleUI anchor="complaintPerson" titleKey="CR_GL_COMPLAINANT_L" />
            <div className="field-container">
                <ComplaintPersonsUI {...this.bind(m => m.complaintPersons)} />
            </div>
            <ApplicantCapacityUI {...this.bind(m => m.applicantInfo.applicantCapacity)} />
            <RefusalUI {...this.bind(m => m.refusal)} />
            <SectionTitleUI titleKey={'GL_APPLIEDS_L'} anchor="documents" />
            <DocumentsUI {...this.bind(m => m.documents)} labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} disableDocumentRefusal={true} />
        </>);
    }

    renderDisplay(): JSX.Element {
        return (<>
            <SectionTitleUI anchor="interestedPerson" titleKey="CR_GL_COMPLAINANT_L" isForPreview={true} />
            <div className="field-container">
                <ComplaintPersonsUI {...this.bind(m => m.complaintPersons)} />
                <ValidationSummaryErrorsPreviewUI errors={this.model.complaintPersons.getModelErrors()} />
            </div>
            {this.model.applicantInfo && this.model.applicantInfo.applicants && this.model.applicantInfo.applicants.applicantsList && this.model.applicantInfo.applicants.applicantsList.length > 0 ?
                <div className="field-container">
                    <h3 className="field-title field-title--preview">
                        {this.getResource('GL_APPLICANT_DATA_L')}
                    </h3>
                    <ApplicantsUI {...this.bind(m => m.applicantInfo.applicants)} />
                </div>
                : null
            }

            {this.model.applicantInfo &&  <ApplicantCapacityUI {...this.bind(m => m.applicantInfo.applicantCapacity)} />}
            <RefusalUI {...this.bind(m => m.refusal)} />
            {this.props.applicationManager.processContext.isDraftApplicationProcess()
                && <>
                    <SectionTitleUI titleKey={'CR_APP_ATTACHED_DOCUMENTS_L'} anchor="documents" isForPreview={true} />
                    <DocumentsUI {...this.bind(m => m.documents)} labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} />
                </>
            }

        </>);
    }
}

export const AppealRefusalUI = withApplicationFormContext(AppealRefusalUIImpl);