import { ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from "Cnsys.UI.React";
import { EPZEUBaseComponent, IDataServiceProviderProps, Nomenclatures, ValidationSummary, ValidationSummaryStrategy, withDataServiceProvider } from 'EPZEU.Core';
import { ApplicationFormTypes, ApplicationsService } from "EPZEU.CR.Core";
import { Address, ApplicantCapacityUI, ApplicantExchange, ApplicantExchangeUI, ApplicantUIImpl, ApplicationFormContextProviderProps, DocumentsUI, getApplicationStatusCode, SectionInfoUI, SectionTitleUI, withApplicationFormContext } from 'EPZEU.CR.Domain';
import { action } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { IsAppointingDemandDocumentsFormManager } from "../Common/AppointingDemandDocumentsFormManager";
import { AppointingDemandDocuments, RenewAssignmentExchange } from "../Models/ModelsAutoGenerated";
import { ReleaseReaseonsX110UI } from "./ReleaseReaseonsX110UI";
import { RenewAssignmentExchangeUI } from "./RenewAssignmentExchangeUI";

interface AppointingDemandDocumentsUIProps extends BaseProps, ApplicationFormContextProviderProps, IDataServiceProviderProps, AsyncUIProps {
}

var infoTextKeys1 = ['CR_APP_00051_I'];
const applicantInfoValPropNames = ['birthPlace', 'address'];

@observer class AppointingDemandDocumentsUIImpl extends EPZEUBaseComponent<AppointingDemandDocumentsUIProps, AppointingDemandDocuments> {

    constructor(props: AppointingDemandDocumentsUIProps) {
        super(props);

        let that = this;

        if (this.props.applicationManager.application.appType == ApplicationFormTypes.AttitudeOfChangeRequest && !this.model.assignmentCorrectionNumber.applicationStatuses) {
            this.props.registerAsyncOperation(this.props.dataSrvProvider.getDataService<ApplicationsService>(ApplicationsService).getApplicationInfoByIncommingNumber(this.model.assignmentCorrectionNumber.value)
                .then((appInfo) => {

                    if (appInfo)
                        that.model.assignmentCorrectionNumber.applicationStatuses = appInfo.applicationStatus;
                }))
        }
    }

    @action componentWillUpdate() {
        if (this.model.applicantInfo && this.model.applicantInfo.applicantCapacity && this.model.applicantInfo.applicantCapacity.assignedExpert === true) {
            this.model.applicantExchange = null;
            this.model.renewAssignmentExchange = null;
        } else if (ObjectHelper.isNullOrUndefined(this.model.applicantExchange) || ObjectHelper.isNullOrUndefined(this.model.applicantExchange.agree) || ObjectHelper.isNullOrUndefined(this.model.applicantExchange.notAgree)) {
            this.model.applicantExchange = new ApplicantExchange();
            this.model.applicantExchange.address = new Address();

            this.props.registerAsyncOperation(Nomenclatures.getBGCountry().then(bgCountry => {
                this.model.applicantExchange.address.country = bgCountry.name;
                this.model.applicantExchange.address.countryCode = bgCountry.code;
                this.model.applicantExchange.address.countryID = bgCountry.id;
            }));

            this.model.applicantExchange.agree = true;
            this.model.applicantExchange.notAgree = false;
            this.model.renewAssignmentExchange = new RenewAssignmentExchange();
            this.model.renewAssignmentExchange.cheked = false;
        }
    }

    renderEdit(): JSX.Element {

        return (<>
            <SectionTitleUI anchor={"appointmentData"} titleKey={"CR_APP_APPOINTMENT_DATA_L"} />

            <div className="field-container">
                <div className="row">
                    <div className="form-group col-12">
                        <label className="field-title field-title--form">{this.getResource("GL_DOCUMENT_KIND_L")}</label>
                        <p className="field-text">{IsAppointingDemandDocumentsFormManager(this.props.applicationManager) ? this.getResource(this.props.applicationManager.getDocumentTypeKey()) : null}</p>
                    </div>
                </div>
            </div>
            {
                this.model.outgoingNumberX108
                    && this.model.outgoingNumberX108.parts
                    && !ObjectHelper.isStringNullOrEmpty(this.model.outgoingNumberX108.parts.fullOutgoingNumber)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                <label className="field-title field-title--form">{this.getResource("CR_GL_ACT_APPOINT_NO_L")}</label>
                                <p className="field-text">{this.model.outgoingNumberX108.parts.fullOutgoingNumber}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
            {
                this.model.assignedExperts &&
                    this.model.assignedExperts.assignedExpertList &&
                    this.model.assignedExperts.assignedExpertList.length > 0 &&
                    !ObjectHelper.isStringNullOrEmpty(this.model.assignedExperts.assignedExpertList[0].name)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                <label className="field-title field-title--form">{this.getResource("CR_APP_ACT_APPOINTED_PERSONS_L")}</label>
                                <p className="field-text">{this.model.assignedExperts.assignedExpertList[0].name}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
            {
                this.model.assignmentCorrectionNumber && !ObjectHelper.isStringNullOrEmpty(this.model.assignmentCorrectionNumber.value)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                <label className="field-title field-title--form">{this.getResource("CR_APP_INCOMING_NO_CHANGE_STATUS_L")}</label>
                                <p className="field-text">{`${this.model.assignmentCorrectionNumber.value}, ${this.model.assignmentCorrectionNumber.applicationStatuses ? this.getResource(getApplicationStatusCode(this.model.assignmentCorrectionNumber.applicationStatuses)) : null}`}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
            {
                IsAppointingDemandDocumentsFormManager(this.props.applicationManager)
                    ? this.props.applicationManager.hasReleaseReasons()
                        ? <ReleaseReaseonsX110UI {...this.bind(x => x.releaseReaseonsX110)} expertTypeId={this.model.outgoingNumberX108.appointingExpertType} />
                        : null
                    : null
            }
            <SectionTitleUI anchor={"applicant"} titleKey={"GL_APPLICANT_L"} />
            <SectionInfoUI infoTextKey={infoTextKeys1} />
            <ValidationSummary {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} strategy={ValidationSummaryStrategy.excludeAllExcept} propNames={applicantInfoValPropNames} includeErrorsRecursive={true} />
            <ApplicantUIImpl  {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} />
            <ApplicantCapacityUI titleKey="GL_QUALITY_APPLICANT_L" {...this.bind(m => m.applicantInfo.applicantCapacity)} />
            {
                IsAppointingDemandDocumentsFormManager(this.props.applicationManager)
                    ? this.props.applicationManager.hasApplicantExcange() && !this.model.applicantInfo.applicantCapacity.assignedExpert
                        ? <><ApplicantExchangeUI anchor="applicantExchange" {...this.bind(m => m.applicantExchange)} />
                            <RenewAssignmentExchangeUI {...this.bind(m => m.renewAssignmentExchange)}
                                disabledCheckBox={this.props.applicationManager.application.appType == ApplicationFormTypes.AppointingContactAddressChange}
                                isInitialChecked={this.props.applicationManager.application.appType == ApplicationFormTypes.AppointingContactAddressChange}
                            />
                        </>
                        : null
                    : null
            }
            <SectionTitleUI titleKey={'GL_APPLIEDS_L'} anchor="documents" />
            <DocumentsUI {...this.bind(m => m.documents)} labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} disableDocumentRefusal={true} />
        </>);
    }

    renderDisplay(): JSX.Element {
        return (<>
            <SectionTitleUI anchor={"appointmentData"} titleKey={"CR_APP_APPOINTMENT_DATA_L"} isForPreview />
            <div className="field-container">
                <h3 className="field-title field-title--preview">{this.getResource("GL_DOCUMENT_KIND_L")}</h3>
                <div className="record-container record-container--preview">
                    <p className="field-text"> {IsAppointingDemandDocumentsFormManager(this.props.applicationManager) ? this.getResource(this.props.applicationManager.getDocumentTypeKey()) : ""}</p>
                </div>
            </div>
            {
                this.model.outgoingNumberX108
                    && this.model.outgoingNumberX108.parts
                    && !ObjectHelper.isStringNullOrEmpty(this.model.outgoingNumberX108.parts.fullOutgoingNumber)
                    ? <div className="field-container">
                        <h3 className="field-title field-title--preview">{this.getResource("CR_GL_ACT_APPOINT_NO_L")}</h3>
                        <div className="record-container record-container--preview">
                            <p className="field-text">{this.model.outgoingNumberX108.parts.fullOutgoingNumber}</p>
                        </div>
                    </div>
                    : null
            }
            {
                this.model.assignedExperts &&
                    this.model.assignedExperts.assignedExpertList &&
                    this.model.assignedExperts.assignedExpertList.length > 0 &&
                    !ObjectHelper.isStringNullOrEmpty(this.model.assignedExperts.assignedExpertList[0].name)
                    ? <div className="field-container">
                        <h3 className="field-title field-title--preview">{this.getResource("CR_APP_ACT_APPOINTED_PERSONS_L")}</h3>
                        <div className="record-container record-container--preview">
                            <p className="field-text">{this.model.assignedExperts.assignedExpertList[0].name}</p>
                        </div>
                    </div>
                    : null
            }
            {
                this.model.assignmentCorrectionNumber && !ObjectHelper.isStringNullOrEmpty(this.model.assignmentCorrectionNumber.value)
                    ? <div className="field-container">
                        <h3 className="field-title field-title--preview">{this.getResource("CR_APP_INCOMING_NO_CHANGE_STATUS_L")}</h3>
                        <div className="record-container record-container--preview">
                            <p className="field-text">{`${this.model.assignmentCorrectionNumber.value}, ${this.model.assignmentCorrectionNumber.applicationStatuses ? this.getResource(getApplicationStatusCode(this.model.assignmentCorrectionNumber.applicationStatuses)) : null}`}</p>
                        </div>
                    </div>
                    : null
            }
            {
                IsAppointingDemandDocumentsFormManager(this.props.applicationManager)
                && this.props.applicationManager.hasReleaseReasons()
                && this.model.outgoingNumberX108
                && <ReleaseReaseonsX110UI {...this.bind(x => x.releaseReaseonsX110)} expertTypeId={this.model.outgoingNumberX108.appointingExpertType} />
            }
            <SectionTitleUI anchor={"applicant"} titleKey={"GL_APPLICANT_L"} isForPreview />
            {
                this.model.applicantInfo && this.model.applicantInfo.applicants && this.model.applicantInfo.applicants.applicantsList && this.model.applicantInfo.applicants.applicantsList.length > 0
                && <><ApplicantUIImpl  {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} />
                    <ValidationSummary  {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} strategy={ValidationSummaryStrategy.includeAllExcept} includeErrorsRecursive={true} />
                </>
            }
            {this.model.applicantInfo && <ApplicantCapacityUI titleKey="GL_QUALITY_APPLICANT_L" {...this.bind(m => m.applicantInfo.applicantCapacity)} />}
            {
                IsAppointingDemandDocumentsFormManager(this.props.applicationManager)
                && this.props.applicationManager.hasApplicantExcange()
                && this.model.applicantInfo && this.model.applicantInfo.applicantCapacity && !this.model.applicantInfo.applicantCapacity.assignedExpert
                && <>
                    <ApplicantExchangeUI anchor="address" {...this.bind(m => m.applicantExchange)} />
                    <RenewAssignmentExchangeUI {...this.bind(m => m.renewAssignmentExchange)} />
                </>
            }

            {this.props.applicationManager.processContext.isDraftApplicationProcess()
                && <>
                    <SectionTitleUI titleKey={'CR_APP_ATTACHED_DOCUMENTS_L'} anchor="documents" isForPreview={true} />
                    <DocumentsUI labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} {...this.bind(m => m.documents)} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} />
                </>
            }
        </>);
    }
}

export const AppointingDemandDocumentsUI = withApplicationFormContext(withDataServiceProvider(withAsyncFrame(AppointingDemandDocumentsUIImpl)))