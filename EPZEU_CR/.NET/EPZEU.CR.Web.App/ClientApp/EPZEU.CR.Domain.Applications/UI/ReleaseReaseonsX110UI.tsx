import { ObjectHelper, SelectListItem } from "Cnsys.Core";
import { AsyncUIProps, BaseProps, withAsyncFrame } from "Cnsys.UI.React";
import { attributesClassFormControl, EPZEUBaseComponent, Nomenclatures, ReleaseReasons, ValidationSummary } from 'EPZEU.Core';
import { action, observable, runInAction } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { ReleaseReaseonsX110 } from "../Models/ModelsAutoGenerated";

interface ReleaseReaseonsX110Props extends BaseProps, AsyncUIProps {
    expertTypeId?: number;
}

@observer class ReleaseReaseonsX110Impl extends EPZEUBaseComponent<ReleaseReaseonsX110Props, ReleaseReaseonsX110> {

    private currentExpertTypeId: number = null;
    @observable possibleReleaseReasons: ReleaseReasons[];
    @observable possibleReleaseReasonsItems: SelectListItem[];

    constructor(props: any) {
        super(props);

        this.handleReleaseReasonSelect = this.handleReleaseReasonSelect.bind(this);

        if (ObjectHelper.isNullOrUndefined(this.model))
            this.model = new ReleaseReaseonsX110();

        this.initReleaseReasons();
    }

    componentDidUpdate() {

        if (this.props.expertTypeId && this.props.expertTypeId != this.currentExpertTypeId) {
            this.currentExpertTypeId = this.props.expertTypeId
            this.initReleaseReasons();
        }
    }

    renderEdit() {
        return <>
            <ValidationSummary {...this.bind(m => m)} />
            <div className="field-container">
                <div className="row">
                    <div className="form-group col-6">
                        {
                            this.props.expertTypeId

                                ? <>{this.labelFor(m => m.releaseReasonNote, 'CR_APP_REASON_RELEASE_L', { className: "required-field" })}
                                    {
                                        this.possibleReleaseReasons && this.possibleReleaseReasons.length > 0
                                            ? this.dropDownListFor(m => m.releaseReasonID, this.possibleReleaseReasonsItems, attributesClassFormControl, this.handleReleaseReasonSelect, true, this.getResource("GL_CHOICE_L"))
                                            : <select className="form-control" disabled={true}></select>
                                    }
                                </>
                                : null
                        }
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.releaseReasonNote, 'CR_APP_REASONS_RELEASE_L')}
                        {this.textAreaFor(x => x.releaseReasonNote, null, 3)}
                    </div>
                </div>
            </div>
        </>
    }

    renderDisplay() {
        return <>
            <div className="field-container">
                {
                    this.model.releaseReasonID
                        ? <div className="field-container">
                            <h3 className="field-title field-title--preview">{this.getResource("CR_APP_REASON_RELEASE_L")}</h3>
                            <div className="record-container record-container--preview">
                                <p className="field-text">{this.model.releaseReasonText}</p>
                            </div>
                        </div>
                        : null
                }
                {
                    !ObjectHelper.isStringNullOrEmpty(this.model.releaseReasonNote)
                        ? <div className="field-container">
                            <h3 className="field-title field-title--preview">{this.getResource("CR_APP_REASONS_RELEASE_L")}</h3>
                            <div className="record-container record-container--preview">
                                <p className="field-text">{this.model.releaseReasonNote}</p>
                            </div>
                        </div>
                        : null
                }
                <ValidationSummary {...this.bind(m => m)} />
            </div>
        </>
    }

    @action initReleaseReasons() {

        var that = this;
        this.possibleReleaseReasons = [];

        this.props.registerAsyncOperation(Nomenclatures.getReleaseReasons(x => x.expertTypeID == this.props.expertTypeId).then((releaseReasons) => {
            that.possibleReleaseReasons = releaseReasons;
            that.possibleReleaseReasonsItems = [];

            runInAction(() => {
                if (releaseReasons) {
                    for (var i = 0; i < releaseReasons.length; i++) {
                        let currentReason = releaseReasons[i];

                        that.possibleReleaseReasonsItems.push(new SelectListItem({
                            selected: currentReason.reasonID == that.model.releaseReasonID,
                            text: currentReason.description,
                            value: currentReason.reasonID
                        }))
                    }
                }
            })
        }))
    }

    handleReleaseReasonSelect(e: any) {
        let value = e.target.value;

        if (value) {
            let reasons = this.possibleReleaseReasons.filter(x => x.reasonID == value)

            if (reasons && reasons.length > 0) {
                this.model.releaseReasonID = reasons[0].reasonID;
                this.model.releaseReasonText = reasons[0].description;
            } else
                this.clearModel();

        } else
            this.clearModel();
    }

    clearModel() {
        this.model.releaseReasonID = null;
        this.model.releaseReasonText = null;
    }
}

export const ReleaseReaseonsX110UI = withAsyncFrame(ReleaseReaseonsX110Impl);