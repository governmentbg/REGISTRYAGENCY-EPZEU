import { ObjectHelper } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame, withRouter } from 'Cnsys.UI.React';
import { attributesClassFormControlMaxL14, Button, DataServiceProvider, EPZEUBaseComponent, IDataServiceProviderProps, ValidationSummaryErrors, CMS, PageTypes, Registers, Page } from 'EPZEU.Core';
import { ApplicationFormTypes, ApplicationInfo, ApplicationsService, ApplicationStatuses, DeedSummary, NonApplicationTypes, ApplicationFormTypesBG } from 'EPZEU.CR.Core';
import { FieldContainerProps, ProcessStates, SectionInfoUI, StartUIProps } from 'EPZEU.CR.Domain';
import { action, observable, runInAction } from "mobx";
import { observer } from 'mobx-react';
import * as React from 'react';
import { IncomingNumber } from "../../Models/ModelsAutoGenerated";

interface J1StartProps extends FieldContainerProps, AsyncUIProps, IDataServiceProviderProps, StartUIProps {
}

var infoTextKeys2 = ['CR_APP_00016_I'];

@observer class J1StartUIImpl extends EPZEUBaseComponent<J1StartProps, IncomingNumber> {
    @observable private _pagesInternal: Page[];

    @observable private _mainAppType: string;
    @observable private _selectedUIC: string;
    @observable private _selectedDeedIndex: number;
    @observable private _continue: boolean;

    private _companyName: string;
    private _outgoingNumber: string;
    private _incomingNumber: string;
    private _groupName: string;

    constructor(props: J1StartProps) {
        super(props);

        this.continue = this.continue.bind(this);
        this.loadInfoByIncomingNumber = this.loadInfoByIncomingNumber.bind(this);
        this._selectedDeedIndex = 0;
        this.getInfoByIncomingNumber = this.getInfoByIncomingNumber.bind(this);


        if (!this.model)
            this.model = new IncomingNumber();
    }

    render(): JSX.Element {
        return <div className="page-wrapper">
            <div className="section-wrapper">
                <ValidationSummaryErrors errors={this.props.errorMessages} />
                <ValidationSummaryErrors errors={this.props.asyncErrorMessages} />
                <SectionInfoUI infoTextKey={infoTextKeys2} />
                <div className="field-container">
                    <div className="row">
                        <div className="col">
                            {this.labelFor(m => m.incomingNo, 'GL_APPLICATION_NO_L', { className: 'field-title field-title--form required-field' })}
                        </div>
                    </div>
                    <div id="list-item-0" className="interactive-container interactive-container--form" >
                        <div className="interactive-container__content record-container">
                            <div>
                                <div className="row">
                                    <div className="form-group col col-sm-6 col-lg-4">
                                        {this.textBoxFor(m => m.incomingNo, attributesClassFormControlMaxL14)}
                                    </div>
                                    <div className="form-group col-auto">
                                        <Button type="button" className="btn btn-outline-light text-dark" lableTextKey={"GL_EXTRACT_DATA_L"} onClick={this.loadInfoByIncomingNumber}>
                                            <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i></Button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    {
                        !ObjectHelper.isStringNullOrEmpty(this._mainAppType)
                            ? <div className="field-container">
                                <div className="row">
                                    <div className="form-group col-12">
                                        {this.labelFor(m => m.indent, 'GL_APPLICATION_L', { className: 'field-title field-title--form' })}
                                        <p className="field-text">{this._mainAppType}</p>
                                    </div>
                                </div>
                            </div>
                            : null
                    }
                    {
                        this.model.deeds && this.model.deeds.length > 0
                            ? <div className="field-container">
                                <div className="row">
                                    <div className="form-group col-12">
                                        {this.labelFor(m => m.indent, 'CR_APP_SELECT_BATCH_RETRIVE_L', { className: 'field-title field-title--form' })}
                                        <div className="table-responsive-block">
                                            <table className="table table-borderless table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        {this.model.deeds.length > 1 ? <th></th> : null}
                                                        <th>{this.getResource("CR_GL_COMPANY_ID_L")}</th>
                                                        <th>{this.getResource("CR_GL_COMPANY_NAME_L")}</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {
                                                        this.model.deeds && this.model.deeds.map((item, currentIndex) => {
                                                            return item.uic || item.companyFullName
                                                                ? <tr key={currentIndex}>
                                                                    {
                                                                        this.model.deeds.length > 1
                                                                            ? <td>
                                                                                <div className="custom-control custom-radio" >
                                                                                    <input key={currentIndex} className={"custom-control-input"} type="radio" onChange={this.handleSelectedUICChange.bind(this, item, currentIndex)} id={this._groupName + "_" + item.uic} checked={this._selectedDeedIndex == currentIndex} />
                                                                                    <label className={"custom-control-label"} htmlFor={this._groupName + "_" + item.uic}>
                                                                                        <span className="d-sm-none"></span>
                                                                                    </label>
                                                                                </div>
                                                                            </td>
                                                                            : null
                                                                    }
                                                                    <td>
                                                                        <span className="field-title field-title--preview d-sm-none">{this.getResource("CR_GL_COMPANY_ID_L")}</span>
                                                                        <p className="field-text">{item.uic}</p>
                                                                    </td>
                                                                    <td>
                                                                        <span className="field-title field-title--preview d-sm-none">{this.getResource("CR_GL_COMPANY_NAME_L")}</span>
                                                                        <p className="field-text">{item.companyFullName}</p>
                                                                    </td>
                                                                </tr>
                                                                : null
                                                        })
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            : null
                    }
                </div>
                <div className="button-bar button-bar--form">
                    <div className="left-side">
                        <Button type="button" className="btn btn-secondary" lableTextKey={"GL_REFUSE_L"} onClick={this.props.returnToInitialPage}></Button>
                    </div>
                    <div className="right-side">
                        <Button type="btn btn-primary" className="btn btn-primary" lableTextKey={"GL_CONTINUE_L"} onClick={this.continue}></Button>
                    </div>
                </div>
            </div>
        </div>
    }

    @action handleSelectedUICChange(deed: DeedSummary, index: number) {
        this._selectedUIC = deed.uic;
        this._companyName = deed.companyName;
        this._selectedDeedIndex = index;
        
    }

    @action private loadInfoByIncomingNumber(): void {
        this.model.deeds = null;
        this.model.indent = null;
        this.model.name = null;
        this.model.outgoingNo = null;
        this.model.outgoingNoAB = null;
        this._mainAppType = null;

        const that = this;

        if (ObjectHelper.isStringNullOrEmpty(this.model.incomingNo)) {
            this.model.removeError('incomingNo');
            this.model.addError('incomingNo', this.getResource('GL_INPUT_APPLICATION_NO_E')); // Попълнете номер на заявление.
        } else {
            this.getInfoByIncomingNumber();
        }
    }

    @action continue(): void {
        this.model.removeError('incomingNo');
        
        

        if (!this.model.incomingNo || this.model.incomingNo.length != 14 || isNaN(parseFloat(this.model.incomingNo)) || this.model.hasErrors())
            this.model.addError('incomingNo', this.getResource('GL_INPUT_INCOMING_NO_E')); //Моля, въведете входящ номер.


        else {
            this.model.clearErrors();
            this.getInfoByIncomingNumber();
            if (this._continue) {

                let request: any = {};

                request.applicationType = this.props.applicationType;
                request.additionalData = {};
                request.additionalData.incomingNumber = !ObjectHelper.isStringNullOrEmpty(this._incomingNumber) ? this._incomingNumber : null;
                request.additionalData.outgoingNumber = !ObjectHelper.isStringNullOrEmpty(this._outgoingNumber) ? this._outgoingNumber : null;
                request.additionalData.companyName = !ObjectHelper.isStringNullOrEmpty(this._companyName) ? this._companyName : null;
                request.additionalData.mainAppType = !ObjectHelper.isStringNullOrEmpty(this._mainAppType) ? this._mainAppType : null;
                this._selectedUIC ? request.additionalData.uic = this._selectedUIC : null;
                this.model.indent = this._selectedUIC;

                request.additionalData.state = ProcessStates.New;

                this.props.registerAsyncOperation(this.props.createApplicationProcess(request));
            }
        }
    }

   
    @action getInfoByIncomingNumber() {
        const that = this;
        let dsp = new DataServiceProvider({ headerKey: 'X-ContextLimiter-Token', headerValue: '' });

        this.props.registerAsyncOperation(dsp.getDataService<ApplicationsService>(ApplicationsService).getApplicationInfoByIncommingNumber(this.model.incomingNo).then((applicationInfo: ApplicationInfo) => {

            that.model.removeError('incomingNo');

            if (applicationInfo &&
                ((applicationInfo.applicationType in NonApplicationTypes) || (applicationInfo.applicationType == ApplicationFormTypes.D1))) {
                that.model.addError('incomingNo', that.getResource('CR_APP_00040_E')); //Не може да подадете заявление Ж1 за този входящ номер..
                that._continue = false;
            }
            else if (applicationInfo &&
                (applicationInfo.applicationStatus != ApplicationStatuses.Processing &&
                    applicationInfo.applicationStatus != ApplicationStatuses.Instruction &&
                    applicationInfo.applicationStatus != ApplicationStatuses.WaitingForProcessingPreviousApplication)) {
                that.model.addError('incomingNo', that.getResource('CR_APP_00039_E')); //Заявлението, към което свързвате заявление Ж1 е обработено!
                that._continue = false;
            }
            else if (applicationInfo && applicationInfo.incomingLinkedDeeds && applicationInfo.incomingLinkedDeeds.length > 0) {

                runInAction(() => {
                    that._selectedUIC = applicationInfo.incomingLinkedDeeds[0].uic;
                    that._companyName = applicationInfo.incomingLinkedDeeds[0].companyName;
                    that._selectedDeedIndex = 0;

                    that.model.deeds = applicationInfo.incomingLinkedDeeds;
                    that._mainAppType = applicationInfo.applicationTypeName;
                    that._outgoingNumber = applicationInfo.outgoingNumber;
                    that._incomingNumber = applicationInfo.incomingNumber;
                    that._continue = true;
                })                
            }
            else {
                that.model.addError('incomingNo', that.getResource('GL_INPUT_INCOMING_NO_E')); //Моля, въведете входящ номер.
                that._continue = false;
            }
        }));
    }
    //#endregion
}

export const ApplicationJ1StartUI = withAsyncFrame(withRouter(J1StartUIImpl), false);