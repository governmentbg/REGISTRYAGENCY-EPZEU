import { ObjectHelper } from 'Cnsys.Core';
import { attributesClassFormControlMaxL10, EPZEUBaseComponent, ValidationSummaryStrategy } from 'EPZEU.Core';
import { AddressUI, InputInfoUI, ListItemsContainerProps, withSingleItemListContainer, getIdentResourceKeyForDisplay } from 'EPZEU.CR.Domain';
import { action } from 'mobx';
import { observer } from "mobx-react";
import * as React from "react";
import { ComplaintPerson } from '../Models/ModelsAutoGenerated';

var infoTextKeys1 = ["CR_APP_00081_I"];
var valSummaryPropNames = [""];

@observer export class ComplaintPersonUI extends EPZEUBaseComponent<ListItemsContainerProps, ComplaintPerson> {
    private groupName: string;

    constructor(props?: ListItemsContainerProps) {
        super(props);

        this.groupName = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="field-container">
                    <div className="row">
                        <div className="form-group col-12">
                            <div className="custom-control custom-checkbox">
                                <input className={"custom-control-input"} type="checkbox" onChange={this.handleChange} id={this.groupName + 'includeApplicant'} name={this.groupName + 'includeApplicant'} checked={this.model.includeApplicant == true} />
                                <label className={"custom-control-label"} htmlFor={this.groupName + 'includeApplicant'}>{this.getResource('CR_APP_INCLUDE_APPLICANT_L')}</label>

                            </div>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.person.name, 'GL_PERSON_NAME_L', { className: 'field-title field-title--form required-field' })}
                        {this.textBoxFor(m => m.person.name)}
                    </div>
                </div>
                <div className="field-container">
                    <div className="row">
                        <div className="form-group col">
                            {this.labelFor(m => m.person.indent, 'CR_GL_00003_L', { className: 'field-title field-title--form required-field' })}
                            {this.textBoxFor(m => m.person.indent, attributesClassFormControlMaxL10)}
                            <InputInfoUI infoTextKey={infoTextKeys1} />
                        </div>
                    </div>
                </div>
                <div className="field-container">
                    <div className="row">
                        <div className="col-12">
                            {this.labelFor(m => m.birthPlace, 'GL_BIRTHPLACE_L', { className: 'field-title field-title--form' })}
                        </div>
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.birthCountry, 'GL_COUNTRY_L')}
                            {this.textBoxFor(m => m.birthCountry)}
                        </div>
                        <div className="form-group col-sm-6">
                            {this.labelFor(m => m.birthPlace, 'GL_PLACE_L')}
                            {this.textBoxFor(m => m.birthPlace)}
                        </div>
                    </div>
                </div>
                <div className="field-container">
                    <div className="row">
                        <div className="field-title field-title--form col-12">
                            {this.getResource('GL_PERMANENT_ADDRESS_L')}
                        </div>
                    </div>
                </div>
                <AddressUI {...this.bind(m => m.address)} />
            </>);
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {
                    this.model.person
                        ? < div className="field-container">
                            <div className="record-container record-container--preview">
                                <div className="record-container record-container--preview">
                                    <p className='field-text'>
                                        {this.model.person.name && <>{this.model.person.name}</>}
                                        {(this.model.person.name && this.model.person.indent) && <>, </>}
                                        {this.model.person.indent && <>{this.getResource(getIdentResourceKeyForDisplay(this.model.person.indentType))}: {this.model.person.indent}</>}
                                    </p>
                                </div>
                            </div>
                        </div>
                        : null
                }
                {
                    (this.model.birthPlace || this.model.birthCountry)
                        ? <div className="field-container">
                            <div className="record-container record-container--preview">
                                <h3 className="field-title field-title--preview">
                                    {this.getResource('GL_BIRTHPLACE_L')}
                                </h3>
                                <p>
                                    {!ObjectHelper.isStringNullOrEmpty(this.model.birthPlace) && <>{this.getResource('GL_PLACE_L')}: {this.model.birthPlace}</>}
                                    {!ObjectHelper.isStringNullOrEmpty(this.model.birthPlace) && !ObjectHelper.isStringNullOrEmpty(this.model.birthCountry) && <>, </>}
                                    {!ObjectHelper.isStringNullOrEmpty(this.model.birthCountry) && <>{this.getResource('GL_COUNTRY_L')}: {this.model.birthCountry}</>}
                                </p>
                            </div>
                        </div>
                        : null
                }
                {
                    // показваме тази секция само ако имаме някаква информация
                    (this.model.address &&
                        (this.model.address.country || this.model.address.settlement || this.model.address.foreignPlace || this.model.address.district
                            || this.model.address.municipality || this.model.address.area || this.model.address.street || this.model.address.block
                            || this.model.address.entrance || this.model.address.floor || this.model.address.apartment))
                        ? <div className="field-container">
                            <div className="record-container record-container--preview">
                                <h3 className="field-title field-title--preview">
                                    {this.getResource('GL_PERMANENT_ADDRESS_L')}
                                </h3>
                                <AddressUI {...this.bind(m => m.address)} />
                            </div>
                        </div>
                        : null
                }
            </>
        );
    }

    @action private handleChange(e: any) {
        if (e.target.checked == true) {
            this.model.includeApplicant = true;
        }
        else if (e.target.checked == false) {
            this.model.includeApplicant = false;
        }
    }
}

export const ComplaintPersonsUI = withSingleItemListContainer(ComplaintPersonUI, ComplaintPerson, {
    addButtonLabelKey: "CR_APP_ADD_COMPLAINANT_L",
    listSelector: m => m.complaintPersonsList,
    hasAtLeastOneItem: true,
    isMandatoryItem: true,
    valSummaryRecursive: true,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryPropNames: valSummaryPropNames
})