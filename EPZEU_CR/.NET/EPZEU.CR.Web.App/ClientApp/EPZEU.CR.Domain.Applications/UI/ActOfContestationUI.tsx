import { BaseProps } from 'Cnsys.UI.React';
import { EPZEUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from 'EPZEU.Core';
import { ApplicantCapacityUI, ApplicantExchangeUI, ApplicantUIImpl, ApplicationFormContextProviderProps, DocumentsUI, SectionTitleUI, withApplicationFormContext } from 'EPZEU.CR.Domain';
import * as React from "react";
import { ActOfContestation } from '../Models/ModelsAutoGenerated';
import { ContestationActUI } from './ContestationActUI';

interface ActOfContestationUIProps extends BaseProps, ApplicationFormContextProviderProps {
}

const applicantInfoValPropNames = ['birthPlace', 'address'];

class ActOfContestationUIImpl extends EPZEUBaseComponent<ActOfContestationUIProps, ActOfContestation> {

    renderEdit(): JSX.Element {
        return (<>
            <SectionTitleUI anchor="interestedPerson" titleKey="CR_APP_DETAILS_ABOUT_INTERESTED_PERSON_L" />
            <div className="field-container">
                <ValidationSummary {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} strategy={ValidationSummaryStrategy.excludeAllExcept} propNames={applicantInfoValPropNames} includeErrorsRecursive={true} />
                <ApplicantUIImpl  {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} />
            </div>
            <ApplicantCapacityUI titleKey="GL_QUALITY_PERSON_CONCERNED_L" {...this.bind(m => m.applicantInfo.applicantCapacity)} />
            <ApplicantExchangeUI anchor="address" {...this.bind(m => m.applicantExchange)} />
            <SectionTitleUI titleKey={'CR_APP_ANNOUNCEMENT_COURT_ACT_APPL_CONTESTATION_TRANSFORM_L'} anchor="contestationAct" />
            <ContestationActUI {...this.bind(m => m.contestationAct)} />
            <SectionTitleUI titleKey={'GL_APPLIEDS_L'} anchor="documents" />
            <DocumentsUI {...this.bind(m => m.documents)} labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} disableDocumentRefusal={true} />
        </>);
    }

    renderDisplay(): JSX.Element {
        return (<>
            <SectionTitleUI anchor="interestedPerson" titleKey="CR_APP_DETAILS_ABOUT_INTERESTED_PERSON_L" isForPreview={true} />

            {
                this.model.applicantInfo && this.model.applicantInfo.applicants.applicantsList && this.model.applicantInfo.applicants.applicantsList.length > 0 &&
                <div className="field-container">
                    <ApplicantUIImpl {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} />
                    <ValidationSummary  {...this.bind(m => m.applicantInfo.applicants.applicantsList[0])} strategy={ValidationSummaryStrategy.includeAllExcept} includeErrorsRecursive={true} />
                </div>
            }
            {
                this.model.applicantInfo &&
                <ApplicantCapacityUI titleKey="GL_QUALITY_PERSON_CONCERNED_L" {...this.bind(m => m.applicantInfo.applicantCapacity)} />
            }
   
            <ApplicantExchangeUI {...this.bind(m => m.applicantExchange)} />
            <SectionTitleUI titleKey={'CR_APP_ANNOUNCEMENT_COURT_ACT_APPL_CONTESTATION_TRANSFORM_L'} anchor="contestationAct" isForPreview />
            <ContestationActUI {...this.bind(m => m.contestationAct)} />
            {this.props.applicationManager.processContext.isDraftApplicationProcess()
                && <>
                    <SectionTitleUI titleKey={'CR_APP_ATTACHED_DOCUMENTS_L'} anchor="documents" isForPreview={true} />
                    <DocumentsUI {...this.bind(m => m.documents)} labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} />
                </>
            }
        </>);
    }
}

export const ActOfContestationUI = withApplicationFormContext(ActOfContestationUIImpl);