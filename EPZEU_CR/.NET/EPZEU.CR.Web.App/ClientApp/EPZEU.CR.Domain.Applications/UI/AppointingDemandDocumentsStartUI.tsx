import { ObjectHelper } from 'Cnsys.Core';
import { AsyncUIProps, BaseProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControlMaxL14, attributesClassFormControlMaxL2, Button, Constants, EPZEUBaseComponent, IDataServiceProviderProps, ValidationSummaryErrors, withDataServiceProvider } from 'EPZEU.Core';
import { ApplicationFormTypes, ApplicationInfo, AssignmentsService, MasterAssignmentSearchCriteria, MasterAssignmentSearchSearchMode } from 'EPZEU.CR.Core';
import { getApplicationStatusCode, OutgoingNumber, StartUIProps } from 'EPZEU.CR.Domain';
import { action, observable, runInAction } from 'mobx';
import { observer } from "mobx-react";
import * as moment from 'moment';
import * as React from "react";
import { AppointingDemandDocumentsSearchResult, AppointingDemandDocumentsStart } from '../Models/AppointingDemandDocumentsSearch';
import { AppointingExpertType, AssignedExpert, AssignedExperts, AssignmentCorrectionNumber, OutgoingNumberX108, ReleaseReaseonsX110 } from '../Models/ModelsAutoGenerated';

//#region Search

interface AppointingDemandDocumentsStartProps extends BaseProps {
    onSearchCallback: () => void;
    errorMessages?: string[];
}

@observer class AppointingDemandDocumentsSearchUI extends EPZEUBaseComponent<AppointingDemandDocumentsStartProps, OutgoingNumberX108> {

    constructor(props?: AppointingDemandDocumentsStartProps) {
        super(props);

        this.onSearch = this.onSearch.bind(this);
    }

    render(): JSX.Element {

        return <div className="field-container">
            {!ObjectHelper.isNullOrUndefined(this.props.errorMessages) && this.props.errorMessages.length > 0 ? <ValidationSummaryErrors errors={this.props.errorMessages} /> : null}
            <div className="form-row">
                <div className="col-12">
                    <label className="field-title field-title--form">{this.getResource("CR_GL_ACT_APPOINT_NO_L")}</label>
                </div>
                <div className="form-group col col-sm-4 col-xl-3">
                    {this.textBoxFor(x => x.parts.incomingNumber, attributesClassFormControlMaxL14)}
                </div>
                <div className="form-group col-auto">
                    <span className="form-text">-</span>
                </div>
                <div className="form-group col-3 col-sm-2 col-xl-1">
                    {this.textBoxFor(x => x.parts.docNumber, attributesClassFormControlMaxL2)}
                </div>
                <div className="form-group col-auto d-none d-sm-inline-block">
                    <span className="form-text">/</span>
                </div>
                <div className="w-100 d-sm-none"></div>
                <div className="form-group col-auto">
                    {this.dateFor(x => x.parts.outgoingDate)}
                </div>
                <div className="form-group col-auto">
                    <Button type="button" className="btn btn-outline-light text-dark" lableTextKey={"GL_CHECK_L"} onClick={this.onSearch}>
                        <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i>
                    </Button>
                </div>
            </div>
        </div>
    }

    @action private onSearch() {
        if (this.props.onSearchCallback)
            this.props.onSearchCallback();
    }
}

//#endregion

//#region SearchResult

interface AppointingDemandDocumentsSearchResulProps extends BaseProps {
    applicationType: ApplicationFormTypes;
    assignedExperts: AssignedExpert[];
    assignmentMasterApplications: ApplicationInfo[];
    assignedExpertsErrors: string[];
    assignmentMasterApplicationsErrors: string[];
}

@observer export class AppointingDemandDocumentsSearchResultUI extends EPZEUBaseComponent<AppointingDemandDocumentsSearchResulProps, AppointingDemandDocumentsSearchResult> {

    constructor(props: AppointingDemandDocumentsSearchResulProps) {
        super(props);

        this.handleAssignedExpertChange = this.handleAssignedExpertChange.bind(this);
        this.handleAssignmentMasterApplicationsChange = this.handleAssignmentMasterApplicationsChange.bind(this);
    }

    //#region renders 

    render(): JSX.Element {
        if (!ObjectHelper.isNullOrUndefined(this.model)) {

            return <>
                {!ObjectHelper.isNullOrUndefined(this.props.assignedExpertsErrors) && this.props.assignedExpertsErrors.length > 0 ? <ValidationSummaryErrors errors={this.props.assignedExpertsErrors} /> : null}
                {this.props.assignedExperts && this.props.assignedExperts.length > 0 ? this.renderAssigneeExperts() : null}

                {!ObjectHelper.isNullOrUndefined(this.props.assignmentMasterApplicationsErrors) && this.props.assignmentMasterApplicationsErrors.length > 0 ? <ValidationSummaryErrors errors={this.props.assignmentMasterApplicationsErrors} /> : null}
                {this.props.assignmentMasterApplications && this.props.assignmentMasterApplications.length > 0 ? this.renderAssignmentMasterApplications() : null}
            </>
        }

        return null;
    }

    private renderAssigneeExperts() {
        if (this.hasActiveExperts) {

            return <div className="row">
                <div className="form-group col">
                    <label className="field-title field-title--form">{this.getResource("CR_APP_ACT_APPOINTED_PERSONS_L")}</label>
                    {this.props.assignedExperts.map((assignee) => {
                        return <div className="custom-control custom-radio" key={assignee.expertGuid}>
                            <input className={"custom-control-input"} type="radio" onChange={this.handleAssignedExpertChange} id={assignee.expertGuid} name={assignee.expertGuid} value={assignee.expertGuid} checked={this.model.assignedExperts.assignedExpertList[0] && assignee.expertGuid == this.model.assignedExperts.assignedExpertList[0].expertGuid} />
                            <label className={"custom-control-label"} htmlFor={assignee.expertGuid}>{assignee.name}</label>
                        </div>
                    })}
                </div>
            </div>

        } else {
            return <div className="row">
                <div className="form-group col">
                    <label className="field-title field-title--form">{this.getResource("CR_APP_ACT_APPOINTED_PERSONS_L")}</label>
                    {this.props.assignedExperts.map((assignee, idx) => {
                        return <p className="field-text" key={assignee.name + "_" + idx + "_" + assignee.expertGuid}>{assignee.name}</p>
                    })}
                </div>
            </div>
        }
    }

    private renderAssignmentMasterApplications() {
        return <div className="row">
            <div className="form-group col">
                <label className="field-title field-title--form">{this.getResource("CR_APP_INCOMING_NO_CHANGE_STATUS_L")}</label>
                {this.props.assignmentMasterApplications.map((assignee) => {
                    return <div className="custom-control custom-radio" key={assignee.incomingNumber}>
                        <input className={"custom-control-input"} type="radio" onChange={this.handleAssignmentMasterApplicationsChange} id={assignee.incomingNumber} name={assignee.incomingNumber} value={assignee.incomingNumber} checked={this.model.assignmentCorrectionNumber.value === assignee.incomingNumber} />
                        <label className={"custom-control-label"} htmlFor={assignee.incomingNumber}>{assignee.incomingNumber}, {this.getResource(getApplicationStatusCode(assignee.applicationStatus))}</label>
                    </div>
                })}
            </div>
        </div>
    }

    //#endregion

    //#region handlers

    private handleAssignedExpertChange(e: any) {
        var assignedExpert = this.props.assignedExperts.filter(x => x.expertGuid == e.target.value);

        if (assignedExpert && assignedExpert.length > 0) {

            if (this.props.applicationType == ApplicationFormTypes.AppointingChangeRequest)
                this.model.assignedExperts.assignedExpertList[0].egn == assignedExpert[0].egn;

            this.model.assignedExperts.assignedExpertList[0].expertGuid = e.target.value;
            this.model.assignedExperts.assignedExpertList[0].name = assignedExpert[0].name;
        }
    }

    private handleAssignmentMasterApplicationsChange(e: any) {
        this.model.assignmentCorrectionNumber.value = e.target.value;
    }

    //#endregion

    //#region helpers

    public get hasActiveExperts(): boolean {

        switch (this.props.applicationType) {
            case ApplicationFormTypes.AppointingPaidDeposit:
            case ApplicationFormTypes.AppointingRequestForCorrection:
            case ApplicationFormTypes.AppointingControllerReward:
            case ApplicationFormTypes.AppointingReleaseDeposit:
            case ApplicationFormTypes.AppointingContactAddressChange:
            case ApplicationFormTypes.NotificationOfExaminationImpossibility:
            case ApplicationFormTypes.AppointingReportAndExamination:
            case ApplicationFormTypes.NotificationOfLackOfMeans:
                return false;
        }

        return true;
    }

    //#endregion
}

//#endregion

//#region StartUI

interface AppointingDemandDocumentsStartUIProps extends StartUIProps, AsyncUIProps, BaseProps, IDataServiceProviderProps {
}

@observer class AppointingDemandDocumentsStartImpl extends EPZEUBaseComponent<AppointingDemandDocumentsStartUIProps, AppointingDemandDocumentsStart> {
    @observable private searchCriteria: OutgoingNumberX108;
    @observable private searchErrorMessages: string[];
    @observable private assignedExpertsErrorMessages: string[];
    @observable private assignmentMasterApplicationsErrorMessages: string[];
    @observable private assignedExperts: AssignedExpert[];
    @observable private assignmentMasterApplications: ApplicationInfo[];
    @observable private showResults: boolean;

    private resultKey: string;
    private assignmentsService = this.props.dataSrvProvider.getDataService<AssignmentsService>(AssignmentsService);

    constructor(props?: AppointingDemandDocumentsStartUIProps) {
        super(props);

        this.continue = this.continue.bind(this);
        this.searchResult = this.searchResult.bind(this);
        this.resultKey = ObjectHelper.newGuid();
        this.showResults = false;

        if (!this.model)
            this.initModel();
    }

    render(): JSX.Element {
        return (
            <div className="page-wrapper">
                <div className="section-wrapper">
                    <ValidationSummaryErrors errors={this.props.asyncErrorMessages} />
                    <AppointingDemandDocumentsSearchUI errorMessages={this.searchErrorMessages} onSearchCallback={this.searchResult} {...this.bind(this.searchCriteria, 'searchCriteria')} />
                    {
                        this.showResults
                            ? <AppointingDemandDocumentsSearchResultUI key={this.resultKey} assignedExperts={this.assignedExperts} assignmentMasterApplications={this.assignmentMasterApplications} applicationType={this.props.applicationType}
                                assignedExpertsErrors={this.assignedExpertsErrorMessages} assignmentMasterApplicationsErrors={this.assignmentMasterApplicationsErrorMessages}
                                {...this.bind(x => x.appointingDemandDocumentsSearchResult)} />
                            : null
                    }
                    <div className="button-bar button-bar--form">
                        <div className="left-side">
                            <Button type="button" className="btn btn-secondary" lableTextKey={"GL_REFUSE_L"} onClick={this.props.returnToInitialPage}></Button>
                        </div>
                        <div className="right-side">
                            <Button type="btn btn-primary" className="btn btn-primary" lableTextKey={"GL_CONTINUE_L"} onClick={this.continue} ></Button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    @action continue(): any {
        this.assignedExpertsErrorMessages = [];
        this.assignmentMasterApplicationsErrorMessages = [];

        if (!this.showResults) {
            this.searchErrorMessages = [];
            this.searchErrorMessages.push(this.getResource("GL_SEARCH_REQUIRED_E"));

            return;
        }

        if (this.props.applicationType != ApplicationFormTypes.AppointingPaidDeposit && this.props.applicationType != ApplicationFormTypes.AppointingRequestForCorrection
            && this.props.applicationType != ApplicationFormTypes.AppointingReleaseDeposit && this.props.applicationType != ApplicationFormTypes.AppointingControllerReward
            && this.props.applicationType != ApplicationFormTypes.AppointingContactAddressChange && this.props.applicationType != ApplicationFormTypes.NotificationOfExaminationImpossibility
            && this.props.applicationType != ApplicationFormTypes.AppointingReportAndExamination && this.props.applicationType != ApplicationFormTypes.NotificationOfLackOfMeans) {

            if (this.assignedExperts && this.assignedExperts.length > 0
                && (ObjectHelper.isStringNullOrEmpty(this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList[0].expertGuid)
                    || ObjectHelper.isStringNullOrEmpty(this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList[0].name))) {

                this.assignedExpertsErrorMessages.push(this.getResource("CR_APP_REQIURED_CHOICE_E"))
            }
        }

        if (this.assignmentMasterApplications && this.assignmentMasterApplications.length > 0
            && this.props.applicationType == ApplicationFormTypes.AttitudeOfChangeRequest && ObjectHelper.isStringNullOrEmpty(this.model.appointingDemandDocumentsSearchResult.assignmentCorrectionNumber.value)) {

            this.assignmentMasterApplicationsErrorMessages.push(this.getResource("CR_APP_REQIURED_CHOICE_E"))
        }

        if (this.props.applicationType == ApplicationFormTypes.AttitudeOfChangeRequest && (!this.assignmentMasterApplications || this.assignmentMasterApplications.length == 0)) {
            this.searchErrorMessages = [];
            this.searchErrorMessages.push(this.getResource("CR_APP_NO_REQUEST_FOR_CORRECTION_E"))
        }

        if (this.searchErrorMessages.length == 0 && this.assignedExpertsErrorMessages.length == 0 && this.assignmentMasterApplicationsErrorMessages.length == 0) {

            var request: any = {};

            request.applicationType = this.props.applicationType;
            request.additionalData = {};

            request.additionalData.incomingNumber = this.model.outgoingNumberX108.parts.incomingNumber;
            request.additionalData.docNumber = this.model.outgoingNumberX108.parts.docNumber ? this.model.outgoingNumberX108.parts.docNumber : 1;
            request.additionalData.outgoingDate = this.model.outgoingNumberX108.parts.outgoingDate.format("l");
            request.additionalData.expertGuid = this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList[0].expertGuid;
            request.additionalData.name = this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList[0].name;
            request.additionalData.egn = this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList[0].egn;
            request.additionalData.assignmentCorrectionNumber = this.model.appointingDemandDocumentsSearchResult.assignmentCorrectionNumber.value;

            this.props.createApplicationProcess(request);
        }
    }

    @action private loadAssignmentMasterApplications(): Promise<void> {

        var docNumber = this.model.outgoingNumberX108.parts.docNumber && typeof (this.model.outgoingNumberX108.parts.docNumber) == "number" ? this.model.outgoingNumberX108.parts.docNumber : 1;
        var that = this;

        let criteria = new MasterAssignmentSearchCriteria();
        criteria.page = 1;
        criteria.pageSize = Constants.MAX_PAGE_SIZE;
        criteria.outgoingIncomingNumber = that.model.outgoingNumberX108.parts.incomingNumber;
        criteria.incomingNumber = that.model.outgoingNumberX108.parts.incomingNumber;
        criteria.outgoingSeqNumber = docNumber.toString();
        criteria.outgoingNumberDate = that.model.outgoingNumberX108.parts.outgoingDate;
        criteria.includeAll = true;
        criteria.mode = MasterAssignmentSearchSearchMode.ByOutgoingIncomingNumber;

        return this.assignmentsService.getAssignmentMasterApplications(criteria).then(masterApplications => {

            if (!masterApplications || masterApplications.length == 0 || !masterApplications[0] || !masterApplications[0].relatedApplication || masterApplications[0].relatedApplication.length == 0) {
                that.searchErrorMessages.push(that.getResource('CR_APP_NO_REQUEST_FOR_CORRECTION_E'))
            } else {

                runInAction(() => {
                    var relatedApplications = masterApplications[0].relatedApplication.filter((app) => app.applicationType == ApplicationFormTypes.AppointingChangeRequest)

                    that.assignmentMasterApplications = [];

                    if (relatedApplications != null && relatedApplications.length > 0)
                        that.assignmentMasterApplications = relatedApplications;
                })
            }

            return Promise.resolve();
        });
    }

    @action searchResult(): Promise<void> {
        this.showResults = false;
        this.searchErrorMessages = [];
        this.initResultModel();
        this.resultKey = ObjectHelper.newGuid();

        this.model.outgoingNumberX108.parts.incomingNumber = this.searchCriteria.parts.incomingNumber;
        this.model.outgoingNumberX108.parts.docNumber = this.searchCriteria.parts.docNumber;
        this.model.outgoingNumberX108.parts.outgoingDate = this.searchCriteria.parts.outgoingDate;

        let docNumber = this.model.outgoingNumberX108.parts.docNumber && typeof (this.model.outgoingNumberX108.parts.docNumber) == "number" ? this.model.outgoingNumberX108.parts.docNumber : 1;
        let that = this;

        if (!this.model.outgoingNumberX108.parts || ObjectHelper.isStringNullOrEmpty(this.model.outgoingNumberX108.parts.incomingNumber) || !moment.isMoment(this.model.outgoingNumberX108.parts.outgoingDate)) {
            that.searchErrorMessages.push(this.getResource("CR_APP_00180_E"))

            return Promise.resolve();

        } else {

            this.props.registerAsyncOperation(this.assignmentsService.getAssignment(this.model.outgoingNumberX108.parts.incomingNumber, docNumber, this.model.outgoingNumberX108.parts.outgoingDate).then(assignee => {

                runInAction(() => {
                    if (!assignee || !assignee.experts || assignee.experts.length == 0) {
                        that.searchErrorMessages.push(this.getResource("CR_GL_INVALID_OUTGOING_NO_Е"))

                        return Promise.resolve()
                    } else {

                        if (assignee.assignmentExpertType == AppointingExpertType.Liquidator &&
                            !(that.props.applicationType == ApplicationFormTypes.AppointingRequestForCorrection || that.props.applicationType == ApplicationFormTypes.AppointingDeclaration ||
                                that.props.applicationType == ApplicationFormTypes.NotificationOfLackOfMeans || that.props.applicationType == ApplicationFormTypes.AppointingReleaseDeposit
                                || that.props.applicationType == ApplicationFormTypes.AppointingPaidDeposit)) {

                            that.searchErrorMessages.push(this.getResource("CR_APP_00177_E"))
                            return Promise.resolve()

                        } else if (assignee.assignmentExpertType != AppointingExpertType.Liquidator && that.props.applicationType == ApplicationFormTypes.NotificationOfLackOfMeans) {

                            that.searchErrorMessages.push(this.getResource("CR_APP_00178_E"))
                            return Promise.resolve()
                        } else {

                            that.model.outgoingNumberX108.appointingExpertType = assignee.assignmentExpertType;
                            that.model.assignmentID = assignee.assignmentID;
                            that.assignedExperts = [];

                            if (assignee && assignee.experts && assignee.experts.length > 0) {
                                for (var i = 0; i < assignee.experts.length; i++) {
                                    let assigneeExpert = new AssignedExpert();
                                    assigneeExpert.expertGuid = assignee.experts[i].guid;
                                    assigneeExpert.name = assignee.experts[i].name;

                                    that.assignedExperts.push(assigneeExpert);
                                }

                                that.showResults = true;
                            }

                            return Promise.resolve()
                        }
                    }
                })
            }).then(() => {
                if (!ObjectHelper.isNullOrUndefined(that.model.assignmentID) && that.props.applicationType == ApplicationFormTypes.AttitudeOfChangeRequest && that.showResults)
                    return that.loadAssignmentMasterApplications();
            }));
        }
    }

    @action initModel(): void {
        this.model = new AppointingDemandDocumentsStart();
        this.model.outgoingNumberX108 = new OutgoingNumberX108();
        this.model.outgoingNumberX108.parts = new OutgoingNumber();

        this.searchCriteria = new OutgoingNumberX108();
        this.searchCriteria.parts = new OutgoingNumber();

        this.initResultModel();
    }

    @action initResultModel(): void {
        this.model.appointingDemandDocumentsSearchResult = new AppointingDemandDocumentsSearchResult();
        this.model.appointingDemandDocumentsSearchResult.assignmentCorrectionNumber = new AssignmentCorrectionNumber();
        this.model.appointingDemandDocumentsSearchResult.releaseReaseonsX110 = new ReleaseReaseonsX110();
        this.model.appointingDemandDocumentsSearchResult.assignedExperts = new AssignedExperts();
        this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList = [];

        var assignedExpert = new AssignedExpert();
        this.model.appointingDemandDocumentsSearchResult.assignedExperts.assignedExpertList.push(assignedExpert);
    }
}

export const AppointingDemandDocumentsStartUI = withAsyncFrame(withDataServiceProvider(AppointingDemandDocumentsStartImpl), false)

//#endregion