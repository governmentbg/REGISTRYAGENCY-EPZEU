import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseComponent, ValidationSummary, ValidationSummaryStrategy } from 'EPZEU.Core';
import { FieldContainerProps } from 'EPZEU.CR.Domain';
import * as React from "react";
import { RequestForCorrection } from '../Models/ModelsAutoGenerated';

const valSummaryPropNames = ["regNumber", "incomingNumber", "subject"];

export class RequestDataUI extends EPZEUBaseComponent<FieldContainerProps, RequestForCorrection> {

    renderEdit(): JSX.Element {
        return <>
            <ValidationSummary {...this.props} propNames={valSummaryPropNames} strategy={ValidationSummaryStrategy.excludeAllExcept} />
            {
                !ObjectHelper.isStringNullOrEmpty(this.model.regNumber)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.regNumber, 'CR_GL_ENTRY_NUMBER_L', { className: 'field-title field-title--form ' })}
                                <p className="field-text">{this.model.regNumber}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
            {
                !ObjectHelper.isStringNullOrEmpty(this.model.incomingNumber)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.incomingNumber, 'CR_GL_INCOMING_NUMBER_OF_APPL_L', { className: 'field-title field-title--form ' })}
                                <p className="field-text">{this.model.incomingNumber}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
            {
                this.model.subject && !ObjectHelper.isStringNullOrEmpty(this.model.subject.indent)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.subject.indent, 'CR_GL_COMPANY_ID_L', { className: 'field-title field-title--form ' })}
                                <p className="field-text">{this.model.subject.indent}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
            {
                this.model.subject && !ObjectHelper.isStringNullOrEmpty(this.model.subject.name)
                    ? <div className="field-container">
                        <div className="row">
                            <div className="form-group col-12">
                                {this.labelFor(m => m.subject.name, 'CR_GL_COMPANY_NAME_L', { className: 'field-title field-title--form ' })}
                                <p className="field-text">{this.model.subject.name}</p>
                            </div>
                        </div>
                    </div>
                    : null
            }
        </>
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {
                    !ObjectHelper.isStringNullOrEmpty(this.model.regNumber)
                        ? <div className="field-container">
                            <h3 className="field-title field-title--preview">{this.getResource('CR_GL_ENTRY_NUMBER_L')}</h3>
                            <div className="record-container record-container--preview">
                                <p className="field-text">{this.model.regNumber}</p>
                            </div>
                        </div>
                        : null
                }
                {
                    !ObjectHelper.isStringNullOrEmpty(this.model.incomingNumber)
                        ? <div className="field-container">
                            <h3 className="field-title field-title--preview">{this.getResource('CR_GL_INCOMING_NUMBER_OF_APPL_L')}</h3>
                            <div className="record-container record-container--preview">
                                <p className="field-text">{this.model.incomingNumber}</p>
                            </div>
                        </div>
                        : null
                }
                {
                    this.model.subject && !ObjectHelper.isStringNullOrEmpty(this.model.subject.indent)
                        ? <div className="field-container">
                            <h3 className="field-title field-title--preview">{this.getResource('CR_GL_COMPANY_ID_L')}</h3>
                            <div className="record-container record-container--preview">
                                <p className="field-text">{this.model.subject.indent}</p>
                            </div>
                        </div>
                        : null
                }
                {
                    this.model.subject && !ObjectHelper.isStringNullOrEmpty(this.model.subject.name)
                        ? <div className="field-container">
                            <h3 className="field-title field-title--preview">{this.getResource('CR_GL_COMPANY_NAME_L')}</h3>
                            <div className="record-container record-container--preview">
                                <p className="field-text">{this.model.subject.name}</p>
                            </div>
                        </div>
                        : null
                }
                <ValidationSummary {...this.props} includeErrorsRecursive={true} model={this.model} />
            </>
        );
    }
}