import { ObjectHelper } from 'Cnsys.Core';
import { BaseProps } from 'Cnsys.UI.React';
import { EPZEUBaseComponent, ValidationSummaryErrors, ValidationSummaryErrorsPreviewUI } from 'EPZEU.Core';
import { ApplicantCapacityUI, ApplicantExchangeUI, ApplicantsUI, ApplicationFormContextProviderProps, DocumentsUI, ListItemsContainerProps, PersonTypes, PersonUI, SectionInfoUI, SectionTitleUI, withApplicationFormContext, withSingleItemListContainer } from 'EPZEU.CR.Domain';
import { action } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { AppointingDemand, AppointingFirm, AppointingExpertType } from '../Models/ModelsAutoGenerated';

interface AppointingDemandProps extends BaseProps, ApplicationFormContextProviderProps {
}

var infoTextKeys1 = ['CR_APP_00051_I', 'CR_APP_00026_I'];

@observer class AppointingDemandUIImpl extends EPZEUBaseComponent<AppointingDemandProps, AppointingDemand> {

    private groupName: string;

    constructor(props?: AppointingDemandProps) {
        super(props);

        this.groupName = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (<>
            <SectionTitleUI anchor={"appointmentData"} titleKey={"CR_APP_APPOINTMENT_DATA_L"} />
            <ValidationSummaryErrors errors={this.model.appointingType.getModelErrors()} />
            <div className="field-container">
                <div className="row">
                    <div className="col-12">
                        {this.labelFor(m => m.appointingType, 'CR_APP_OFFICIAL_APPOINMENT_L', { className: 'field-title field-title--form' })}
                    </div>
                    <div className="col-12 form-group">
                        {this.renderRadioButtons()}
                    </div>
                </div>
            </div>
            {
                this.model.appointingType.appointingExpertType == AppointingExpertType.Surveyor
                    ? <AppointingFirmsUI {...this.bind(m => m.appointingFirms)} />
                    : <div className="field-container">
                        <div className="interactive-container interactive-container--form">
                            <div className="interactive-container__content record-container">
                                <PersonUI {...this.bind(m => m.appointingFirms.appointingFirmList[0].firm)} PersonType={PersonTypes.DemandForAppointingExpert} />
                            </div>
                            <div className="interactive-container__controls">
                            </div>
                        </div>
                    </div>
            }
            <SectionTitleUI anchor={"applicant"} titleKey={"GL_APPLICANT_L"} />
            <SectionInfoUI infoTextKey={infoTextKeys1} />
            <ApplicantsUI {...this.bind(m => m.applicantInfo.applicants)} />
            <ApplicantCapacityUI titleKey="GL_QUALITY_APPLICANT_L" {...this.bind(m => m.applicantInfo.applicantCapacity)} />
            <ApplicantExchangeUI anchor="address" {...this.bind(m => m.applicantExchange)} />
            <SectionTitleUI titleKey={'GL_APPLIEDS_L'} anchor="documents" />
            <DocumentsUI {...this.bind(m => m.documents)} labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} disableDocumentRefusal={true} />
        </>);
    }

    renderDisplay(): JSX.Element {
        return (<>
            <SectionTitleUI anchor={"appointmentData"} titleKey={"CR_APP_APPOINTMENT_DATA_L"} isForPreview />
            {
                this.model.appointingType.appointingExpertType
                    ? <div className="field-container">
                        <div className="record-container record-container--preview">
                            <h3 className="field-title field-title--preview">{this.getResource("GL_PERSON_TYPE_L")}</h3>
                            <p>{this.radioButtonLabelResource(+this.model.appointingType.appointingExpertType)}</p></div>
                    </div>
                    : null
            }
            <div className="field-container">
                <ValidationSummaryErrorsPreviewUI errors={this.model.appointingType.getModelErrors()} />
            </div>
            {
                this.model.appointingFirms ?
                    this.model.appointingType.appointingExpertType == AppointingExpertType.Surveyor
                        ? <AppointingFirmsUI {...this.bind(m => m.appointingFirms)} />
                        : this.model.appointingFirms.appointingFirmList
                            && this.model.appointingFirms.appointingFirmList.length > 0
                            && this.model.appointingFirms.appointingFirmList[0].firm
                            ? <PersonUI {...this.bind(m => m.appointingFirms.appointingFirmList[0].firm)} PersonType={PersonTypes.DemandForAppointingExpert} />
                            : null
                    : null
            }
            <SectionTitleUI anchor={"applicant"} titleKey={"GL_APPLICANT_L"} isForPreview />
            {this.model.applicantInfo &&
                <><ApplicantsUI  {...this.bind(m => m.applicantInfo.applicants)} />
                    <ApplicantCapacityUI titleKey="GL_QUALITY_APPLICANT_L" {...this.bind(m => m.applicantInfo.applicantCapacity)} />
                </>
            }
            <ApplicantExchangeUI anchor="address" {...this.bind(m => m.applicantExchange)} />
            {this.props.applicationManager.processContext.isDraftApplicationProcess()
                && <>
                    <SectionTitleUI titleKey={'CR_APP_ATTACHED_DOCUMENTS_L'} anchor="documents" isForPreview={true} />
                    <DocumentsUI labelTextKey={'CR_APP_ANOTHER_ATTACHED_DOCUMENTS_L'} {...this.bind(m => m.documents)} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} />
                </>
            }
        </>);
    }

    //#region Private helpers

    private renderRadioButtons() {
        var appointingExpertTypes = [AppointingExpertType.CognizantPerson, AppointingExpertType.Surveyor, AppointingExpertType.Controller, AppointingExpertType.Expert];

        return appointingExpertTypes.map(appointingExpertType => {
            var appointingExpert = AppointingExpertType[appointingExpertType];

            return <div className="custom-control custom-radio" key={appointingExpert}>
                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + "_" + appointingExpert} name={this.groupName} value={appointingExpertType} checked={this.model.appointingType.appointingExpertType == appointingExpertType} />
                <label className={"custom-control-label"} htmlFor={this.groupName + "_" + appointingExpert}>{this.radioButtonLabelResource(appointingExpertType)}</label>
            </div>
        })
    }

    radioButtonLabelResource(applicantCapacityType: AppointingExpertType) {
        switch (applicantCapacityType) {
            case AppointingExpertType.CognizantPerson:
                return this.getResource("CR_APP_EXPERT_PERSONS_L");
            case AppointingExpertType.Surveyor:
                return this.getResource("CR_APP_INSPECTOR_L");
            case AppointingExpertType.Controller:
                return this.getResource("CR_APP_CONTROLLER_L");
            case AppointingExpertType.Expert:
                return this.getResource("CR_APP_REGISTERED_AUDITOR_L");
            default: return "AppointingExpertType_Key_NotFound"
        }
    }

    @action private handleChange(e: any) {
        //Ако преди това е била избрана опция "Проверител" и дружествата са били повече от едно - изтриваме всичко след първото.
        if (this.model.appointingFirms && this.model.appointingFirms.appointingFirmList && this.model.appointingFirms.appointingFirmList.length > 1)
            this.model.appointingFirms.appointingFirmList.splice(1, this.model.appointingFirms.appointingFirmList.length - 1)

        this.model.appointingType.appointingExpertType = e.target.value;
    }

    //#endregion
}

export const AppointingDemandUI = withApplicationFormContext(AppointingDemandUIImpl);

class AppointingFirmsImpl extends EPZEUBaseComponent<ListItemsContainerProps, AppointingFirm>{

    renderEdit() {
        return <>
            <PersonUI {...this.bind(m => m.firm)} PersonType={PersonTypes.DemandForAppointingExpert} />
        </>
    }

    renderDisplay() {
        return <>
            {
                this.model && this.model.firm != null && this.model.firm != undefined && (!ObjectHelper.isStringNullOrEmpty(this.model.firm.indent) || !ObjectHelper.isStringNullOrEmpty(this.model.firm.nameAndLegalFormText))
                    ? <PersonUI {...this.bind(m => m.firm)} PersonType={PersonTypes.DemandForAppointingExpert} />
            : null
    }
        </>
    }
}

const AppointingFirmsUI = withSingleItemListContainer(AppointingFirmsImpl, AppointingFirm, {
    addButtonLabelKey: "CR_APP_ADD_COMPANY_L",
    listSelector: m => m.appointingFirmList,
    hasAtLeastOneItem: true,
})