import * as moment from 'moment';
import { ApplicationInfo, EntriesSearchCriteria, LiquidationSearchCriteria, BankruptcySearchCriteria, DocumentsWithoutDeedSearchCriteria } from '../Models';
import { ApplicationDocumentInfo } from '../Models/ApplicationDocument';
import { ApplicationTransformationsSearchCriteria, Entry } from '../Models/ModelsAutoGenerated';
import { OutgoingDocument } from '../Models/OutgoingDocument';
import { EPZEUBaseDataService } from 'EPZEU.Core';

export class ApplicationsService extends EPZEUBaseDataService {
    protected baseUrl(): string {
        return super.baseUrl() + "Applications";
    }

    public getApplicationByEntryNumber(entryNumber: string): Promise<ApplicationInfo> {
        return this.get<ApplicationInfo>(``, ApplicationInfo, { entryNumber: entryNumber });
    }

    public getApplicationInfoByIncommingNumber(incomingNumber: string): Promise<ApplicationInfo> {
        return this.get<ApplicationInfo>(`/${incomingNumber}`, ApplicationInfo, null);
    }
     
    public getApplicationsInfoByUIC(uic: string): Promise<ApplicationInfo[]> {
        return this.get<ApplicationInfo[]>(`${super.baseUrl()}Deeds/${uic}/Applications`, ApplicationInfo, null, null).then(function (result: ApplicationInfo[]) {            
            return result;
        });
    }

    public getOutgoingDocuments(incomingNumber: string, outgoingGuid: string): Promise<OutgoingDocument[]> {
        return this.get<OutgoingDocument[]>(`/${incomingNumber}/OutgoingDocuments`, OutgoingDocument, { outgoingGuid: outgoingGuid }, null);
    }

    public getApplicationInfoDocumentsWithoutDeed(searchCriteria: DocumentsWithoutDeedSearchCriteria): Promise<ApplicationInfo[]> {
        return this.get<ApplicationInfo[]>(`DocumentsWithoutDeed`, ApplicationInfo, searchCriteria, null)
            .then(function (result: ApplicationInfo[]) {
                searchCriteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
                return result;
            });
    }

    public getApplicationInfoTransformations(searchCriteria: ApplicationTransformationsSearchCriteria): Promise<ApplicationInfo[]> {
        return this.get<ApplicationInfo[]>(`Transformations`, ApplicationInfo, searchCriteria, null)
            .then(function (result: ApplicationInfo[]) {
                searchCriteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;
                return result;
            });
    }

    public getApplicationDocumentsInfo(incomingNumber: string, entryNumber: moment.Moment = null): Promise<ApplicationDocumentInfo[]> {
        return this.get<ApplicationDocumentInfo[]>(`/${incomingNumber}/Documents`, ApplicationDocumentInfo, { entryNumber: entryNumber });
    }

    public getEntries(criteria: EntriesSearchCriteria): Promise<Entry[]> {
        return this.get<Entry[]>('Entries', Entry, criteria, null).then(function (result: Entry[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;;
            return result;
        });
    }

    public getLiquidations(criteria: LiquidationSearchCriteria): Promise<Entry[]> {
        return this.get<Entry[]>('Entries/Liquidations', Entry, criteria, null).then(function (result: Entry[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;;
            return result;
        });
    }

    public getBankruptcies(criteria: BankruptcySearchCriteria): Promise<Entry[]> {
        return this.get<Entry[]>('Entries/Bankruptcies', Entry, criteria, null).then(function (result: Entry[]) {
            criteria.count = this.jqXHR.getResponseHeader('Count') ? this.jqXHR.getResponseHeader('Count') : 0;;
            return result;
        });
    }

    public getApplicationForm(incomingNumber: string): Promise<any> {

        return this.get<any>(`${incomingNumber}/Form`, null);
    }
}