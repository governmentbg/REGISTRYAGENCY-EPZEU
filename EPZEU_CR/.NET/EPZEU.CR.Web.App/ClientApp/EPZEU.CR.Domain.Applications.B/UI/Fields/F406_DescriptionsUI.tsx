import { attributesClassFormControlTextRight, EPZEUBaseComponent, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { FieldContainerProps, Person, RecordContainerProps, SectionSubTitle, withFieldContainer, withRecordContainer } from 'EPZEU.CR.Domain';
import * as React from "react";
import { F040601_Description406, F04060_DescriptionCount, F406_Descriptions } from '../../Models/Fields/ModelsAutoGenerated';
import { F40601_DescriptionsUI } from './F40601_DescriptionsUI';

class F04060_DescriptionCountImpl extends EPZEUBaseComponent<RecordContainerProps, F04060_DescriptionCount>{

    renderEdit() {
        return <>
            <div className="row">
                <div className="col-12">
                    {this.labelFor(m => m.text, 'CR_APP_PART_CAPITAL_L')}
                </div>
            </div>
            <div className='row'>
                <div className='form-group col-sm-6 col-lg-4'>
                    <div className='form-row'>
                        <div className='col'>
                            {this.textBoxFor(m => m.text, attributesClassFormControlTextRight)}
                        </div>
                        <div className="col-auto">
                            <label className="col-form-label">{this.getResource('GL_BGN_ABBRAVETION_L')}</label>
                        </div>
                    </div>
                </div>
            </div>
        </>
    }

    renderDisplay() {
        return <>
            {this.model && this.model.text &&
                <>
                    {this.getResource('CR_APP_PART_CAPITAL_L')}: {this.model.text} {this.getResource('GL_BGN_ABBRAVETION_L')}
                </>}
        </>
    }
}

const F04060_DescriptionCountUI = withRecordContainer(F04060_DescriptionCountImpl);

class F406_DescriptionsUI extends EPZEUBaseComponent<FieldContainerProps, F406_Descriptions> {

    renderEdit(): JSX.Element {
        // withListRecordsContainer има props и this.props, които са различни! На повечето места ползваме withFieldSingleListRecordsContainer и подаваме
        // тези props при самия export, a withFieldSingleListRecordsContainer ги подава по такъв начин на withListRecordsContainer, че той ги достъпва с this.props (а не просто props!)
        // Когато ползваме директно withListRecordsContainer и подадем тези props при exporta, те отиват в ListRecordsContainer като props (a не this.props)
        const F406ListProps = {
            ...{
                addButtonLabelKey: "CR_APP_ADD_PARTNER_L",
                hasAtLeastOneRecord: true,
                valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
                valSummaryRecursive: true,
                valSummaryPropNames: ["", "subject."],
                newRecordCtor: () => {
                    return Nomenclatures.getBGCountry().then(bgCountry => {
                        var descriptions = new F040601_Description406();

                        descriptions.subject = new Person();
                        descriptions.subject.countryCode = bgCountry.code;
                        descriptions.subject.countryID = bgCountry.id;
                        descriptions.subject.countryName = bgCountry.name;

                        return descriptions;
                    })
                }
            },
            ...this.bind(x => x.description406List)
        };

        return (
            <>
                <F04060_DescriptionCountUI {...this.bind(m => m.descriptionCount)} />
                <SectionSubTitle subTitleTextKey={"CR_APP_CORPORATE_SHARE_PART_COMPANY_L"} />
                <F40601_DescriptionsUI {...F406ListProps} />
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (<>
            <F04060_DescriptionCountUI {...this.bind(m => m.descriptionCount)} />
            <F40601_DescriptionsUI {...this.bind(x => x.description406List)} />
        </>);
    }
}

export const F406_DescriptionsFieldUI = withFieldContainer(F406_DescriptionsUI, {
    fieldLabelTextKey: "CR_F_406_L",
    isMandatoryField: true
});