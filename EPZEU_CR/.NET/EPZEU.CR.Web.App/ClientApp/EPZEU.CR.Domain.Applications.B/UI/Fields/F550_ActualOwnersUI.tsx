import { ObjectHelper } from "Cnsys.Core";
import { EPZEUBaseComponent, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { AddressUI, DomainModelHepler, ListRecordsContainerProps, Person, PersonTypes, PersonUI, SectionSubTitle, withFieldSingleListRecordsContainer } from 'EPZEU.CR.Domain';
import * as React from "react";
import { F5500_ActualOwner } from '../../Models/Fields/ModelsAutoGenerated';

class F550_ActualOwnersUI extends EPZEUBaseComponent<ListRecordsContainerProps, F5500_ActualOwner> {

    renderEdit(): JSX.Element {
        return (
            <>
                <PersonUI {...this.bind(m => m.person)} PersonType={PersonTypes.F5500_ActualOwner} />
                <AddressUI {...this.bind(m => m.address)} />
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.ownedRights, 'CR_APP_DATA_RIGHTS_OWNED_L')}
                        {this.textAreaFor(x => x.ownedRights, null, 3)}
                    </div>
                </div>
                <SectionSubTitle subTitleTextKey={"CR_APP_COUNTRY_RESIDENCE_L"} />
                <AddressUI {...this.bind(m => m.countryOfResidence)} />
            </>);
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <PersonUI {...this.bind(m => m.person)} PersonType={PersonTypes.F5500_ActualOwner} />
                <AddressUI {...this.bind(m => m.address)} />
                <div>
                    {!ObjectHelper.isStringNullOrEmpty(this.model.ownedRights)
                        && <>{this.getResource('CR_APP_DATA_RIGHTS_OWNED_L') + ": "}<span className="preserve-line-breaks">{this.model.ownedRights}</span></>}
                </div>
                {DomainModelHepler.isObjectEmpty(this.model.countryOfResidence) ? null :
                    (<div>
                        <SectionSubTitle subTitleTextKey={"CR_APP_COUNTRY_RESIDENCE_L"} isForPreview />
                    </div>)}
                <AddressUI {...this.bind(m => m.countryOfResidence)} />
            </>
        );
    }
}
export const F550_ActualOwnersFieldUI = withFieldSingleListRecordsContainer(F550_ActualOwnersUI, F5500_ActualOwner, {
    addButtonLabelKey: "GL_ADD_L",
    listSelector: m => m.actualOwnersList,
    fieldLabelTextKey: "CR_F_550_L",
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    hasAtLeastOneRecord: true,
    isMandatoryField: true,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "person."],
    newRecordCtor: () => {
        return Nomenclatures.getBGCountry().then(bgCountry => {
            var rep = new F5500_ActualOwner();

            rep.person = new Person();
            rep.person.countryCode = bgCountry.code;
            rep.person.countryID = bgCountry.id;
            rep.person.countryName = bgCountry.name;

            return rep;
        })
    }
})