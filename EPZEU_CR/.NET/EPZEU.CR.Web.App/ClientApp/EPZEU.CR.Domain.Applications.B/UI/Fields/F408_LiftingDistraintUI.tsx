import { BindableReference, ObjectHelper } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControl, Authority, AutoComplete, EPZEUBaseComponent, Nomenclatures } from 'EPZEU.Core';
import { FieldContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F408_LiftingDistraint } from '../../Models/Fields/ModelsAutoGenerated';

interface F408_LiftingDistraintProps extends FieldContainerProps, AsyncUIProps {

}

@observer class F408_LiftingDistraintUI extends EPZEUBaseComponent<F408_LiftingDistraintProps, F408_LiftingDistraint> {
    @observable private courtName: string = "";
    private persistedCourt: string;

    constructor(props: F408_LiftingDistraintProps) {
        super(props);

        this.handleAuthorityChange = this.handleAuthorityChange.bind(this);
        this.handleAuthoritySelectOption = this.handleAuthoritySelectOption.bind(this);
        this.initCourtName = this.initCourtName.bind(this);

        this.initCourtName();
    }

    componentDidUpdate(prevProps: FieldContainerProps, prevState: any, snapshot?: never): void {

        if (super.componentDidUpdate)
            super.componentDidUpdate(prevProps, prevState, snapshot);

        if (this.model.courtLegalExecutor != this.persistedCourt)
            this.initCourtName();
    }

    initCourtName() {
        if (this.model.courtLegalExecutor) {
            this.persistedCourt = this.model.courtLegalExecutor;

            this.props.registerAsyncOperation(Nomenclatures.getCourts().bind(this).then(authorities => {
                var corts = authorities.filter(authority => authority.authorityID == +this.model.courtLegalExecutor);

                if (corts && corts.length > 0) {
                    this.courtName = corts[0].authorityName;
                }
                else {
                    this.courtName = "";
                }
            }));
        }
        else {
            this.persistedCourt = null;
            this.courtName = "";
        }
    }

    renderEdit(): JSX.Element {
        return (
            <div className="row">
                <div className="form-group col-lg-6">
                    {this.labelFor(x => x.courtLegalExecutor, "GL_COURT_CODE_L")}
                    <AutoComplete fullHtmlName="courtName"
                        modelReference={new BindableReference(this, () => this.courtName)}
                        selector={this.selectAuthority}
                        showValue={this.showAuthorityValue}
                        handleSelectCallback={this.handleAuthoritySelectOption}
                        hasSelectedValue={this.model.courtLegalExecutor ? true : false}
                        handleChangeCallback={this.handleAuthorityChange}
                        triggerLength={1}
                        attributes={attributesClassFormControl}/>
                </div>
                <div className="form-group col-sm-6">
                    {this.labelFor(x => x.caseNumber, "CR_APP_COURT_NUMBER_L")}
                    {this.textBoxFor(x => x.caseNumber)}
                </div>
            </div>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {((ObjectHelper.isStringNullOrEmpty(this.model.courtLegalExecutor) == false) || (ObjectHelper.isStringNullOrEmpty(this.model.caseNumber) == false)) &&
                    <>{this.getResource('GL_LIFTED_L')}<br /></>
                }
                {this.model.courtLegalExecutor && <>{this.getResource('GL_COURT_CODE_L')}: {this.courtName}</>}
                {(this.model.courtLegalExecutor && this.model.caseNumber) && ', '}
                {this.model.caseNumber && <>{this.getResource('CR_APP_COURT_NUMBER_L')}: {this.model.caseNumber}</>}
            </>
        );
    }

    selectAuthority(value: string): Promise<Authority[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCourts().then(s => {
                return s.filter(s => {
                    let authorityCheck: string = s.authorityID.toString().toLowerCase() + " - " + s.authorityName.toLowerCase();

                    return authorityCheck.indexOf(" " + valueLowerCase) > -1
                        || authorityCheck.indexOf("(" + valueLowerCase) > -1  // special case for (НАП).
                        || authorityCheck.indexOf(valueLowerCase) == 0;
                });
            });
        else
            return Promise.resolve([]);
    }

    showAuthorityValue(value: Authority): string {
        return value.authorityID.toString() + " - " + value.authorityName;
    }

    @action handleAuthorityChange() {
        this.model.courtLegalExecutor = null;
    }

    @action handleAuthoritySelectOption(value?: Authority) {
        if (value) {
            this.model.courtLegalExecutor = value.authorityID.toString();
            this.courtName = value.authorityName;
        }
    }
}

export const F408_LiftingDistraintFieldUI = withAsyncFrame(withFieldRecordContainer(F408_LiftingDistraintUI, {
    fieldLabelTextKey: "CR_F_408_L"
}));