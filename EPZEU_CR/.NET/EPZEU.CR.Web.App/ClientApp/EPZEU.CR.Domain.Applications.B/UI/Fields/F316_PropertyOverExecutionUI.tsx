import * as React from "react";
import { observer } from "mobx-react";
import { action } from "mobx";
import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseComponent } from 'EPZEU.Core'
import { F316_PropertyOverExecution } from '../../Models/Fields/ModelsAutoGenerated'
import { withFieldRecordContainer, FieldContainerProps, withRecordContainer } from 'EPZEU.CR.Domain';

@observer class F316_PropertyOverExecutionUIImpl extends EPZEUBaseComponent<FieldContainerProps, F316_PropertyOverExecution> {
    private groupName: string;

    constructor(props?: FieldContainerProps) {
        super(props);

        this.groupName = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
    }

    renderEdit(): JSX.Element {
        let result: any = null;

        if (this.model) {
            result = (
                <>
                    <div className="row">
                        <div className="form-group col-12">
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_wholeCompany'} name={this.groupName} value={'wholeCompany'} checked={this.model.wholeCompany} />
                                <label className={"custom-control-label"} htmlFor={this.groupName + '_wholeCompany'}>{this.getResource('CR_APP_ENTERPRISE_AS_WHOLE_L')}</label>
                            </div>
                            <div className="custom-control custom-radio">
                                <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_partOfCompany'} name={this.groupName} value={'partOfCompany'} checked={this.model.partOfCompany} />
                                <label className={"custom-control-label"} htmlFor={this.groupName + '_partOfCompany'}>{this.getResource('CR_APP_SEPARATE_ASSETS_ENTERPRISE_L')}</label>
                            </div>
                        </div>
                    </div>
                    <div>
                        {this.model.partOfCompany == true ? this.textAreaFor(x => x.assetsOfCompany, null, 3) : null}
                    </div>
                </>);
        }

        return result;
    }

    renderDisplay(): JSX.Element {
        return <>{this.renderChosenItem()}
        </>
    }

    private renderChosenItem() {
        if (this.model.wholeCompany)
            return this.getResource('CR_APP_ENTERPRISE_AS_WHOLE_L')
        else if (this.model.partOfCompany)
            return <>{this.getResource('CR_APP_SEPARATE_ASSETS_ENTERPRISE_L')}<br />{this.model.assetsOfCompany}</>
        else
            return null;
    }

    @action private handleChange(e: any) {
        if (e.target.value == 'wholeCompany') {
            this.model.wholeCompany = true;
            this.model.partOfCompany = false;
        } else if (e.target.value == 'partOfCompany') {
            this.model.wholeCompany = false;
            this.model.partOfCompany = true;
        }

        this.model.assetsOfCompany = "";
    }
}

export const F316_PropertyOverExecutionFieldUI = withFieldRecordContainer(F316_PropertyOverExecutionUIImpl, { fieldLabelTextKey: "CR_F_316_L" });
