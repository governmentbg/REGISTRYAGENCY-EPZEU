import { EPZEUBaseComponent, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { IndentTypes, ListRecordsContainerProps, Person, PersonTypes, PersonUI, ValidatorHelpers, withFieldSingleListRecordsContainer } from 'EPZEU.CR.Domain';
import { observer } from "mobx-react";
import * as React from "react";
import { F5340_OffshoreRepresentative } from '../../Models/Fields/ModelsAutoGenerated';
import { SectionSubTitle } from 'EPZEU.CR.Domain/UI';

@observer class F534_OffshoreRepresentativesUI extends EPZEUBaseComponent<ListRecordsContainerProps, F5340_OffshoreRepresentative> {

    constructor(props: ListRecordsContainerProps) {
        super(props);

        this.handleForeignTraderChange = this.handleForeignTraderChange.bind(this);
    }

    renderEdit(): JSX.Element {
        let isPersonUIActive = this.model.subject.indentType == IndentTypes.Bulstat || this.model.subject.indentType == IndentTypes.UIC || this.model.subject.isForeignTrader;

        return (
            <>
                <PersonUI {...this.bind(m => m.subject)} PersonType={PersonTypes.Representative534} onHasForeignTraderCheckChanged={this.handleForeignTraderChange} />
                <SectionSubTitle subTitleTextKey={"CR_APP_REPRESENTING_LEGAL_ENTITY_L"} />
                <PersonUI {...this.bind(m => m.person)} PersonType={PersonTypes.RepresentativePerson534} disablePersonUI={!isPersonUIActive} />
            </>);
    }

    renderDisplay(): JSX.Element {
        let isPersonUIActive = this.model.subject.indentType == IndentTypes.Bulstat || this.model.subject.indentType == IndentTypes.UIC || this.model.subject.isForeignTrader;

        return (
            <>
                <PersonUI {...this.bind(m => m.subject)} PersonType={PersonTypes.Representative534} />
                {this.model.person
                    && !ValidatorHelpers.isEmptyBasePerson(this.model.person.name, this.model.person.indent, this.model.person.countryID, this.model.person.isForeignTrader)
                    && <>
                        {this.getResource('CR_APP_REPRESENTING_LEGAL_ENTITY_L')}: </>}
                <PersonUI {...this.bind(m => m.person)} PersonType={PersonTypes.RepresentativePerson534} disablePersonUI={!isPersonUIActive} />
            </>
        );
    }

    handleForeignTraderChange() {
        if (!this.model.subject.isForeignTrader && this.model.subject.indentType != IndentTypes.Bulstat && this.model.subject.indentType != IndentTypes.UIC)
            this.model.person = new Person();
    }
}

export const F534_OffshoreRepresentativesFieldUI = withFieldSingleListRecordsContainer(F534_OffshoreRepresentativesUI, F5340_OffshoreRepresentative, {
    addButtonLabelKey: "CR_APP_ADD_REPRESENTATIVE_L",
    listSelector: m => m.offshoreRepresentativesList,
    hasAtLeastOneRecord: true,
    fieldLabelTextKey: "CR_F_534_L",
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "subject.", "person."],
    newRecordCtor: () => {
        return Nomenclatures.getBGCountry().then(bgCountry => {
            var rep = new F5340_OffshoreRepresentative();

            rep.person = new Person();
            rep.person.countryCode = bgCountry.code;
            rep.person.countryID = bgCountry.id;
            rep.person.countryName = bgCountry.name;

            rep.subject = new Person();
            rep.subject.countryCode = bgCountry.code;
            rep.subject.countryID = bgCountry.id;
            rep.subject.countryName = bgCountry.name;

            return rep;
        })
    }
})