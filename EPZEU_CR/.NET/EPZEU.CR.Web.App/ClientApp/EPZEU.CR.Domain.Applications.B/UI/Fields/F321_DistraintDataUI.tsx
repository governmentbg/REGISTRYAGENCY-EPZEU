import { BindableReference, ObjectHelper } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControl, attributesClassFormControlMaxL3, Authority, AutoComplete, EPZEUBaseComponent, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { AddressUI, FieldContainerProps, PersonTypes, PersonUI, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import * as React from "react";
import { SectionSubTitle } from '../../../EPZEU.CR.Domain/UI';
import { F321_DistraintData } from '../../Models/Fields/ModelsAutoGenerated';

interface F321_DistraintDataProps extends FieldContainerProps, AsyncUIProps {

}

@observer class F321_DistraintDataUI extends EPZEUBaseComponent<F321_DistraintDataProps, F321_DistraintData> {
    private groupName: string;
    private groupName2: string;
    private groupName3: string;
    private persistedCourtLegalExecutor: string;

    @observable private courtLegalExecutorName: string = "";

    constructor(props?: F321_DistraintDataProps) {
        super(props);

        this.componentWillUpdate = this.componentWillUpdate.bind(this);

        this.groupName = ObjectHelper.newGuid();
        this.groupName2 = ObjectHelper.newGuid();
        this.groupName3 = ObjectHelper.newGuid();
        this.handleChange = this.handleChange.bind(this);
        this.handleChange2 = this.handleChange2.bind(this);
        this.handleChange3 = this.handleChange3.bind(this);

        this.selectAuthority = this.selectAuthority.bind(this);
        this.showAuthorityValue = this.showAuthorityValue.bind(this);
        this.handleAuthorityChange = this.handleAuthorityChange.bind(this);
        this.handleAuthoritySelectOption = this.handleAuthoritySelectOption.bind(this);
        this.initCourtName = this.initCourtName.bind(this);

        this.initCourtName();
    }

    componentDidUpdate(prevProps: FieldContainerProps, prevState: any, snapshot?: never): void {

        if (super.componentDidUpdate)
            super.componentDidUpdate(prevProps, prevState, snapshot);

        if (this.model.courtLegalExecutor != this.persistedCourtLegalExecutor)
            this.initCourtName();
    }

    initCourtName() {

        if (this.model.courtLegalExecutor && this.model.court) {
            this.persistedCourtLegalExecutor = this.model.courtLegalExecutor;

            this.props.registerAsyncOperation(Nomenclatures.getCourts().bind(this).then(authorities => {
                var corts = authorities.filter(authority => authority.authorityID == +this.model.courtLegalExecutor);

                if (corts && corts.length > 0) {
                    this.courtLegalExecutorName = corts[0].authorityName;
                }
                else {
                    this.courtLegalExecutorName = "";
                }
            }));
        } else {
            this.persistedCourtLegalExecutor = null;
            this.courtLegalExecutorName = "";
        }
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <PersonUI {...this.bind(m => m.subject)} PersonType={PersonTypes.DistraintData} />
                <AddressUI {...this.bind(m => m.address)} />
                <SectionSubTitle subTitleTextKey={"CR_GL_REASON_L"} />
                <div className="row">
                    <div className="form-group col-12">
                        <div className="custom-control custom-radio">
                            <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_court'} name={this.groupName} value={'court'} checked={this.model.court} />
                            <label className={"custom-control-label"} htmlFor={this.groupName + '_court'}>{this.getResource('GL_COURT_CODE_L')}</label>
                        </div>
                        <div className="custom-control custom-radio">
                            <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_legalExecutor'} name={this.groupName} value={'legalExecutor'} checked={this.model.legalExecutor} />
                            <label className={"custom-control-label"} htmlFor={this.groupName + '_legalExecutor'}>{this.getResource('CR_APP_BAILIFF_L')}</label>
                        </div>
                        <div className="custom-control custom-radio">
                            <input className={"custom-control-input"} type="radio" onChange={this.handleChange} id={this.groupName + '_adv'} name={this.groupName} value={'adv'} checked={this.model.adv} />
                            <label className={"custom-control-label"} htmlFor={this.groupName + '_adv'}>{this.getResource('CR_APP_ADV_L')}</label>
                        </div>
                    </div>
                </div>
                <div className="row">
                    {this.model.court ?
                        <div className="form-group col-lg-6">
                            {this.labelFor(m => m.courtLegalExecutor, 'CR_APP_COURT_BAILIFF_L')}
                            <AutoComplete
                                fullHtmlName="courtLegalExecutorName"
                                modelReference={new BindableReference(this, "courtLegalExecutorName")}
                                selector={this.selectAuthority}
                                showValue={this.showAuthorityValue}
                                handleSelectCallback={this.handleAuthoritySelectOption}
                                hasSelectedValue={this.model.courtLegalExecutor ? true : false}
                                handleChangeCallback={this.handleAuthorityChange}
                                triggerLength={1}
                                attributes={attributesClassFormControl}/>
                        </div>
                        :
                        this.model.legalExecutor ?
                            <div className='form-group col-lg-6'>
                                {this.labelFor(m => m.courtLegalExecutor, 'CR_APP_COURT_BAILIFF_L')}
                                {this.textBoxFor(m => m.courtLegalExecutor, attributesClassFormControlMaxL3)}
                            </div>
                            : null
                    }
                    <div className="form-group  col-sm-6">
                        {this.labelFor(m => m.caseNumber, 'CR_APP_COURT_NUMBER_L')}
                        {this.textBoxFor(m => m.caseNumber)}
                    </div>
                </div>
                <SectionSubTitle subTitleTextKey={"CR_APP_ARREST_ON_L"} />
                <div className="row">
                    <div className="form-group col-12">
                        <div className="custom-control custom-radio">
                            <input className={"custom-control-input"} type="radio" onChange={this.handleChange2} id={this.groupName2 + '_incomingAmount'} name={this.groupName2} value={'incomingAmount'} checked={this.model.incomingAmount} />
                            <label className={"custom-control-label"} htmlFor={this.groupName2 + '_incomingAmount'}>{this.getResource('CR_APP_AMOUNT_RECEIVED_DISTRIBUTION_L')}</label>
                        </div>



                        <div className="custom-control custom-radio">
                            <input className={"custom-control-input"} type="radio" onChange={this.handleChange2} id={this.groupName2 + '_remainingAmount'} name={this.groupName2} value={'remainingAmount'} checked={this.model.remainingAmount} />
                            <label className={"custom-control-label"} htmlFor={this.groupName2 + '_remainingAmount'}>{this.getResource('CR_APP_00046_L')}</label>
                        </div>
                    </div>
                </div>

                {
                    this.model.incomingAmount ?
                        <>
                            <SectionSubTitle subTitleTextKey={"CR_APP_AMOUNT_RECEIVED_DISTRIBUTION_L"} />
                            <div className="row">
                                <div className="form-group col-12">
                                    <div className="custom-control custom-radio">
                                        <input className={"custom-control-input"} type="radio" onChange={this.handleChange3} id={this.groupName3 + '_enterprisesLikeCombination'} name={this.groupName3} value={'enterprisesLikeCombination'} checked={this.model.enterprisesLikeCombination} />
                                        <label className={"custom-control-label"} htmlFor={this.groupName3 + '_enterprisesLikeCombination'}>{this.getResource('CR_APP_ENTERPRISE_AS_WHOLE_L')}</label>
                                    </div>
                                    <div className="custom-control custom-radio">
                                        <input className={"custom-control-input"} type="radio" onChange={this.handleChange3} id={this.groupName3 + '_separateAssets'} name={this.groupName3} value={'separateAssets'} checked={this.model.separateAssets} />
                                        <label className={"custom-control-label"} htmlFor={this.groupName3 + '_separateAssets'}>{this.getResource('CR_APP_SEPARATE_ASSETS_ENTERPRISE_L')}</label>
                                    </div>
                                </div>
                                {this.model.separateAssets == true ?
                                    <div className="form-group col-12">
                                        {this.textAreaFor(x => x.assetsOfCompany, null, 3)}
                                    </div> : null}
                            </div>
                        </>
                        : null
                }

                {
                    this.model.remainingAmount ?
                        <>
                            <SectionSubTitle subTitleTextKey={"CR_APP_00046_L"} />
                            <div className="row">
                                <div className="form-group col-sm-6 col-lg-4">
                                    {this.labelFor(m => m.price.amount, 'CR_APP_SIZE_L')}
                                    {this.textBoxFor(m => m.price.amount)}
                                </div>
                                <div className="form-group col-sm-6 col-lg-4">
                                    {this.labelFor(m => m.price.units, 'CR_APP_CURRENCY_L')}
                                    {this.textBoxFor(m => m.price.units)}
                                </div>
                            </div>
                        </>
                        : null
                }

            </>);
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <PersonUI {...this.bind(m => m.subject)} PersonType={PersonTypes.DistraintData} />
                <AddressUI {...this.bind(m => m.address)} />
                <div>
                    {this.model.court && <>{this.getResource('CR_GL_REASON_L') + ': ' + this.getResource('GL_COURT_CODE_L')} <br /></>}
                    {this.model.legalExecutor && <>{this.getResource('CR_GL_REASON_L') + ': ' + this.getResource('CR_APP_BAILIFF_L')} <br /></>}
                    {this.model.adv && <>{this.getResource('CR_GL_REASON_L') + ': ' + this.getResource('CR_APP_ADV_L')} <br /></>}

                    {this.model.court && this.courtLegalExecutorName && <>{this.getResource('CR_APP_COURT_BAILIFF_L') + ': ' + this.courtLegalExecutorName}</>}
                    {this.model.court && !this.courtLegalExecutorName && <>{this.getResource('CR_APP_COURT_BAILIFF_L') + ': ' + (this.model.courtLegalExecutor ? this.model.courtLegalExecutor : '')}</>}
                    {this.model.legalExecutor && <>{this.getResource('CR_APP_COURT_BAILIFF_L') + ': ' + (this.model.courtLegalExecutor ? this.model.courtLegalExecutor : '')}</>}
                    {this.model.courtLegalExecutor && this.model.caseNumber && ', '}
                    {this.model.caseNumber && <>{this.getResource('CR_APP_COURT_NUMBER_L') + ': ' + this.model.caseNumber} <br /> </>}

                    {this.model.incomingAmount && <>{this.getResource('CR_APP_ARREST_ON_L') + ': ' + this.getResource('CR_APP_AMOUNT_RECEIVED_DISTRIBUTION_L')} <br /></>}

                    {this.model.enterprisesLikeCombination && <>{this.getResource('CR_APP_ENTERPRISE_AS_WHOLE_L')} <br /></>}
                    {this.model.separateAssets && <>{this.getResource('CR_APP_SEPARATE_ASSETS_ENTERPRISE_L') + ': ' + this.model.assetsOfCompany}<br /></>}

                    {this.model.remainingAmount && <>{this.getResource('CR_APP_ARREST_ON_L') + ': ' + this.getResource('CR_APP_00046_L')} <br /></>}

                    {this.model.price.amount && <>{this.getResource('CR_APP_SIZE_L') + ': ' + this.model.price.amount} <br /></>}
                    {this.model.price.units && <>{this.getResource('CR_APP_CURRENCY_L') + ': ' + this.model.price.units} < br /></>}
                </div>
            </>
        );
    }

    @action private handleChange(e: any) {
        if (e.target.value == 'court') {
            this.model.court = true;
            this.model.legalExecutor = false;
            this.model.adv = false;
        } else if (e.target.value == 'legalExecutor') {
            this.model.court = false;
            this.model.legalExecutor = true;
            this.model.adv = false;
        } else if (e.target.value == 'adv') {
            this.model.court = false;
            this.model.legalExecutor = false;
            this.model.adv = true;
        }

        this.model.courtLegalExecutor = null;
        this.courtLegalExecutorName = '';
    }

    @action private handleChange2(e: any) {
        if (e.target.value == 'incomingAmount') {
            this.model.incomingAmount = true;
            this.model.remainingAmount = false;
        } else if (e.target.value == 'remainingAmount') {
            this.model.incomingAmount = false;
            this.model.remainingAmount = true;
        }
    }

    @action private handleChange3(e: any) {
        if (e.target.value == 'enterprisesLikeCombination') {
            this.model.enterprisesLikeCombination = true;
            this.model.separateAssets = false;
        } else if (e.target.value == 'separateAssets') {
            this.model.enterprisesLikeCombination = false;
            this.model.separateAssets = true;
        }

        this.model.assetsOfCompany = "";
    }


    //#region Authority

    selectAuthority(value: string): Promise<Authority[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCourts().then(s => {
                return s.filter(s => {
                    let authorityCheck: string = s.authorityID.toString().toLowerCase() + " - " + s.authorityName.toLowerCase();

                    return authorityCheck.indexOf(" " + valueLowerCase) > -1
                        || authorityCheck.indexOf("(" + valueLowerCase) > -1  // special case for (НАП).
                        || authorityCheck.indexOf(valueLowerCase) == 0;
                }
                );
            }
            );
        else
            return Promise.resolve([]);
    }

    showAuthorityValue(value: Authority): string {
        return value.authorityID.toString() + " - " + value.authorityName;
    }

    @action handleAuthorityChange() {
        this.model.courtLegalExecutor = null;
    }

    @action handleAuthoritySelectOption(value?: Authority) {
        if (value) {
            this.model.courtLegalExecutor = value.authorityID.toString();
            this.courtLegalExecutorName = value.authorityName;
        }
    }

    //#endregion
}

export const F321_DistraintDataFieldUI = withAsyncFrame(withFieldRecordContainer(F321_DistraintDataUI, {
    fieldLabelTextKey: "CR_F_321_L",
    fieldLabelFor: (model: F321_DistraintData) => model.subject,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "subject."]
}));
