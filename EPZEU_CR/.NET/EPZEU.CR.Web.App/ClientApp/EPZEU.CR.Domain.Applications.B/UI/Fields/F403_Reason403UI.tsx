import { BindableReference, ObjectHelper } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControl, attributesClassFormControlMaxL3, Authority, AutoComplete, EPZEUBaseComponent, Nomenclatures } from 'EPZEU.Core';
import { FieldContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F403_Reason403 } from '../../Models/Fields/ModelsAutoGenerated';

interface F403_Reason403Props extends FieldContainerProps, AsyncUIProps {

}

@observer class F403_Reason403UI extends EPZEUBaseComponent<F403_Reason403Props, F403_Reason403> {
    @observable private _courtName: string = "";
    private _groupName: string;

    private persistedCourt: string;

    constructor(props: F403_Reason403Props) {
        super(props);

        this.onChangeReason = this.onChangeReason.bind(this);
        this.initCourtName = this.initCourtName.bind(this);
        this.handleAuthorityChange = this.handleAuthorityChange.bind(this);
        this.handleAuthoritySelectOption = this.handleAuthoritySelectOption.bind(this);
        this._groupName = ObjectHelper.newGuid();

        this.initCourtName();
    }

    componentDidUpdate(prevProps: FieldContainerProps, prevState: any, snapshot?: never): void {
        if (super.componentDidUpdate) {
            super.componentDidUpdate(prevProps, prevState, snapshot);
        }

        if (this.model.courtLegalExecutor != this.persistedCourt) {
            this.initCourtName();
        }
    }

    private initCourtName() {
        if (this.model.courtLegalExecutor && this.model.court) {

            this.persistedCourt = this.model.courtLegalExecutor;

            this.props.registerAsyncOperation(Nomenclatures.getCourts().bind(this).then(authorities => {
                var corts = authorities.filter(authority => authority.authorityID == +this.model.courtLegalExecutor);

                if (corts && corts.length > 0) {
                    this._courtName = corts[0].authorityName;
                }
                else {
                    this.persistedCourt = null;
                    this._courtName = "";
                }
            }));
        } else {
            this.persistedCourt = null;
            this._courtName = "";
        }
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <div className="custom-control custom-radio">
                            <input className="custom-control-input" type="radio" onChange={this.onChangeReason} id={this._groupName + 'court'} name={this._groupName} value={'court'} checked={this.model.court} />
                            <label className="custom-control-label" htmlFor={this._groupName + 'court'}>{this.getResource('GL_COURT_CODE_L')}</label>
                        </div>
                        <div className="custom-control custom-radio">
                            <input className="custom-control-input" type="radio" onChange={this.onChangeReason} id={this._groupName + 'legalExecutor'} name={this._groupName} value={'legalExecutor'} checked={this.model.legalExecutor} />
                            <label className="custom-control-label" htmlFor={this._groupName + 'legalExecutor'}>{this.getResource('CR_APP_BAILIFF_L')}</label>
                        </div>
                        <div className="custom-control custom-radio">
                            <input className="custom-control-input" type="radio" onChange={this.onChangeReason} id={this._groupName + 'adv'} name={this._groupName} value={'adv'} checked={this.model.adv} />
                            <label className="custom-control-label" htmlFor={this._groupName + 'adv'}>{this.getResource('CR_APP_ADV_L')}</label>
                        </div>
                    </div>
                </div>
                <div className='row'>
                    {this.model.court ?
                        <div className='form-group col-lg-6'>
                            {this.labelFor(m => m.courtLegalExecutor, 'CR_APP_COURT_BAILIFF_L')}
                            <AutoComplete fullHtmlName="courtName"
                                modelReference={new BindableReference(this, () => this._courtName)}
                                selector={this.selectAuthority}
                                showValue={this.showAuthorityValue}
                                handleSelectCallback={this.handleAuthoritySelectOption}
                                hasSelectedValue={this.model.courtLegalExecutor ? true : false}
                                handleChangeCallback={this.handleAuthorityChange}
                                triggerLength={1}
                                attributes={attributesClassFormControl}/>
                        </div>
                        :
                        this.model.legalExecutor ?

                            <div className='form-group col-lg-6'>
                                {this.labelFor(m => m.courtLegalExecutor, 'CR_APP_COURT_BAILIFF_L')}
                                {this.textBoxFor(m => m.courtLegalExecutor, attributesClassFormControlMaxL3)}
                            </div>
                            : null
                    }
                    <div className='form-group col-sm-6'>
                        {this.labelFor(m => m.caseNumber, 'CR_APP_COURT_NUMBER_L')}
                        {this.textBoxFor(m => m.caseNumber)}
                    </div>
                </div>
            </>
        )
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {(this.model.court || this.model.legalExecutor || this.model.adv) && this.getResource('CR_GL_REASON_L') + ": "}
                {this.model.court && this.getResource('GL_COURT_CODE_L')}
                {this.model.legalExecutor && this.getResource('CR_APP_BAILIFF_L')}
                {this.model.adv && this.getResource('CR_APP_ADV_L')}

                {(this.model.court || this.model.legalExecutor || this.model.adv) && <br />}

                {(this.model.court || this.model.legalExecutor || this.model.adv) &&
                    <>
                        {this.model.courtLegalExecutor && this._courtName && <>{this.getResource('CR_APP_COURT_BAILIFF_L') + ": "} {this._courtName}</>}
                        {this.model.courtLegalExecutor && !this._courtName && <>{this.getResource('CR_APP_COURT_BAILIFF_L') + ": "} {this.model.courtLegalExecutor}</>}
                        {this.model.caseNumber && this.model.courtLegalExecutor && ', '}
                        {this.model.caseNumber && <>{this.getResource('CR_APP_COURT_NUMBER_L') + ": "} {this.model.caseNumber}</>}
                    </>}
            </>
        );
    }


    @action private onChangeReason(e: any) {
        this.model.court = this.model.legalExecutor = this.model.adv = false;

        switch (e.target.value) {
            case 'court': this.model.court = true; break;
            case 'legalExecutor': this.model.legalExecutor = true; break;
            case 'adv':
                this.model.adv = true;
                break;
            default: break;
        }
               
        this.model.courtLegalExecutor = null;
        this._courtName = '';
    }

    selectAuthority(value: string): Promise<Authority[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCourts().then(s => {
                return s.filter(s => {
                    let authorityCheck: string = s.authorityID.toString().toLowerCase() + " - " + s.authorityName.toLowerCase();

                    return authorityCheck.indexOf(" " + valueLowerCase) > -1
                        || authorityCheck.indexOf(valueLowerCase) == 0;
                }
                );
            }
            );
        else
            return Promise.resolve([]);
    }

    showAuthorityValue(value: Authority): string {
        return value.authorityID.toString() + " - " + value.authorityName;
    }

    @action handleAuthorityChange() {
        this.model.courtLegalExecutor = null;
    }

    @action handleAuthoritySelectOption(value?: Authority) {
        if (value) {
            this.model.courtLegalExecutor = value.authorityID.toString();
            this._courtName = value.authorityName;
        }
    }
}

export const F403_Reason403FieldUI = withAsyncFrame(withFieldRecordContainer(F403_Reason403UI, {
    fieldLabelTextKey: "CR_F_403_L",
    isMandatoryField: true,
}));