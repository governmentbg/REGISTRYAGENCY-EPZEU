import { BindableReference } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControl, Authority, AutoComplete, EPZEUBaseComponent, Nomenclatures, ValidationSummary, ValidationSummaryStrategy } from 'EPZEU.Core';
import { FieldContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F322_RaiseDistraint } from '../../Models/Fields/ModelsAutoGenerated';

const valSummaryPropNames = ["court"];

interface F322_RaiseDistraintProps extends FieldContainerProps, AsyncUIProps {

}

@observer class F322_RaiseDistraintUI extends EPZEUBaseComponent<F322_RaiseDistraintProps, F322_RaiseDistraint>{

    @observable private courtName: string = "";
    private persistedCourt: string;

    constructor(props?: F322_RaiseDistraintProps) {
        super(props);

        this.componentDidUpdate = this.componentDidUpdate.bind(this);
        this.selectAuthority = this.selectAuthority.bind(this);
        this.showAuthorityValue = this.showAuthorityValue.bind(this);
        this.handleAuthorityChange = this.handleAuthorityChange.bind(this);
        this.handleAuthoritySelectOption = this.handleAuthoritySelectOption.bind(this);
        this.initCourtName = this.initCourtName.bind(this);

        this.initCourtName();
    }

    componentDidUpdate(prevProps: FieldContainerProps, prevState: any, snapshot?: never): void {
        if (super.componentDidUpdate)
            super.componentDidUpdate(prevProps, prevState, snapshot);

        if (this.model.court != this.persistedCourt)
            this.initCourtName();
    }

    initCourtName() {
        if (this.model.court) {
            this.persistedCourt = this.model.court;

            this.props.registerAsyncOperation(Nomenclatures.getCourts().bind(this).then(authorities => {
                var corts = authorities.filter(authority => authority.authorityID == +this.model.court);

                if (corts && corts.length > 0) {
                    this.courtName = corts[0].authorityName;
                }
                else {
                    this.courtName = "";
                }
            }));
        }else {
            this.persistedCourt = null;
            this.courtName = "";
        }
    }

    renderEdit(): JSX.Element {
        return (<>
            <ValidationSummary {...this.bind(m => m)} propNames={valSummaryPropNames} strategy={ValidationSummaryStrategy.excludeAllExcept} />
            <div className="row">
                <div className="form-group col-lg-6">
                    {this.labelFor(m => m.court, 'GL_COURT_CODE_L')}
                    <div className="auto-complete-container">
                        <AutoComplete
                            fullHtmlName="courtName"
                            modelReference={new BindableReference(this, "courtName")}
                            selector={this.selectAuthority}
                            showValue={this.showAuthorityValue}
                            handleSelectCallback={this.handleAuthoritySelectOption}
                            hasSelectedValue={this.model.court ? true : false}
                            handleChangeCallback={this.handleAuthorityChange}
                            triggerLength={1}
                            attributes={attributesClassFormControl}/>
                    </div>
                </div>
                <div className="form-group col-sm-6">
                    {this.labelFor(m => m.caseNumber, 'CR_APP_COURT_NUMBER_L')}
                    {this.textBoxFor(m => m.caseNumber)}
                </div>
            </div>
        </>)
    }

    renderDisplay(): JSX.Element {
        return (<>
            {this.model.court && <>{this.getResource('GL_COURT_CODE_L')}: {this.courtName}</>}
            {(this.model.court && this.model.caseNumber) && ', '}
            {this.model.caseNumber && <>{this.getResource('CR_APP_COURT_NUMBER_L')}: {this.model.caseNumber} </>}
        </>);
    }

    //#region Authority

    selectAuthority(value: string): Promise<Authority[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCourts().then(s => {
                return s.filter(s => {
                    let authorityCheck: string = s.authorityID.toString().toLowerCase() + " - " + s.authorityName.toLowerCase();

                    return authorityCheck.indexOf(" " + valueLowerCase) > -1
                        || authorityCheck.indexOf("(" + valueLowerCase) > -1  // special case for (НАП).
                        || authorityCheck.indexOf(valueLowerCase) == 0;
                }
                );
            }
            );
        else
            return Promise.resolve([]);
    }

    showAuthorityValue(value: Authority): string {
        return value.authorityID.toString() + " - " + value.authorityName;
    }

    @action handleAuthorityChange() {
        this.model.court = null;
    }

    @action handleAuthoritySelectOption(value?: Authority) {
        if (value) {
            this.model.court = value.authorityID.toString();
            this.courtName = value.authorityName;
        }
    }

    //#endregion
}

export const F322_RaiseDistraintFieldUI = withAsyncFrame(withFieldRecordContainer(F322_RaiseDistraintUI, {
    fieldLabelTextKey: "CR_F_322_L",
}));
