import { ArrayHelper, ErrorLevels } from 'Cnsys.Core';
import { ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { B1 } from '../../ApplicationForms/ApplicationFormsB';
import { F041_ProcuratorsValidator } from '../../Fields/Validators/F041_ProcuratorsValidator';
import { F042_SepcialPowersValidator } from '../../Fields/Validators/F042_SepcialPowersValidator';
import { F043_WayOfRepresentation43Validator } from '../../Fields/Validators/F043_WayOfRepresentation43Validator';
import { B1Fields } from '../ModelsAutoGenerated';
import { ApplicationFormBFieldsBaseValidator, ApplicationFormBValidator } from './ApplicationFormBValidator';

export class B1Validator extends ApplicationFormBValidator<B1> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new B1FieldsValidator());
    }

    public validate(obj: B1): boolean {
        let isValid = super.validate(obj);

        let eraseProcura = obj.fields.eraseProcura;
        let isSubDeedClosureRequired = (eraseProcura.recordOperation == RecordOperations.Add || eraseProcura.recordOperation == RecordOperations.Current) && eraseProcura.cheked;

        if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, eraseProcura)) {
            obj.addError(this.getMessage('CR_APP_00263_E'), ErrorLevels.Error); //Избраната прокура е маркирана за заличаване и има полета за вписване.
            isValid = false;
        }

        return isValid;
    }
}

export class B1FieldsValidator extends ApplicationFormBFieldsBaseValidator<B1Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.sepcialPowers).setValidator(new F042_SepcialPowersValidator());
        this.ruleFor(m => m.procurators).setValidator(new F041_ProcuratorsValidator());
        this.ruleFor(m => m.wayOfRepresentation).setValidator(new F043_WayOfRepresentation43Validator());
    }

    public validate(obj: B1Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.procurators.procuratorsList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.wayOfRepresentation], true)) {

            let cntNotEmptyProcurators: number = ArrayHelper.queryable.from(obj.procurators.procuratorsList).where(m => m.recordOperation != RecordOperations.Erase && !this.validationContext.isRecordEmpty(m)).count();
            let wayOfRepresentationSelected: boolean = (obj.wayOfRepresentation.jointly || obj.wayOfRepresentation.severally || obj.wayOfRepresentation.otherWay) && obj.wayOfRepresentation.recordOperation != RecordOperations.Erase;

            if (cntNotEmptyProcurators > 1 && !wayOfRepresentationSelected) {
                obj.wayOfRepresentation.addError(this.getMessage('CR_APP_00113_E'));
                isValid = false;
            }
        }

        return isValid;
    }
}