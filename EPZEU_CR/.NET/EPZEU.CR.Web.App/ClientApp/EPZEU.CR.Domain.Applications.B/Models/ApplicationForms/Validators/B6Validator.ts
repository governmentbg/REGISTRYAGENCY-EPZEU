import { ApplicationFormBValidator, ApplicationFormBFieldsBaseValidator } from './ApplicationFormBValidator';
import { B6 } from '../../ApplicationForms/ApplicationFormsB';
import { B6Fields } from '../ModelsAutoGenerated';
import { F501_TermsOfLiquidationValidator } from '../../Fields/Validators/F501_TermsOfLiquidationValidator';
import { F502_LiquidatorsValidator } from '../../Fields/Validators/F502_LiquidatorsValidator';
import { F503_Representative503Validator } from '../../Fields/Validators/F503_Representative503Validator';
import { F504_ContinuingTradeActivityValidator } from '../../Fields/Validators/F504_ContinuingTradeActivityValidator';
import { RecordOperations, ValidatorHelpers, ProcessStates } from 'EPZEU.CR.Domain';
import { ErrorLevels } from 'Cnsys.Core';

export class B6Validator extends ApplicationFormBValidator<B6> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new B6FieldsValidator());
    }

    public validate(obj: B6): boolean {
        let isValid = super.validate(obj);

        let continuingTradeActivity = obj.fields.continuingTradeActivity;
        let isSubDeedClosureRequired = (continuingTradeActivity.recordOperation == RecordOperations.Add || continuingTradeActivity.recordOperation == RecordOperations.Current)
            && this.validationContext.isRecordDirty(continuingTradeActivity);

        if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, continuingTradeActivity)) {
            obj.addError(this.getMessage('CR_APP_00262_E'), ErrorLevels.Error); // Ликвидацията е маркирана за прекратяване (избрано е продължаване/ възстановяване на дейността) и има полета за вписване.
            isValid = false;
        }

        return isValid;
    }
}

export class B6FieldsValidator extends ApplicationFormBFieldsBaseValidator<B6Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.termsOfLiquidation).setValidator(new F501_TermsOfLiquidationValidator());
        this.ruleFor(m => m.liquidators).setValidator(new F502_LiquidatorsValidator());
        this.ruleFor(m => m.representative503).setValidator(new F503_Representative503Validator());
        this.ruleFor(m => m.continuingTradeActivity).setValidator(new F504_ContinuingTradeActivityValidator());
    }

    public validate(obj: B6Fields): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}