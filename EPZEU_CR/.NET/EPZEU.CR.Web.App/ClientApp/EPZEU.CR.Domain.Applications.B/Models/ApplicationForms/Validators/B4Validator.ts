import { ErrorLevels } from 'Cnsys.Core';
import { ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F305a_PledgeContractForTraderValidator } from 'EPZEU.CR.Domain.Applications.B/Models/Fields/Validators/F305a_PledgeContractForTraderValidator';
import { B4 } from '../../ApplicationForms/ApplicationFormsB';
import { F301_DebtorOverSecureClaimsValidator } from '../../Fields/Validators/F301_DebtorOverSecureClaimsValidator';
import { F303_AtPawnCreditorsValidator } from '../../Fields/Validators/F303_AtPawnCreditorsValidator';
import { F305_ReasonValidator } from '../../Fields/Validators/F305_ReasonValidator';
import { F306_Object306Validator } from '../../Fields/Validators/F306_Object306Validator';
import { F307_Size307Validator } from '../../Fields/Validators/F307_Size307Validator';
import { F308_InterestValidator } from '../../Fields/Validators/F308_InterestValidator';
import { F309_InterestAndDefaultForDelayValidator } from '../../Fields/Validators/F309_InterestAndDefaultForDelayValidator';
import { F310_Size310Validator } from '../../Fields/Validators/F310_Size310Validator';
import { F311_DescriptionValidator } from '../../Fields/Validators/F311_DescriptionValidator';
import { F312_Price312Validator } from '../../Fields/Validators/F312_Price312Validator';
import { F313_TermValidator } from '../../Fields/Validators/F313_TermValidator';
import { F314a_PledgedCreditorAgreement2Validator } from '../../Fields/Validators/F314a_PledgedCreditorAgreement2Validator';
import { F314_CircumstancesValidator } from '../../Fields/Validators/F314_CircumstancesValidator';
import { F315_PartOfClaimwhatIsSeekValidator } from '../../Fields/Validators/F315_PartOfClaimwhatIsSeekValidator';
import { F316_PropertyOverExecutionValidator } from '../../Fields/Validators/F316_PropertyOverExecutionValidator';
import { F317_DepositorValidator } from '../../Fields/Validators/F317_DepositorValidator';
import { F318_InvitationForAppointingOfManagerValidator } from '../../Fields/Validators/F318_InvitationForAppointingOfManagerValidator';
import { F319_ManagerOfTradeEnterpriseValidator } from '../../Fields/Validators/F319_ManagerOfTradeEnterpriseValidator';
import { F320_RestoringManagementRightValidator } from '../../Fields/Validators/F320_RestoringManagementRightValidator';
import { F321_DistraintDataValidator } from '../../Fields/Validators/F321_DistraintDataValidator';
import { F322_RaiseDistraintValidator } from '../../Fields/Validators/F322_RaiseDistraintValidator';
import { F323_Size323Validator } from '../../Fields/Validators/F323_Size323Validator';
import { F324a_EntryIntoPledgeCreditorRights2Validator } from '../../Fields/Validators/F324a_EntryIntoPledgeCreditorRights2Validator';
import { F324_StopExecutionOverPropertyValidator } from '../../Fields/Validators/F324_StopExecutionOverPropertyValidator';
import { F325a_PartialEraseDistraintValidator } from '../../Fields/Validators/F325a_PartialEraseDistraintValidator';
import { F325_EraseDistraintValidator } from '../../Fields/Validators/F325_EraseDistraintValidator';
import { F326_DateOfRenewingDistraintValidator } from '../../Fields/Validators/F326_DateOfRenewingDistraintValidator';
import { B4Fields } from '../ModelsAutoGenerated';
import { ApplicationFormBFieldsBaseValidator, ApplicationFormBValidator } from './ApplicationFormBValidator';

export class B4Validator extends ApplicationFormBValidator<B4> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new B4FieldsValidator());
    }

    public validate(obj: B4): boolean {
        let isValid = super.validate(obj);

        let eraseDistraint = obj.fields.eraseDistraint;
        let isSubDeedClosureRequired = (eraseDistraint.recordOperation == RecordOperations.Add || eraseDistraint.recordOperation == RecordOperations.Current) && eraseDistraint.checked;

        if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, eraseDistraint)) {
            obj.addError(this.getMessage('CR_APP_00161_E'), ErrorLevels.Error); //Избраният залог/запор е маркиран за заличаване и има полета за вписване.
            isValid = false;
        }

        return isValid;
    }
}

export class B4FieldsValidator extends ApplicationFormBFieldsBaseValidator<B4Fields>{
    constructor() {
        super();
        this.ruleFor(m => m.debtorOverSecureClaims).setValidator(new F301_DebtorOverSecureClaimsValidator());
        this.ruleFor(m => m.atPawnCreditors).setValidator(new F303_AtPawnCreditorsValidator());
        this.ruleFor(m => m.reason).setValidator(new F305_ReasonValidator());
        this.ruleFor(m => m.pledgeContractForTrader).setValidator(new F305a_PledgeContractForTraderValidator());
        this.ruleFor(m => m.object306).setValidator(new F306_Object306Validator());

        this.ruleFor(m => m.size307).setValidator(new F307_Size307Validator());
        this.ruleFor(m => m.interest).setValidator(new F308_InterestValidator());
        this.ruleFor(m => m.interestAndDefaultForDelay).setValidator(new F309_InterestAndDefaultForDelayValidator());
        this.ruleFor(m => m.size310).setValidator(new F310_Size310Validator());

        this.ruleFor(m => m.description).setValidator(new F311_DescriptionValidator());
        this.ruleFor(m => m.price312).setValidator(new F312_Price312Validator());
        this.ruleFor(m => m.term).setValidator(new F313_TermValidator());
        this.ruleFor(m => m.circumstances).setValidator(new F314_CircumstancesValidator());
        this.ruleFor(m => m.pledgedCreditorAgreement2).setValidator(new F314a_PledgedCreditorAgreement2Validator());
        this.ruleFor(m => m.partOfClaimwhatIsSeek).setValidator(new F315_PartOfClaimwhatIsSeekValidator());
        this.ruleFor(m => m.propertyOverExecution).setValidator(new F316_PropertyOverExecutionValidator());

        this.ruleFor(m => m.depositor).setValidator(new F317_DepositorValidator());
        this.ruleFor(m => m.invitationForAppointingOfManager).setValidator(new F318_InvitationForAppointingOfManagerValidator());
        this.ruleFor(m => m.managerOfTradeEnterprise).setValidator(new F319_ManagerOfTradeEnterpriseValidator());

        this.ruleFor(m => m.restoringManagementRight).setValidator(new F320_RestoringManagementRightValidator());
        this.ruleFor(m => m.distraintData).setValidator(new F321_DistraintDataValidator());
        this.ruleFor(m => m.raiseDistraint).setValidator(new F322_RaiseDistraintValidator());
        this.ruleFor(m => m.size323).setValidator(new F323_Size323Validator());
        this.ruleFor(m => m.stopExecutionOverProperty).setValidator(new F324_StopExecutionOverPropertyValidator());
        this.ruleFor(m => m.entryIntoPledgeCreditorRights2).setValidator(new F324a_EntryIntoPledgeCreditorRights2Validator());
        this.ruleFor(m => m.eraseDistraint).setValidator(new F325_EraseDistraintValidator());
        this.ruleFor(m => m.partialEraseDistraint).setValidator(new F325a_PartialEraseDistraintValidator());

        this.ruleFor(m => m.dateOfRenewingDistraint).setValidator(new F326_DateOfRenewingDistraintValidator());
    }

    public validate(obj: B4Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.partOfClaimwhatIsSeek, obj.propertyOverExecution], true)) {

            if (!this.validationContext.isRecordEmpty(obj.partOfClaimwhatIsSeek) && this.validationContext.isRecordEmpty(obj.propertyOverExecution))
                obj.propertyOverExecution.addError(this.getMessage('CR_APP_00227_E'));
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.partOfClaimwhatIsSeek, obj.depositor], true)) {

            if (!this.validationContext.isRecordEmpty(obj.partOfClaimwhatIsSeek) && this.validationContext.isRecordEmpty(obj.depositor))
                obj.depositor.addError(this.getMessage('CR_APP_00227_E'));
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.size307, obj.size310], true)) {

            if (this.validationContext.isRecordEmpty(obj.size307) && this.validationContext.isRecordEmpty(obj.size310)) {

                obj.size307.clearErrors();
                obj.size310.clearErrors();
                obj.size307.addError(this.getMessage('CR_APP_00151_E'));
                obj.size310.addError(this.getMessage('CR_APP_00151_E'));
                isValid = false;
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.stopExecutionOverProperty, obj.size323], true)) {

            if (!this.validationContext.isRecordEmpty(obj.size323)
                && this.validationContext.isRecordEmpty(obj.stopExecutionOverProperty)) {
                obj.stopExecutionOverProperty.clearErrors();
                obj.stopExecutionOverProperty.addError(this.getMessage('CR_APP_00152_E'));
                isValid = false;
            }
        }

        return isValid;
    }
}