import { ErrorLevels } from 'Cnsys.Core';
import { ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { B5 } from '../../ApplicationForms/ApplicationFormsB';
import { F400_DistraintIdentifierValidator } from '../../Fields/Validators/F400_DistraintIdentifierValidator';
import { F401_DistraintsValidator } from '../../Fields/Validators/F401_DistraintsValidator';
import { F403_Reason403Validator } from '../../Fields/Validators/F403_Reason403Validator';
import { F404a_MoratoryRateValidator } from '../../Fields/Validators/F404a_MoratoryRateValidator';
import { F404_Size404Validator } from '../../Fields/Validators/F404_Size404Validator';
import { F405_InterestsValidator } from '../../Fields/Validators/F405_InterestsValidator';
import { F406_DescriptionsValidator } from '../../Fields/Validators/F406_DescriptionsValidator';
import { F408_LiftingDistraintValidator } from '../../Fields/Validators/F408_LiftingDistraintValidator';
import { F409_Size409UIValidator } from '../../Fields/Validators/F409_Size409UIValidator';
import { F410_StopExecutionOverProperty410Validator } from '../../Fields/Validators/F410_StopExecutionOverProperty410Validator';
import { B5Fields } from '../ModelsAutoGenerated';
import { ApplicationFormBFieldsBaseValidator, ApplicationFormBValidator } from './ApplicationFormBValidator';

export class B5Validator extends ApplicationFormBValidator<B5> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new B5FieldsValidator());
    }

    public validate(obj: B5): boolean {
        let isValid = super.validate(obj);

        let liftingDistraint = obj.fields.liftingDistraint;
        let isSubDeedClosureRequired = (liftingDistraint.recordOperation == RecordOperations.Add || liftingDistraint.recordOperation == RecordOperations.Current) && this.validationContext.isRecordDirty(liftingDistraint);

        if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, liftingDistraint)) {
            obj.addError(this.getMessage('CR_APP_00161_E'), ErrorLevels.Error); //Избраният залог/запор е маркиран за заличаване и има полета за вписване.
            isValid = false;
        }

        return isValid;
    }
}

export class B5FieldsValidator extends ApplicationFormBFieldsBaseValidator<B5Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.distraintIdentifier).setValidator(new F400_DistraintIdentifierValidator());
        this.ruleFor(m => m.distraints).setValidator(new F401_DistraintsValidator());
        this.ruleFor(m => m.reason403).setValidator(new F403_Reason403Validator());
        this.ruleFor(m => m.size404).setValidator(new F404_Size404Validator());
        this.ruleFor(m => m.moratoryRate).setValidator(new F404a_MoratoryRateValidator());
        this.ruleFor(m => m.interests).setValidator(new F405_InterestsValidator());
        this.ruleFor(m => m.descriptions).setValidator(new F406_DescriptionsValidator());
        this.ruleFor(m => m.liftingDistraint).setValidator(new F408_LiftingDistraintValidator());
        this.ruleFor(m => m.size409).setValidator(new F409_Size409UIValidator());
        this.ruleFor(m => m.stopExecutionOverProperty410).setValidator(new F410_StopExecutionOverProperty410Validator());
    }

    public validate(obj: B5Fields): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}
