import { ErrorLevels } from 'Cnsys.Core';
import { ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { B2 } from '../../ApplicationForms/ApplicationFormsB';
import { F051a_BranchFirmValidator } from '../../Fields/Validators/F051a_BranchFirmValidator';
import { F051b_BranchIdentifierValidator } from '../../Fields/Validators/F051b_BranchIdentifierValidator';
import { F051_BranchSeatValidator } from '../../Fields/Validators/F051_BranchSeatValidator';
import { F052_BranchSubjectOfActivityValidator } from '../../Fields/Validators/F052_BranchSubjectOfActivityValidator';
import { F053_BranchManagersValidator } from '../../Fields/Validators/F053_BranchManagersValidator';
import { F054_VolumeOfRepresentationPowerValidator } from '../../Fields/Validators/F054_VolumeOfRepresentationPowerValidator';
import { B2Fields } from '../ModelsAutoGenerated';
import { ApplicationFormBFieldsBaseValidator, ApplicationFormBValidator } from './ApplicationFormBValidator';
import { F052a_MainActivityNKIDValidator } from '../../Fields/Validators/F052a_MainActivityNKIDValidator';

export class B2Validator extends ApplicationFormBValidator<B2> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new B2FieldsValidator());
    }

    public validate(obj: B2): boolean {
        let isValid = super.validate(obj);

        let branchClosure = obj.fields.branchClosure;
        let isSubDeedClosureRequired = (branchClosure.recordOperation == RecordOperations.Add || branchClosure.recordOperation == RecordOperations.Current) && branchClosure.closed;

        if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, branchClosure)) {
            obj.addError(this.getMessage('CR_APP_00264_E'), ErrorLevels.Error); //Избраният клон е маркиран за закриване и има полета за вписване.
            isValid = false;
        }

        return isValid;
    }
}

export class B2FieldsValidator extends ApplicationFormBFieldsBaseValidator<B2Fields>{
    constructor() {
        super();

        ////Клон
        this.ruleFor(m => m.branchFirm).setValidator(new F051a_BranchFirmValidator());
        this.ruleFor(m => m.branchIdentifier).setValidator(new F051b_BranchIdentifierValidator());
        this.ruleFor(m => m.branchSeat).setValidator(new F051_BranchSeatValidator());
        this.ruleFor(m => m.branchSubjectOfActivity).setValidator(new F052_BranchSubjectOfActivityValidator());
        this.ruleFor(m => m.mainActivityNKID).setValidator(new F052a_MainActivityNKIDValidator());
        this.ruleFor(m => m.branchManagers).setValidator(new F053_BranchManagersValidator());
        this.ruleFor(m => m.volumeOfRepresentationPower).setValidator(new F054_VolumeOfRepresentationPowerValidator());
    }

    public validate(obj: B2Fields): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}