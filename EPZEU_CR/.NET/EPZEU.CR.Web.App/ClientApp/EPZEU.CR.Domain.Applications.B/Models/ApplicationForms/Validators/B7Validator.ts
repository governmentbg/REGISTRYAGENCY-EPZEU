import { ArrayHelper, ErrorLevels } from 'Cnsys.Core';
import { ProcessStates, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { B7 } from '../../ApplicationForms/ApplicationFormsB';
import { F001b_NumberNationalRegister1bValidator } from '../../Fields/Validators/F001b_NumberNationalRegister1bValidator';
import { F529_ReasonForEntry529Validator } from '../../Fields/Validators/F529_ReasonForEntry529Validator';
import { F531_OffshoreCompanyValidator } from '../../Fields/Validators/F531_OffshoreCompanyValidator';
import { F532_OffshoreTransliterationValidator } from '../../Fields/Validators/F532_OffshoreTransliterationValidator';
import { F533_OffshoreSeatValidator } from '../../Fields/Validators/F533_OffshoreSeatValidator';
import { F534_OffshoreRepresentativesValidator } from '../../Fields/Validators/F534_OffshoreRepresentativesValidator';
import { F535_OffshoreWayOfRepresentationValidator } from '../../Fields/Validators/F535_OffshoreWayOfRepresentationValidator';
import { F536_OffshoreSpecialConditionsValidator } from '../../Fields/Validators/F536_OffshoreSpecialConditionsValidator';
import { F5371_OffshoreDirectControlCompanyRepresentativesValidator } from '../../Fields/Validators/F5371_OffshoreDirectControlCompanyRepresentativesValidator';
import { F537_OffshoreDirectControlCompaniesValidator } from '../../Fields/Validators/F537_OffshoreDirectControlCompaniesValidator';
import { F5381_OffshoreNoDirectControlCompanyRepresentativesValidator } from '../../Fields/Validators/F5381_OffshoreNoDirectControlCompanyRepresentativesValidator';
import { F538_OffshoreNoDirectControlCompaniesValidator } from '../../Fields/Validators/F538_OffshoreNoDirectControlCompaniesValidator';
import { F540_CircumstanceArticle4Validator } from '../../Fields/Validators/F540_CircumstanceArticle4Validator';
import { F550a_ContactPerson550aValidator } from '../../Fields/Validators/F550a_ContactPerson550aValidator';
import { F550_ActualOwnersValidator } from '../../Fields/Validators/F550_ActualOwnersValidator';
import { F551_EraseActualOwnerValidator } from '../../Fields/Validators/F551_EraseActualOwnerValidator';
import { B7Fields } from '../ModelsAutoGenerated';
import { ApplicationFormBFieldsBaseValidator, ApplicationFormBValidator } from './ApplicationFormBValidator';

export class B7Validator extends ApplicationFormBValidator<B7> {
    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new B7FieldsValidator());
    }

    public validate(obj: B7): boolean {
        let isValid = super.validate(obj);

        let eraseActualOwner = obj.fields.eraseActualOwner;
        let isSubDeedClosureRequired = (eraseActualOwner.recordOperation == RecordOperations.Add || eraseActualOwner.recordOperation == RecordOperations.Current) && eraseActualOwner.cheked;

        if (this.validationContext.processStates == ProcessStates.ForChange && isSubDeedClosureRequired && ValidatorHelpers.hasNewRecords(obj.fields, eraseActualOwner)) {
            obj.addError(this.getMessage('CR_APP_00261_E'), ErrorLevels.Error); //Посочените действителни собственици са маркирани за заличаване и има полета за вписване.
            isValid = false;
        }

        return isValid;
    }
}

export class B7FieldsValidator extends ApplicationFormBFieldsBaseValidator<B7Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.numberNationalRegister1b).setValidator(new F001b_NumberNationalRegister1bValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.reasonForEntry529).setValidator(new F529_ReasonForEntry529Validator());
        this.ruleFor(m => m.offshoreCompany).setValidator(new F531_OffshoreCompanyValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.offshoreTransliteration).setValidator(new F532_OffshoreTransliterationValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.offshoreSeat).setValidator(new F533_OffshoreSeatValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.offshoreRepresentatives).setValidator(new F534_OffshoreRepresentativesValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.offshoreWayOfRepresentation).setValidator(new F535_OffshoreWayOfRepresentationValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.offshoreSpecialConditions).setValidator(new F536_OffshoreSpecialConditionsValidator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.offshoreDirectControlCompanies).setValidator(new F537_OffshoreDirectControlCompaniesValidator());
        this.ruleFor(m => m.offshoreDirectControlCompanyRepresentatives).setValidator(new F5371_OffshoreDirectControlCompanyRepresentativesValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanies).setValidator(new F538_OffshoreNoDirectControlCompaniesValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanyRepresentatives).setValidator(new F5381_OffshoreNoDirectControlCompanyRepresentativesValidator());
        this.ruleFor(m => m.article4).setValidator(new F540_CircumstanceArticle4Validator()).when(m => m.reasonForEntry529.article6 == true);
        this.ruleFor(m => m.actualOwners).setValidator(new F550_ActualOwnersValidator());
        this.ruleFor(m => m.contactPerson550a).setValidator(new F550a_ContactPerson550aValidator());
        this.ruleFor(m => m.eraseActualOwner).setValidator(new F551_EraseActualOwnerValidator());
    }

    public validate(obj: B7Fields): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.offshoreRepresentatives.offshoreRepresentativesList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.offshoreWayOfRepresentation], true)) {

            let cntNotEmptyRepresentatives: number = ArrayHelper.queryable.from(obj.offshoreRepresentatives.offshoreRepresentativesList).where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();
            let wayOfRepresentationSelected: boolean = (obj.offshoreWayOfRepresentation.jointly || obj.offshoreWayOfRepresentation.severally || obj.offshoreWayOfRepresentation.otherWay) && obj.offshoreWayOfRepresentation.recordOperation != RecordOperations.Erase;

            if (cntNotEmptyRepresentatives > 1 && !wayOfRepresentationSelected) {
                //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                obj.offshoreWayOfRepresentation.clearErrors();
                obj.offshoreWayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                isValid = false;
            }

            if (wayOfRepresentationSelected && cntNotEmptyRepresentatives < 2) {

                //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                obj.offshoreWayOfRepresentation.clearErrors();
                obj.offshoreWayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                isValid = false;
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.offshoreDirectControlCompanyRepresentatives.offshoreDirectControlCompanyRepresentativesList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation], true)) {

            //537. Юридическо лице или друго правно образувание, чрез което пряко се упражнява контрол
            let cntNotEmptyRepresentatives537: number = ArrayHelper.queryable.from(obj.offshoreDirectControlCompanyRepresentatives.offshoreDirectControlCompanyRepresentativesList)
                .where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();

            let wayOfRepresentationSelected537: boolean = (obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.jointly
                || obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.severally
                || obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.otherWay);

            if (cntNotEmptyRepresentatives537 > 1 && !wayOfRepresentationSelected537) {
                //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.clearErrors();
                obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                isValid = false;
            }

            if (wayOfRepresentationSelected537 && obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.recordOperation != RecordOperations.Erase && cntNotEmptyRepresentatives537 < 2) {

                //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.clearErrors();
                obj.offshoreDirectControlCompanies.offshoreDirectControlCompanyWayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                isValid = false;
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.offshoreNoDirectControlCompanyRepresentatives.offshoreNoDirectControlCompanyRepresentativesList, true)
            || ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, [obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation], true)) {

            //538. Юридическо лице или друго правно образувание, чрез което непряко се упражнява контрол
            let cntNotEmptyRepresentatives538: number = ArrayHelper.queryable.from(obj.offshoreNoDirectControlCompanyRepresentatives.offshoreNoDirectControlCompanyRepresentativesList)
                .where(m => !this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase).count();

            let wayOfRepresentationSelected538: boolean = (obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.jointly
                || obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.severally
                || obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.otherWay);

            if (cntNotEmptyRepresentatives538 > 1 && !wayOfRepresentationSelected538) {
                //Полето "Начин на представляване" е задължително, когато представителите са повече от един!
                obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.clearErrors();
                obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.addError(this.getMessage('CR_APP_00078_I'));
                isValid = false;
            }

            if (wayOfRepresentationSelected538 && obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.recordOperation != RecordOperations.Erase && cntNotEmptyRepresentatives538 < 2) {

                //Полето "Начин на представляване" трябва да се избере само когато представителите са повече от един!
                obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.clearErrors();
                obj.offshoreNoDirectControlCompanies.offshoreNoDirectControlCompanyWayOfRepresentation.addError(this.getMessage('CR_APP_00055_E'));
                isValid = false;
            }
        }

        return isValid;
    }
}