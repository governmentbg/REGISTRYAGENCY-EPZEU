${ 
    // Enable extension methods by adding using Typewriter.Extensions.*
    using Typewriter.Extensions.Types;

    // Uncomment the constructor to change template settings.
    Template(Settings settings)
    {
        settings.OutputFilenameFactory= OutputFilenameFactory;    
    }

    string OutputFilenameFactory(File file)
    {
        return "ModelsAutoGenerated";
    }
            
    List<string> BaseClasses()
    {
        return new  List<string>() {  "object", "List", "{ [key: string]: any[]; }"};
    } 
    
    string WriteClass(Class classToWrite)
    {        
        string classJS = @"{0} 
@TypeSystem.typeDecorator('{1}', moduleContext.moduleName)
export class {1} extends {2} {{ {3}

    constructor(obj?: any){{
        super(obj)
         
        this.copyFrom(obj);
    }}
}}"; 

        string comment = classToWrite.DocComment != null && !string.IsNullOrEmpty(classToWrite.DocComment.Summary) ? "\r\n/**" + classToWrite.DocComment.Summary + "*/" : "";
        string name = classToWrite.Name;
        string baseClassName = BaseClassName(classToWrite);
        string properties = WriteProperties(classToWrite);

        return string.Format(classJS, comment, name, baseClassName, properties);
    }

    string BaseClassName(Class cls)
    {
        if(cls.BaseClass != null && !BaseClasses().Any(baseClass=>baseClass == cls.BaseClass.Name))
        {
            return cls.BaseClass.Name;
        }
        else
        {
            return "BaseDataModel";
        } 
    }

    string WriteProperties(Class cls)
    {
        string propertiesJS = "";

        foreach(var prop in cls.Properties)
        {
            if(!IsParentHasProp(prop, cls) && !prop.Attributes.Any(a=>a.Name == "JsonIgnore"))
            {            
                propertiesJS += WriteProperty(prop);
            }
        }

        return propertiesJS;
    }

    bool IsParentHasProp(Property property, Class cls)
    {
        if(cls.BaseClass != null)
        {
            if(cls.BaseClass.Properties.Any(p=>p.Name == property.Name))
            {
                return true;
            }

            return IsParentHasProp(property, cls.BaseClass);
        }

        return false;
    }

    string WriteProperty(Property property)
    {
        string propJS;

        if(property.Type.ClassName() == "Date")
        {
            propJS = @"
    
    @observable private _{1}: moment.Moment = null;
    {0}
    @TypeSystem.propertyDecorator('moment')
    public set {1}(val: moment.Moment){{
        this._{1} = val;
    }}
    {0}
    public get {1}(): moment.Moment{{
        return this._{1};
    }} ";
        }
        else if(BaseClasses().Contains(property.Type.ClassName()))
        {
            propJS = @"
                
    @observable private _{1}: any = null;
    {0}
    @TypeSystem.propertyDecorator('any')
    public set {1}(val: any){{
        this._{1} = val;
    }}
    {0}
    public get {1}(): any{{
        return this._{1};
    }} ";
        }
        else
        {
            propJS = @"

    @observable private _{1}: {2} = null;
    {0}
    {4}
    public set {1}(val: {2}){{
        this._{1} = val;
    }}
    {0}
    public get {1}(): {2}{{
        return this._{1};
    }}
    {0} ";
        }

        string comment = "";
        try
        {
            if(property.DocComment != null && !string.IsNullOrEmpty(property.DocComment.Summary))
            {
                comment = "\r\n\t/**" + property.DocComment.Summary + "*/";
            }
        }
        catch (Exception)
        {}
         
        return string.Format(propJS,
                             comment,                            
                             property.name,                                                          
                             property.Type.Name, 
                             property.Type.Default(),
                             Decorator(property)); 
    }

    string Decorator(Property property){
        var decorator = "";
        if(property.Type.IsEnumerable)
        {
            decorator = "@TypeSystem.propertyArrayDecorator({0})";
        }
        else
        {
            decorator = "@TypeSystem.propertyDecorator({0})";
        }

        if(property.Type.ClassName() == "number" ||
           property.Type.ClassName() == "string" ||
           property.Type.ClassName() == "boolean" ||
           property.Type.ClassName() == "any")
        {
            return string.Format(decorator,"'" + property.Type.ClassName()+ "'");
        }
        else
        {
            return string.Format(decorator, property.Type.ClassName() + " ? " + property.Type.ClassName() + " : moduleContext.moduleName + '.' + '" + property.Type.ClassName() + "'");
        }
    }

    string WriteEnum(Enum enumToWrite){
        
        string enumJS = @"
{0}
export enum {1} {{ {2}
 }}
TypeSystem.registerEnumInfo({1} , '{1}' , moduleContext.moduleName)";
        
        string comment = "";
        try
        {
            if(enumToWrite.DocComment != null && !string.IsNullOrEmpty(enumToWrite.DocComment.Summary))
            {
                comment = "\r\n/**" + enumToWrite.DocComment.Summary + "*/";
            }
        }
        catch (Exception)
        {}
           
        string name = enumToWrite.Name;        
        string values = WriteEnumValues(enumToWrite);

        return string.Format(enumJS, comment, name, values);
    }

    string WriteEnumValues(Enum enumToWrite){
        string enumValues = "";

        foreach(var value in enumToWrite.Values)
        {
            string comment = "";
            try
            {
                if(value.DocComment != null && !string.IsNullOrEmpty(value.DocComment.Summary))
                {
                    comment = "\r\n\t/**" + value.DocComment.Summary + "*/";
                }
            }
            catch (Exception)
            {}

            string enumValue = @"
    {0}
    {1} = {2},";

            enumValues += string.Format(enumValue, comment, value.Name, value.Value);
        }

        return enumValues;
    }
}

// Auto Generated Object
import * as moment from 'moment'
import { observable } from 'mobx'
import { TypeSystem, BaseDataModel } from 'Cnsys.Core'
import {  CompositeField, Record, RecordField, TextRecordField, Person, Address, Passport, SeatRecordField, ActivityNKIDField, Price, MannerRecordHolder, Contacts } from 'EPZEU.CR.Domain'
import { moduleContext } from '../../ModuleContext'

$Classes(c=>(c.Namespace == "EPZEU.CR.Domain.Fields"&&
            (c.Name == "F051a_BranchFirm" || 
             c.Name == "F051b_BranchIdentifier" || 
             c.Name == "F051_BranchSeat" ||
             c.Name == "F052_BranchSubjectOfActivity" ||
             c.Name == "F052a_MainActivityNKID" ||
             c.Name == "F0530_BranchManager" ||
             c.Name == "F053_BranchManagers" ||
             c.Name == "F054_VolumeOfRepresentationPower" ||
             c.Name == "F055_BranchClosure" ||
             c.Name == "F041_Procurators" ||
             c.Name == "F042_SepcialPowers" ||
             c.Name == "F043_WayOfRepresentation43" ||
             c.Name == "F044_EraseProcura" ||
             c.Name == "F0410_Procurator" ||
             c.Name == "F0420_SpecialPower" ||
             c.Name == "F200_PledgeDDIdentifier" ||
             c.Name == "F2010_Pledgor" ||
             c.Name == "F201_Pledgors" ||
             c.Name == "F2030_SecuredClaimDebtor" ||
             c.Name == "F203_SecuredClaimDebtors" ||
             c.Name == "F2050_PledgeCreditor" ||
             c.Name == "F205_PledgeCreditors" ||
             c.Name == "F207_SecuredClaimReason" ||
             c.Name == "F207a_ContractOfPledgeForShare" ||
             c.Name == "F208_SecuredClaimSubject" ||
             c.Name == "F209_SecuredClaimAmount" ||
             c.Name == "F210_SecuredClaimInterests" ||
             c.Name == "F211_SecuredClaimDelayInterests" ||
             c.Name == "F212_PledgeMoney" ||
             c.Name == "F213_PledgePropertyDescription" ||
             c.Name == "F214_PledgePropertyPrice" ||
             c.Name == "F215_ModalityDate" ||
             c.Name == "F216_ModalityCondition" ||
             c.Name == "F216a_PledgedCreditorAgreement" ||
             c.Name == "F217_PledgeExecutionClaim" ||
             c.Name == "F21800_Partner218Part" ||
             c.Name == "F2180_Partner218" ||
             c.Name == "F218_Partners218" ||
             c.Name == "F219_PledgeExecutionDepozitar" ||
             c.Name == "DepozitarDistraintData" ||
             c.Name == "F2200_DepozitarDistraintDetails" ||
             c.Name == "F22001_DepozitarDistraint" ||
             c.Name == "F22002_DepozitarReminderDistraint" ||
             c.Name == "F220_Depozitar" ||
             c.Name == "F221_DepozitarDistraintRemove" ||
             c.Name == "F222_StopOfExecutionSize" ||
             c.Name == "F223_StopOfExecutionProperty" ||
             c.Name == "F2231_EntryIntoPledgeCreditorRight" ||
             c.Name == "F223a_EntryIntoPledgeCreditorRights" ||
             c.Name == "F224_PledgeRenewDate" ||
             c.Name == "F225_PledgeAddemption" ||
             c.Name == "F300_ForfeitCompanyIdentifier" ||
             c.Name == "F301_DebtorOverSecureClaims" ||
             c.Name == "F3010_DebtorOverSecureClaim" ||
             c.Name == "F303_AtPawnCreditors" ||
             c.Name == "F3030_AtPawnCreditor" ||
             c.Name == "F305_Reason" ||
             c.Name == "F305a_PledgeContractForTrader" ||
             c.Name == "F306_Object306" ||
             c.Name == "F307_Size307" ||
             c.Name == "F308_Interest" ||
             c.Name == "F309_InterestAndDefaultForDelay" ||
             c.Name == "F310_Size310" ||
             c.Name == "F311_Description" ||
             c.Name == "F312_Price312" ||
             c.Name == "F313_Term" ||
             c.Name == "F314_Circumstances" ||
             c.Name == "F314a_PledgedCreditorAgreement2" ||
             c.Name == "F315_PartOfClaimwhatIsSeek" ||
             c.Name == "F316_PropertyOverExecution" ||
             c.Name == "F317_Depositor" ||
             c.Name == "F318_InvitationForAppointingOfManager" ||
             c.Name == "F319_ManagerOfTradeEnterprise" ||
             c.Name == "F320_RestoringManagementRight" ||
             c.Name == "F321_DistraintData" ||
             c.Name == "F322_RaiseDistraint" ||
             c.Name == "F323_Size323" ||
             c.Name == "F324_StopExecutionOverProperty" ||
             c.Name == "F32410_EntryIntoPledgeCreditorRight2" ||
             c.Name == "F324a_EntryIntoPledgeCreditorRights2" ||
             c.Name == "F325_EraseDistraint" ||
             c.Name == "F325a_PartialEraseDistraint" ||
             c.Name == "F326_DateOfRenewingDistraint" ||
             c.Name == "F400_DistraintIdentifier" ||
             c.Name == "F4010_Distraint" ||
             c.Name == "F401_Distraints" ||
             c.Name == "F403_Reason403" ||
             c.Name == "F404_Size404" ||
             c.Name == "F405_Interests" ||
             c.Name == "F040601_Description406" ||
             c.Name == "F04060_DescriptionCount" ||
             c.Name == "F406_Descriptions" ||
             c.Name == "F408_LiftingDistraint" ||
             c.Name == "F409_Size409" ||
             c.Name == "F410_StopExecutionOverProperty410" ||
             c.Name == "F404a_MoratoryRate" ||
             c.Name == "F501_TermsOfLiquidation" ||
             c.Name == "F5020_Liquidator" ||
             c.Name == "F502_Liquidators" ||
             c.Name == "F503_Representative503" ||
             c.Name == "F504_ContinuingTradeActivity" ||
             c.Name == "F001b_NumberNationalRegister1b" ||
             c.Name == "F529_ReasonForEntry529" || 
             c.Name == "F5500_ActualOwner" ||
             c.Name == "F550_ActualOwners" ||
             c.Name == "F535_OffshoreWayOfRepresentation" ||
             c.Name == "F540_CircumstanceArticle4" ||
             c.Name == "F531_OffshoreCompany" ||
             c.Name == "F532_OffshoreTransliteration" ||
             c.Name == "F533_OffshoreSeat" ||
             c.Name == "F5340_OffshoreRepresentative" ||
             c.Name == "F534_OffshoreRepresentatives" ||
             c.Name == "F536_OffshoreSpecialConditions" ||
             c.Name == "F551_EraseActualOwner" ||
             c.Name == "F5370_OffshoreDirectControlCompany" ||
             c.Name == "F53710_OffshoreDirectControlCompanyRepresentative" ||
             c.Name == "F5371_OffshoreDirectControlCompanyRepresentatives" ||
             c.Name == "F53702_OffshoreDirectControlCompanyLegalForm" ||
             c.Name == "F53703_OffshoreDirectControlCompanyTransliteration" ||
             c.Name == "F53704_OffshoreDirectControlCompanyNumberInRegister" ||
             c.Name == "F53705_OffshoreDirectControlCompanyAddress" ||
             c.Name == "F53707_OffshoreDirectControlCompanyWayOfRepresentation" ||
             c.Name == "F537_OffshoreDirectControlCompanies" ||
             c.Name == "F5380_OffshoreNoDirectControlCompany" ||
             c.Name == "F53810_OffshoreNoDirectControlCompanyRepresentative" ||
             c.Name == "F5381_OffshoreNoDirectControlCompanyRepresentatives" ||
             c.Name == "F53802_OffshoreNoDirectControlCompanyLegalForm" ||
             c.Name == "F53803_OffshoreNoDirectControlCompanyTransliteration" ||
             c.Name == "F53804_OffshoreNoDirectControlCompanyNumberInRegister" ||
             c.Name == "F53805_OffshoreNoDirectControlCompanyAddress" ||
             c.Name == "F53807_OffshoreNoDirectControlCompanyWayOfRepresentation" ||
             c.Name == "F538_OffshoreNoDirectControlCompanies" ||
             c.Name == "F550a_ContactPerson550a"
             )))[
$WriteClass]


   


