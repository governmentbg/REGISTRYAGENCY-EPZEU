import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { BG_COUNTRY_ID, EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, SimpleAddressValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F5500_ActualOwner, F550_ActualOwners } from '../ModelsAutoGenerated';

export class F550_ActualOwnersValidator extends EPZEUBaseValidator<F550_ActualOwners, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.actualOwnersList).setCollectionValidator(new F5500_ActualOwnerValidator());
    }

    public validate(obj: F550_ActualOwners): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (obj.actualOwnersList.length > 1) {
            for (var i = 0; i < obj.actualOwnersList.length; i++) {
                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.actualOwnersList[i], "person")
                    && obj.actualOwnersList[i].recordOperation != RecordOperations.Erase) {
                    obj.actualOwnersList[i].clearErrors(true);
                    obj.actualOwnersList[i].addError(this.getMessage('CR_APP_00063_E')); // Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.actualOwnersList, true)) {

            if (ArrayHelper.queryable.from(obj.actualOwnersList).where(m => (!ValidatorHelpers.isObjectWithPersonEmpty(m, "person")
                && m.recordOperation != RecordOperations.Erase)).count() == 0) {
                obj.actualOwnersList[0].person.clearErrors();
                obj.actualOwnersList[0].person.addError(this.getMessage('GL_INPUT_NAME_ID_E')); // Попълнете име и идентификатор.

                isValid = false;
            }
        }

        return isValid;
    }
}

export class F5500_ActualOwnerValidator extends RecordValidator<F5500_ActualOwner> {
    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F5500_ActualOwner): boolean {

        let isValid = super.validateInternal(obj);

        obj.address.clearErrors();
        obj.countryOfResidence.clearErrors();

        if (ObjectHelper.isStringNullOrEmpty(obj.person.name) || ObjectHelper.isStringNullOrEmpty(obj.person.indent)) {
            obj.person.clearErrors();
            obj.person.addError(this.getMessage('GL_INPUT_NAME_ID_E')); // Попълнете име и идентификатор.
            isValid = false;
        }

        if (isValid && !ValidatorHelpers.isObjectWithPersonEmpty(obj, "person")) {
            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (!isValidAddress.validate(obj.address))
                return false;
            else if (obj.address.countryID != BG_COUNTRY_ID && ValidatorHelpers.isEmptyAddress(obj.countryOfResidence)) {
                obj.countryOfResidence.addError(this.getMessage('CR_APP_00174_E')); // Попълнете държава на пребиваване.
                return false;
            }

            if (!ValidatorHelpers.isEmptyAddress(obj.countryOfResidence)){
                if (!isValidAddress.validate(obj.countryOfResidence))
                    return false;
            }
        }

        return isValid;
    }
}