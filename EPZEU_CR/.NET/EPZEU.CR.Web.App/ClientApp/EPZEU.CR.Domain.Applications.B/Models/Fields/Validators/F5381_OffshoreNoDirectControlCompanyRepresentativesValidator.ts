import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { DomainModelHepler, IApplicationFormValidationContext, PersonBaseValidator, RecordOperations, RecordValidator, SimpleAddressValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F53810_OffshoreNoDirectControlCompanyRepresentative, F5381_OffshoreNoDirectControlCompanyRepresentatives } from '../ModelsAutoGenerated';

export class F5381_OffshoreNoDirectControlCompanyRepresentativesValidator extends EPZEUBaseValidator<F5381_OffshoreNoDirectControlCompanyRepresentatives, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.offshoreNoDirectControlCompanyRepresentativesList).setCollectionValidator(new F53810_OffshoreNoDirectControlCompanyRepresentativeValidator());
    }

    public validate(obj: F5381_OffshoreNoDirectControlCompanyRepresentatives): boolean {
        let isValid = super.validate(obj);

        if (obj.offshoreNoDirectControlCompanyRepresentativesList.length > 1) {
            for (var i = 0; i < obj.offshoreNoDirectControlCompanyRepresentativesList.length; i++) {
                //Искаме да се показват валидации само когато записът е променен. В останалте случаи се зачистват
                if (obj.offshoreNoDirectControlCompanyRepresentativesList[i].recordOperation != RecordOperations.Add) {
                    obj.offshoreNoDirectControlCompanyRepresentativesList[i].clearErrors(true);
                }

                if (this.validationContext.isRecordEmpty(obj.offshoreNoDirectControlCompanyRepresentativesList[i]) && obj.offshoreNoDirectControlCompanyRepresentativesList[i].recordOperation != RecordOperations.Erase) {
                    // Искаме когато се показва съобщение "Попълнете данните за полето или го изтрийте" да не се показват други съобщеения.
                    obj.offshoreNoDirectControlCompanyRepresentativesList[i].clearErrors(true);
                    obj.offshoreNoDirectControlCompanyRepresentativesList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.offshoreNoDirectControlCompanyRepresentativesList, true, "CR_APP_00112_E")) //  Има друг представител със същия идентификатор (ЕГН/ЛНЧ).
                isValid = false;
        }

        return isValid;
    }
}

export class F53810_OffshoreNoDirectControlCompanyRepresentativeValidator extends RecordValidator<F53810_OffshoreNoDirectControlCompanyRepresentative> {
    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonBaseValidator());
    }

    public validateInternal(obj: F53810_OffshoreNoDirectControlCompanyRepresentative): boolean {

        let isValid = super.validateInternal(obj);

        if (!DomainModelHepler.isObjectEmpty(obj)) {

            if (ObjectHelper.isStringNullOrEmpty(obj.person.name)
                && ObjectHelper.isStringNullOrEmpty(obj.person.indent)) {
                obj.addError(this.getMessage('GL_INPUT_NAME_ID_E'));
                isValid = false;
            }

            if (isValid && !DomainModelHepler.isObjectEmpty(obj.person)) {

                //Грешката се визуализира когато няма избрана държава
                if (ObjectHelper.isNullOrUndefined(obj.person.countryID)) {
                    obj.person.addError('countryName', this.getMessage('CR_APP_00031_E'));
                    isValid = false;
                }else {
                    //Грешката се визуализира при избрана държава различна от България и в полето за идентификация е попълнено валиден идентификатор (ЕГН). 
                    if (ValidatorHelpers.isCountryBGRequired(obj.person.countryID, obj.person.indentType, null, true)) {
                        obj.person.addError('countryName', this.getMessage('CR_APP_00047_E'));
                        isValid = false;
                    }
                }
            }

            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (isValid && !DomainModelHepler.isObjectEmpty(obj.address)) {

                if (!isValidAddress.validate(obj.address))
                    isValid = false;
            }

            if (isValid && !DomainModelHepler.isObjectEmpty(obj.countryOfResidence)) {

                if (!isValidAddress.validate(obj.countryOfResidence))
                    isValid = false;
            }
        }

        return isValid;
    }
}