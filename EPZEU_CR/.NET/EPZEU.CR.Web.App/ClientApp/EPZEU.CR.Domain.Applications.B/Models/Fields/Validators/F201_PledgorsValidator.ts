import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F2010_Pledgor, F201_Pledgors } from '../ModelsAutoGenerated';

export class F2010_PledgorValidator extends RecordValidator<F2010_Pledgor> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectBaseValidator());
    }

    public validateInternal(obj: F2010_Pledgor): boolean {
        let isValid = super.validateInternal(obj);

        if (this.validationContext.isRecordEmpty(obj) || ValidatorHelpers.isEmptyBasePerson(obj.subject.name, obj.subject.indent, obj.subject.countryID, obj.subject.isForeignTrader)) {
            obj.subject.clearErrors();
            obj.subject.addError(this.getMessage('GL_INPUT_NAME_ID_E'));

            isValid = false;
        }

        obj.address.clearErrors(true);

        if ((obj.subject.indentType == IndentTypes.EGN || obj.subject.indentType == IndentTypes.LNCH || obj.subject.indentType == IndentTypes.BirthDate)) {

            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (!isValidAddress.validate(obj.address))
                isValid = false;
        }

        return isValid;
    }
}

export class F201_PledgorsValidator extends EPZEUBaseValidator<F201_Pledgors, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.pledgorList).setCollectionValidator(new F2010_PledgorValidator());
    }

    public validate(obj: F201_Pledgors): boolean {
        let isValid = super.validate(obj);

        if (obj.pledgorList.length > 1) {
            for (var i = 0; i < obj.pledgorList.length; i++) {
                if (this.validationContext.isRecordEmpty(obj.pledgorList[i]) && obj.pledgorList[i].recordOperation != RecordOperations.Erase) {
                    obj.pledgorList[i].subject.clearErrors();
                    obj.pledgorList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.pledgorList, false, "CR_APP_00133_E")) // Има друг залогодател със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;
        }

        return isValid;
    }
}