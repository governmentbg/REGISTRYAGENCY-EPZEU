import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { ContactsAddressValidator, IApplicationFormValidationContext, RecordValidator, SimpleAddressValidator } from 'EPZEU.CR.Domain';
import { F53802_OffshoreNoDirectControlCompanyLegalForm, F53803_OffshoreNoDirectControlCompanyTransliteration, F53804_OffshoreNoDirectControlCompanyNumberInRegister, F53805_OffshoreNoDirectControlCompanyAddress, F53807_OffshoreNoDirectControlCompanyWayOfRepresentation, F5380_OffshoreNoDirectControlCompany, F538_OffshoreNoDirectControlCompanies } from '../ModelsAutoGenerated';

export class F538_OffshoreNoDirectControlCompaniesValidator extends EPZEUBaseValidator<F538_OffshoreNoDirectControlCompanies, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.offshoreNoDirectControlCompany).setValidator(new F5380_OffshoreNoDirectControlCompanyValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanyLegalForm).setValidator(new F53802_OffshoreNoDirectControlCompanyLegalFormValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanyTransliteration).setValidator(new F53803_OffshoreNoDirectControlCompanyTransliterationValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanyNumberInRegister).setValidator(new F53804_OffshoreNoDirectControlCompanyNumberInRegisterValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanyAddress).setValidator(new F53805_OffshoreNoDirectControlCompanyAddressValidator());
        this.ruleFor(m => m.offshoreNoDirectControlCompanyWayOfRepresentation).setValidator(new F53807_OffshoreNoDirectControlCompanyWayOfRepresentationValidator());
    }

    public validate(obj: F538_OffshoreNoDirectControlCompanies): boolean {
        let isValid = super.validate(obj);


        return isValid;
    }
}

class F5380_OffshoreNoDirectControlCompanyValidator extends RecordValidator<F5380_OffshoreNoDirectControlCompany> {
    constructor() {
        super();
    }

    public validateInternal(obj: F5380_OffshoreNoDirectControlCompany): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F53802_OffshoreNoDirectControlCompanyLegalFormValidator extends RecordValidator<F53802_OffshoreNoDirectControlCompanyLegalForm> {
    constructor() {
        super();
    }

    public validateInternal(obj: F53802_OffshoreNoDirectControlCompanyLegalForm): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F53803_OffshoreNoDirectControlCompanyTransliterationValidator extends RecordValidator<F53803_OffshoreNoDirectControlCompanyTransliteration> {
    constructor() {
        super();
    }

    public validateInternal(obj: F53803_OffshoreNoDirectControlCompanyTransliteration): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F53804_OffshoreNoDirectControlCompanyNumberInRegisterValidator extends RecordValidator<F53804_OffshoreNoDirectControlCompanyNumberInRegister> {
    constructor() {
        super();
    }

    public validateInternal(obj: F53804_OffshoreNoDirectControlCompanyNumberInRegister): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

class F53805_OffshoreNoDirectControlCompanyAddressValidator extends RecordValidator<F53805_OffshoreNoDirectControlCompanyAddress> {
    constructor() {
        super();

        this.ruleFor(m => m.contacts).setValidator(new ContactsAddressValidator());
    }

    public validateInternal(obj: F53805_OffshoreNoDirectControlCompanyAddress): boolean {
        let isValid = super.validateInternal(obj);

        obj.address.clearErrors();

        if (!this.validationContext.isRecordEmpty(obj)) {

            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (!isValidAddress.validate(obj.address))
                isValid = false;
        }

        return isValid;
    }
}

class F53807_OffshoreNoDirectControlCompanyWayOfRepresentationValidator extends RecordValidator<F53807_OffshoreNoDirectControlCompanyWayOfRepresentation> {
    constructor() {
        super();

    }

    public validateInternal(obj: F53807_OffshoreNoDirectControlCompanyWayOfRepresentation): boolean {
        let isValid = super.validateInternal(obj);

        //Когато е избран друг начин на представляване трябва да се попълни описателното поле.
        if (obj.otherWay == true && ObjectHelper.isStringNullOrEmpty(obj.text)) {
            obj.addError('text', this.getMessage('CR_APP_00046_E'));
            isValid = false;
        }

        return isValid;
    }
}