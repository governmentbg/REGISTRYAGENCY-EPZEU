import { ArrayHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, RecordOperations, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F401_Distraints } from '../ModelsAutoGenerated';
import { F4010_DistraintValidator } from './F4010_DistraintValidator';

export class F401_DistraintsValidator extends EPZEUBaseValidator<F401_Distraints, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.distraintsList).setCollectionValidator(new F4010_DistraintValidator());
    }

    public validate(obj: F401_Distraints): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.distraintsList, true)) {

            if (ArrayHelper.queryable.from(obj.distraintsList).where(m => (!this.validationContext.isRecordEmpty(m) && m.recordOperation != RecordOperations.Erase)).count() == 0) {
                obj.clearErrors(true);
                obj.addError(this.getMessage('CR_APP_00154_E')); // Задължително е попълването поне на едно "Лице, в полза на което е наложен запорът"!
                isValid = false;
            }
        }

        if (obj.distraintsList.length > 1) {
            for (var i = 1; i < obj.distraintsList.length; i++) {
                let record = obj.distraintsList[i];

                if (this.validationContext.isRecordEmpty(record)) {
                    record.addError(this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.distraintsList, false, "CR_APP_00170_E")) // Има друг залогодател със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;
        }

        return isValid;
    }
}