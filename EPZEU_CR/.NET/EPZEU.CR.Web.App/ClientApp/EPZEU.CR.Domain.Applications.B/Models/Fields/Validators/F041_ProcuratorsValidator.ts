import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, PersonBaseValidator, RecordOperations, RecordValidator, SimpleAddressValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F0410_Procurator, F041_Procurators } from '../ModelsAutoGenerated';

export class F041_ProcuratorValidator extends RecordValidator<F0410_Procurator> {
    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonBaseValidator());
    }

    public validateInternal(obj: F0410_Procurator): boolean {
        let isValid = super.validateInternal(obj);

        if (isValid && !ValidatorHelpers.isEmptyAddress(obj.address) &&
            ObjectHelper.isStringNullOrEmpty(obj.person.name) && ObjectHelper.isStringNullOrEmpty(obj.person.indent)) {
            obj.person.addError(this.getMessage('GL_INPUT_NAME_ID_E'));
            isValid = false;
        }

        obj.address.clearErrors();
        if (obj.person.indentType == IndentTypes.BirthDate) {

            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (!isValidAddress.validate(obj.address, true)) {
                obj.address.addError(this.getMessage('CR_APP_00005_E'));
                isValid = false;
            }
        }

        return isValid;
    }
}

export class F041_ProcuratorsValidator extends EPZEUBaseValidator<F041_Procurators, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.procuratorsList).setCollectionValidator(new F041_ProcuratorValidator());
    }

    public validate(obj: F041_Procurators): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (obj.procuratorsList.length > 1) {

            for (var i = 0; i < obj.procuratorsList.length; i++) {

                if (this.validationContext.isRecordEmpty(obj.procuratorsList[i])) {
                    obj.procuratorsList[i].address.clearErrors();
                    obj.procuratorsList[i].addError(this.getMessage('CR_APP_00063_E')); //Попълнете полето или го изтрийте                   
                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.procuratorsList, true, "CR_APP_00114_E"))
                isValid = false;
        }

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.procuratorsList, true)) {

            let cntNotEmptyProcurators: number = ArrayHelper.queryable.from(obj.procuratorsList).where(m => m.recordOperation != RecordOperations.Erase && !this.validationContext.isRecordEmpty(m)).count();

            if (cntNotEmptyProcurators == 0) {
                obj.addError(this.getMessage('CR_APP_00184_E'));//Задължително е попълването поне на един прокурист!
                isValid = false;
            }
        }

        return isValid;
    }
}