import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F2231_EntryIntoPledgeCreditorRight, F223a_EntryIntoPledgeCreditorRights } from '../ModelsAutoGenerated';

export class F2231_EntryIntoPledgeCreditorRightValidator extends RecordValidator<F2231_EntryIntoPledgeCreditorRight> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectBaseValidator());
    }

    public validateInternal(obj: F2231_EntryIntoPledgeCreditorRight): boolean {
        let isValid = super.validateInternal(obj);

        if (obj.subject && (obj.subject.indentType == IndentTypes.EGN || obj.subject.indentType == IndentTypes.LNCH || obj.subject.indentType == IndentTypes.BirthDate)) {

            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (!isValidAddress.validate(obj.address))
                isValid = false;
        }

        return isValid;
    }
}

export class F223a_EntryIntoPledgeCreditorRightsValidator extends EPZEUBaseValidator<F223a_EntryIntoPledgeCreditorRights, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.entryIntoPledgeCreditorRightList).setCollectionValidator(new F2231_EntryIntoPledgeCreditorRightValidator());
    }

    public validate(obj: F223a_EntryIntoPledgeCreditorRights): boolean {
        let isValid = super.validate(obj);

        if (obj.entryIntoPledgeCreditorRightList.length > 1) {
            for (var i = 0; i < obj.entryIntoPledgeCreditorRightList.length; i++) {
                if (this.validationContext.isRecordEmpty(obj.entryIntoPledgeCreditorRightList[i]) && obj.entryIntoPledgeCreditorRightList[i].recordOperation != RecordOperations.Erase) {

                    obj.entryIntoPledgeCreditorRightList[i].subject.clearErrors();
                    obj.entryIntoPledgeCreditorRightList[i].address.clearErrors();
                    obj.entryIntoPledgeCreditorRightList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.entryIntoPledgeCreditorRightList, false, "CR_APP_00133_E")) // Има друг залогодател със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;
        }

        return isValid;
    }
}