import { ObjectHelper } from 'Cnsys.Core';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectFLEBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F3010_DebtorOverSecureClaim, F301_DebtorOverSecureClaims } from '../ModelsAutoGenerated';

export class F301_DebtorOverSecureClaimsValidator extends EPZEUBaseValidator<F301_DebtorOverSecureClaims, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.debtorOverSecureClaimList).setCollectionValidator(new F3010_DebtorOverSecureClaimValidator());
    }

    public validate(obj: F301_DebtorOverSecureClaims): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.debtorOverSecureClaimList, true)) {

            for (var i = 0; i < obj.debtorOverSecureClaimList.length; i++) {
                if (this.validationContext.isRecordEmpty(obj.debtorOverSecureClaimList[i]) && obj.debtorOverSecureClaimList[i].recordOperation != 1) {
                    obj.debtorOverSecureClaimList[i].subject.clearErrors();
                    obj.debtorOverSecureClaimList[i].subject.addError(this.getMessage('CR_APP_00016_Е')); // Попълнете име и идентификатор. Ако юридическото лице е чуждестранно, попълнете наименование и маркирайте "Чуждестранно юридическо лице".
                }
            }
        }

        if (obj.debtorOverSecureClaimList.length > 1) {
            for (var i = 0; i < obj.debtorOverSecureClaimList.length; i++) {
                if (this.validationContext.isRecordEmpty(obj.debtorOverSecureClaimList[i]) && obj.debtorOverSecureClaimList[i].recordOperation != RecordOperations.Erase) {
                    obj.debtorOverSecureClaimList[i].clearErrors(true);
                    obj.debtorOverSecureClaimList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.debtorOverSecureClaimList, false, "CR_APP_00134_E")) // Има друг длъжник със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;
        }

        return isValid;
    }
}

export class F3010_DebtorOverSecureClaimValidator extends RecordValidator<F3010_DebtorOverSecureClaim> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectFLEBaseValidator());
    }

    public validateInternal(obj: F3010_DebtorOverSecureClaim): boolean {

        let isValid = super.validateInternal(obj);

        obj.address.clearErrors();
        if (isValid && !this.validationContext.isRecordEmpty(obj)) {

            if (ObjectHelper.isStringNullOrEmpty(obj.subject.name) && ObjectHelper.isStringNullOrEmpty(obj.subject.indent) && obj.subject.isForeignTrader != true) {
                ////Попълнете име и идентификатор. Ако юридическото лице е чуждестранно, попълнете наименование и маркирайте "Чуждестранно юридическо лице".
                obj.addError(this.getMessage('CR_APP_00016_Е'));
                isValid = false;
            }

            if (!ObjectHelper.isStringNullOrEmpty(obj.subject.indent) && obj.subject.indentType == IndentTypes.BirthDate) {

                let isValidAddress = new SimpleAddressValidator();
                isValidAddress.setValidationContext(this.getValidationContext());

                if (!isValidAddress.validate(obj.address))
                    return false;
            }
        }

        return isValid;
    }
}