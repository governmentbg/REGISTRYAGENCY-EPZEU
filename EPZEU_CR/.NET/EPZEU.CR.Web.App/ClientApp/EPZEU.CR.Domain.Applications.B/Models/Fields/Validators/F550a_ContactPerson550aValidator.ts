import { ObjectHelper } from 'Cnsys.Core';
import { bgCountry, DomainModelHepler, PersonWithCountyValidator, RecordValidator, SimpleAddressValidator } from 'EPZEU.CR.Domain';
import { Dictionary } from 'typescript-collections';
import { F550a_ContactPerson550a } from '../ModelsAutoGenerated';

export class F550a_ContactPerson550aValidator extends RecordValidator<F550a_ContactPerson550a> {
    constructor() {
        super();

        this.ruleFor(m => m.person).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F550a_ContactPerson550a): boolean {

        let isValid = super.validateInternal(obj);

        obj.address.clearErrors();
        obj.permanentAddress.clearErrors();

        let isValidAddress = new SimpleAddressValidator();
        isValidAddress.setValidationContext(this.getValidationContext());

        if (!DomainModelHepler.isObjectEmpty(obj.address)) {

            if (!isValidAddress.validate(obj.address))
                isValid = false;
        }

        let propsDefaultValues = new Dictionary<string, any>();
        propsDefaultValues.setValue("countryCode", bgCountry.code)
        propsDefaultValues.setValue("countryID", bgCountry.id)
        propsDefaultValues.setValue("country", bgCountry.name)
        let isPermanentAddressEmpty: boolean = DomainModelHepler.isObjectEmpty(obj.permanentAddress, propsDefaultValues);

        if (!isPermanentAddressEmpty || (!ObjectHelper.isStringNullOrEmpty(obj.person.name) && !ObjectHelper.isStringNullOrEmpty(obj.person.indent))) {
            let errorMsg: string = !isPermanentAddressEmpty ? 'CR_APP_00005_E' : 'CR_APP_00172_E';

            if (!isValidAddress.validate(obj.permanentAddress, false, errorMsg))
                isValid = false;
        }

        return isValid;
    }
}