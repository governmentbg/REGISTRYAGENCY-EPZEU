import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F2050_PledgeCreditor, F205_PledgeCreditors } from '../ModelsAutoGenerated';

export class F2050_PledgeCreditorValidator extends RecordValidator<F2050_PledgeCreditor> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectBaseValidator());
    }

    public validateInternal(obj: F2050_PledgeCreditor): boolean {
        let isValid = super.validateInternal(obj);

        if (this.validationContext.isRecordEmpty(obj) || ValidatorHelpers.isEmptyBasePerson(obj.subject.name, obj.subject.indent, obj.subject.countryID, obj.subject.isForeignTrader)) {
            obj.subject.clearErrors();
            obj.subject.addError(this.getMessage('GL_INPUT_NAME_ID_E'));

            isValid = false;
        }

        obj.address.clearErrors();
        if ((obj.subject.indentType == IndentTypes.EGN || obj.subject.indentType == IndentTypes.LNCH || obj.subject.indentType == IndentTypes.BirthDate)) {

            let isValidAddress = new SimpleAddressValidator();
            isValidAddress.setValidationContext(this.getValidationContext());

            if (!isValidAddress.validate(obj.address))
                isValid = false;
        }

        return isValid;
    }
}

export class F205_PledgeCreditorsValidator extends EPZEUBaseValidator<F205_PledgeCreditors, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.pledgeCreditorsList).setCollectionValidator(new F2050_PledgeCreditorValidator());
    }

    public validate(obj: F205_PledgeCreditors): boolean {
        let isValid = super.validate(obj);

        if (obj.pledgeCreditorsList.length > 1) {

            for (var i = 0; i < obj.pledgeCreditorsList.length; i++) {
                if (this.validationContext.isRecordEmpty(obj.pledgeCreditorsList[i]) && obj.pledgeCreditorsList[i].recordOperation != RecordOperations.Erase) {
                    obj.pledgeCreditorsList[i].subject.clearErrors();
                    obj.pledgeCreditorsList[i].address.clearErrors();
                    obj.pledgeCreditorsList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.pledgeCreditorsList, false, "CR_APP_00135_E")) // Има друг кредитор със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;
        }

        return isValid;
    }
}