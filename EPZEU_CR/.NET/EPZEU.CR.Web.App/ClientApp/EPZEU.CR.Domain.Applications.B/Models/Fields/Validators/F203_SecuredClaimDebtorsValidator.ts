import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F2030_SecuredClaimDebtor, F203_SecuredClaimDebtors } from '../ModelsAutoGenerated';

export class F2030_SecuredClaimDebtorValidator extends RecordValidator<F2030_SecuredClaimDebtor> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectBaseValidator());
    }

    public validateInternal(obj: F2030_SecuredClaimDebtor): boolean {
        let isValid = super.validateInternal(obj);

        if (!this.validationContext.isRecordEmpty(obj)) {

            if (ValidatorHelpers.isEmptyBasePerson(obj.subject.name, obj.subject.indent, obj.subject.countryID, obj.subject.isForeignTrader)) {
                obj.subject.clearErrors();
                obj.subject.addError(this.getMessage('GL_INPUT_NAME_ID_E'));

                isValid = false;
            }
            obj.address.clearErrors();
            if ((obj.subject.indentType == IndentTypes.EGN || obj.subject.indentType == IndentTypes.LNCH || obj.subject.indentType == IndentTypes.BirthDate)) {
                let isValidAddress = new SimpleAddressValidator();
                isValidAddress.setValidationContext(this.getValidationContext());

                if (!isValidAddress.validate(obj.address))
                    isValid = false;
            }
        }

        return isValid;
    }
}

export class F203_SecuredClaimDebtorsValidator extends EPZEUBaseValidator<F203_SecuredClaimDebtors, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.securedClaimDebtorList).setCollectionValidator(new F2030_SecuredClaimDebtorValidator());
    }

    public validate(obj: F203_SecuredClaimDebtors): boolean {
        let isValid = super.validate(obj);

        if (obj.securedClaimDebtorList.length > 1) {

            for (var i = 0; i < obj.securedClaimDebtorList.length; i++) {

                if (this.validationContext.isRecordEmpty(obj.securedClaimDebtorList[i]) && obj.securedClaimDebtorList[i].recordOperation != RecordOperations.Erase) {
                    obj.securedClaimDebtorList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.securedClaimDebtorList, false, "CR_APP_00134_E")) // Има друг длъжник със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;
        }

        return isValid;
    }
}