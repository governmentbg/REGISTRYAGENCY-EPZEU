import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, PersonWithCountyValidator, RecordOperations, RecordValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F5020_Liquidator, F502_Liquidators } from '../ModelsAutoGenerated';

export class F5020_LiquidatorValidator extends RecordValidator<F5020_Liquidator> {

    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new PersonWithCountyValidator());
    }

    public validateInternal(obj: F5020_Liquidator): boolean {
        let isValid = super.validateInternal(obj);

        return isValid;
    }
}

export class F502_LiquidatorsValidator extends EPZEUBaseValidator<F502_Liquidators, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.liquidatorList).setCollectionValidator(new F5020_LiquidatorValidator());
    }

    public validate(obj: F502_Liquidators): boolean {
        let isValid = super.validate(obj);
        let valCtx = this.getValidationContext();

        if (ValidatorHelpers.hasMandatoryRecordsForChange(valCtx.processStates, obj.liquidatorList, true)) {

            let emptyOrForEraseLiquidator: number = 0;

            for (var i = 0; i < obj.liquidatorList.length; i++) {
                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.liquidatorList[i], "subject") || obj.liquidatorList[i].recordOperation == RecordOperations.Erase)
                    emptyOrForEraseLiquidator++;
            }

            if (emptyOrForEraseLiquidator == obj.liquidatorList.length) {

                obj.liquidatorList[0].addError(this.getMessage('CR_APP_LIQUIDATORS_Е')); // Задължително е попълването поне на един "Ликвидатор"!
                isValid = false;
            }
        }

        if (obj.liquidatorList.length > 1) {
            for (var i = 0; i < obj.liquidatorList.length; i++) {

                if (ValidatorHelpers.isObjectWithPersonEmpty(obj.liquidatorList[i], 'subject') && obj.liquidatorList[i].recordOperation != RecordOperations.Erase) {
                    obj.liquidatorList[i].clearErrors(true);
                    obj.liquidatorList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }
            }
        }

        //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
        if (ValidatorHelpers.isExistDublicateIndents(obj.liquidatorList, false, "CR_APP_00181_E")) // Има друг ликвидатор със същия идентификатор (ЕГН/ЛНЧ).
            isValid = false;

        return isValid;
    }
}