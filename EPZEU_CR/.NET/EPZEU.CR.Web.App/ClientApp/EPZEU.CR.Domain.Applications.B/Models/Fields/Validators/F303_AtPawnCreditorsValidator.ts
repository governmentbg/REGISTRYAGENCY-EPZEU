import { EPZEUBaseValidator } from 'EPZEU.Core';
import { IApplicationFormValidationContext, IndentTypes, RecordOperations, RecordValidator, SimpleAddressValidator, SubjectBaseValidator, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F3030_AtPawnCreditor, F303_AtPawnCreditors } from '../ModelsAutoGenerated';

export class F303_AtPawnCreditorsValidator extends EPZEUBaseValidator<F303_AtPawnCreditors, IApplicationFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(m => m.atPawnCreditorsList).setCollectionValidator(new F3030_AtPawnCreditorValidator());
    }

    public validate(obj: F303_AtPawnCreditors): boolean {
        let isValid = super.validate(obj);

        if (obj.atPawnCreditorsList.length > 1) {
            for (var i = 0; i < obj.atPawnCreditorsList.length; i++) {

                if (this.validationContext.isRecordEmpty(obj.atPawnCreditorsList[i]) && obj.atPawnCreditorsList[i].recordOperation != RecordOperations.Erase) {
                    obj.atPawnCreditorsList[i].subject.clearErrors();
                    obj.atPawnCreditorsList[i].address.clearErrors();
                    obj.atPawnCreditorsList[i].addError(this.getMessage('CR_APP_00063_E'));// Попълнете данните за полето или го изтрийте.

                    isValid = false;
                }                
            }

            //Грешката се визуалзира при добавяне на второ и следващо лице със същия идентификатор като на вече добавено лице
            if (ValidatorHelpers.isExistDublicateIndents(obj.atPawnCreditorsList, false, "CR_APP_00135_E")) // Има друг кредитор със същия идентификатор (ЕГН/ЛНЧ/ЕИК/БУЛСТАТ).
                isValid = false;          
        }    

        return isValid;
    }
}

export class F3030_AtPawnCreditorValidator extends RecordValidator<F3030_AtPawnCreditor> {
    constructor() {
        super();

        this.ruleFor(m => m.subject).setValidator(new SubjectBaseValidator());        
    }

    public validateInternal(obj: F3030_AtPawnCreditor): boolean {

        let isValid = super.validateInternal(obj);

        obj.address.clearErrors();
        if (this.validationContext.isRecordEmpty(obj) ||
            ValidatorHelpers.isEmptyBasePerson(obj.subject.name, obj.subject.indent, obj.subject.countryID, obj.subject.isForeignTrader)) {
            obj.subject.clearErrors();
            obj.subject.addError(this.getMessage('GL_INPUT_NAME_ID_E'));

            isValid = false;
        }
        else {
            if (isValid && obj.subject.indentType == IndentTypes.BirthDate) {

                let isValidAddress = new SimpleAddressValidator();
                isValidAddress.setValidationContext(this.getValidationContext());

                if (!isValidAddress.validate(obj.address, true)) {
                    obj.address.addError(this.getMessage('CR_APP_00005_E'));
                    return false;
                }
            }
        }                

        return isValid;
    }
}
