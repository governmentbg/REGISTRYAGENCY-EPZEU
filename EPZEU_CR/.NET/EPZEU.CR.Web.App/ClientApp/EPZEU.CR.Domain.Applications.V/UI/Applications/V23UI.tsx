import { ObjectHelper } from 'Cnsys.Core';
import { BaseProps, withAsyncFrame, AsyncUIProps } from 'Cnsys.UI.React';
import { EPZEUBaseComponent } from 'EPZEU.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicationFormContextProviderProps, ApplicationTitleUI, DocumentsUI, Person, RecordOperations, SectionTitleUI, withApplicationFormContext } from "EPZEU.CR.Domain";
import { isApplicationFormVBaseManager } from '../../Common/ApplicationFormVBaseManager';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { V23 } from "../../Models/ApplicationForms/ApplicationFormsV";
import { F7020_TransformingCompany, F702a0_TransformingCompany2 } from '../../Models/Fields/ModelsAutoGenerated';
import { F702a_TransformingCompanyFieldListUI } from "../Fields/F702a_TransformingCompanyUI";
import { F702_TransformingCompanyFieldListUI } from "../Fields/F702_TransformingCompanyUI";
import { F703_SuccessorFieldListUI } from "../Fields/F703_SuccessorUI";
import { F705_StoppingEntryFieldUI } from "../Fields/F705_StoppingEntryUI";
import { F706_NumberApplicationFieldUI } from "../Fields/F706_NumberApplicationUI";

interface V23UIProps extends BaseProps, ApplicationFormContextProviderProps, AsyncUIProps {
}

@observer class V23UIImpl extends EPZEUBaseComponent<V23UIProps, V23> {
    @observable private _transformationApplicationType: ApplicationFormTypes;

    constructor(props?: V23UIProps) {
        super(props);

        this.setTransformationApplicationType = this.setTransformationApplicationType.bind(this);
        this.onUICChange = this.onUICChange.bind(this);
    }

    renderEdit(): JSX.Element {

        return (
            <>
                <ApplicationTitleUI appType={ApplicationFormTypes.V23} />
                <SectionTitleUI titleKey={'CR_GL_TRANSFORMATION_L'} anchor="transformation" />
                <F705_StoppingEntryFieldUI {...this.bind(m => m.fields.stoppingEntry)} setTransformationApplicationType={this.setTransformationApplicationType} />
                <F706_NumberApplicationFieldUI {...this.bind(m => m.fields.numberApplication)} />
                {
                    this._transformationApplicationType == ApplicationFormTypes.V24
                        ? <F702a_TransformingCompanyFieldListUI {...this.bind(m => m.fields.transformingCompanys2)} onUICChange={this.onUICChange} />
                        : <F702_TransformingCompanyFieldListUI {...this.bind(m => m.fields.transformingCompanys)} onUICChange={this.onUICChange} />
                }
                <F703_SuccessorFieldListUI {...this.bind(m => m.fields.successors703)} onUICChange={this.onUICChange} />
                <SectionTitleUI titleKey={'GL_APPLIEDS_L'} anchor="documents" />
                <DocumentsUI {...this.bind(m => m.documents)} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} />
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <ApplicationTitleUI appType={ApplicationFormTypes.V23} />
                <SectionTitleUI titleKey={'CR_GL_TRANSFORMATION_L'} anchor="transformation" isForPreview={true} />
                {this._transformationApplicationType == ApplicationFormTypes.V24 ?
                    <F702a_TransformingCompanyFieldListUI {...this.bind(m => m.fields.transformingCompanys2)} />
                    :
                    <F702_TransformingCompanyFieldListUI {...this.bind(m => m.fields.transformingCompanys)} />
                }
                <F703_SuccessorFieldListUI {...this.bind(m => m.fields.successors703)} />
                <F705_StoppingEntryFieldUI {...this.bind(m => m.fields.stoppingEntry)} setTransformationApplicationType={this.setTransformationApplicationType} />
                <F706_NumberApplicationFieldUI {...this.bind(m => m.fields.numberApplication)} />
                {this.props.applicationManager.processContext.isDraftApplicationProcess()
                    && <>
                        <SectionTitleUI titleKey={'CR_APP_ATTACHED_DOCUMENTS_L'} anchor="documents" isForPreview={true} />
                        <DocumentsUI {...this.bind(m => m.documents)} possibleDocumentTypesGetter={this.props.applicationManager.getPossibleAttachedDocumentTypes} />
                    </>
                }
            </>
        );
    }

    private onUICChange(uic: string) {
        if (isApplicationFormVBaseManager(this.props.applicationManager) && this.props.applicationManager.onUICChange)
            this.props.registerAsyncOperation(this.props.applicationManager.onUICChange(uic));
    }

    public setTransformationApplicationType(applicationType: ApplicationFormTypes): void {
        this._transformationApplicationType = applicationType;

        if (applicationType == ApplicationFormTypes.V24) {
            this.model.fields.transformingCompanys.transformingCompanyList = [];
            if (this.model.fields.transformingCompanys2.transformingCompany2List.length == 0) {
                let company = new F702a0_TransformingCompany2();
                company.recordOperation = RecordOperations.Add;
                company.recordID = ObjectHelper.newGuid();
                company.subject = new Person()
                this.model.fields.transformingCompanys2.transformingCompany2List.push(company);
            }
        } else {
            this.model.fields.transformingCompanys2.transformingCompany2List = [];
            if (this.model.fields.transformingCompanys.transformingCompanyList.length == 0) {
                let company = new F7020_TransformingCompany();
                company.recordOperation = RecordOperations.Add;
                company.recordID = ObjectHelper.newGuid();
                company.subject = new Person();
                this.model.fields.transformingCompanys.transformingCompanyList.push(company);
            }
        }
    }
}

export const V23UI = withApplicationFormContext(withAsyncFrame(V23UIImpl));
