import { AsyncUIProps, withAsyncFrame } from "Cnsys.UI.React";
import { Country, EPZEUBaseComponent, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { Address, ListRecordsContainerProps, PersonTypes, PersonUI, withFieldSingleListRecordsContainer, Person } from 'EPZEU.CR.Domain';
import { observer } from 'mobx-react';
import * as React from "react";
import { F802a0_CoOperative2 } from '../../Models/Fields/ModelsAutoGenerated';

interface F802a_ReorganizeCoOperativeProps extends ListRecordsContainerProps, AsyncUIProps {
    onUICChange?: (uic: string) => void;
}

@observer class F802a_ReorganizeCoOperativesUI extends EPZEUBaseComponent<F802a_ReorganizeCoOperativeProps, F802a0_CoOperative2> {

    constructor(props: F802a_ReorganizeCoOperativeProps) {
        super(props);

        this.onHasForeignTraderCheckChanged = this.onHasForeignTraderCheckChanged.bind(this);
    }

    componentDidMount() {
        // инициализира се тук, а не в manager-a, защото като се добави нов запис не се минава през manager-a.
        if (!this.model.subject.countryName) {
            Nomenclatures.getBGCountry().then((bg: Country) => {
                this.model.subject.countryName = bg.name;
            });
        }
    }

    renderEdit(): JSX.Element {
        return (<>
            <PersonUI
                {...this.bind(m => m.subject, 'transformingCompany')}
                PersonType={PersonTypes.TransformingCompany702a802a}
                onHasForeignTraderCheckChanged={this.onHasForeignTraderCheckChanged}
                onUICChange={this.props.onUICChange}
            />
        </>)
    }

    renderDisplay(): JSX.Element {
        return (<>
            <PersonUI {...this.bind(m => m.subject, 'transformingCompany')} PersonType={PersonTypes.TransformingCompany702a802a} />
        </>);
    }

    private onHasForeignTraderCheckChanged(): void {
        this.model.subject.clearErrors();
        this.model.subject.foreignRegisterCode = null;
        this.model.subject.foreignLegalFormCode = null;
        this.model.subject.registrationNumber = null;
        this.model.subject.indent = null;
        this.model.subject.competentAuthorityForRegistration = null;
        this.model.subject.foreignLegalForm = null;
        this.model.subject.legalForm = null;
        this.model.subject.foreignRegister = null;
        this.model.subject.countryCode = null;
        this.model.subject.countryCodeBRIS = null;
        this.model.subject.countryID = null;
        this.model.subject.countryName = null;

        if (this.model.subject.isForeignTrader) {
            this.model.address = new Address();
        } else {
            this.model.address = null;
        }

        if (this.model.subject.isForeignTrader == false) {
            this.props.registerAsyncOperation(Nomenclatures.getBGCountry().then((bg: Country) => {
                this.model.subject.countryName = bg.name;
            }));
        }
    }
}

export const F802a_ReorganizeCoOperativesFieldListUI = withFieldSingleListRecordsContainer(withAsyncFrame(F802a_ReorganizeCoOperativesUI), F802a0_CoOperative2, {
    listSelector: m => m.coOperative2List,
    addButtonLabelKey: 'CR_APP_ADD_COOPERATION_L',
    fieldLabelTextKey: "CR_F_802a_L",
    hasAtLeastOneRecord: true,
    isMandatoryField: true,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "subject"],
    newRecordCtor: () => {
        return Nomenclatures.getBGCountry().then(bgCountry => {
            var obj = new F802a0_CoOperative2();

            obj.subject = new Person();
            obj.subject.countryCode = bgCountry.code;
            obj.subject.countryID = bgCountry.id;
            obj.subject.countryName = bgCountry.name;

            return obj;
        })
    }
});