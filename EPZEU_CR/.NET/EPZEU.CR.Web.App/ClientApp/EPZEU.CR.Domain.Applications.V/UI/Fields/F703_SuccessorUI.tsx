import { ObjectHelper } from "Cnsys.Core";
import { AsyncUIProps, withAsyncFrame } from "Cnsys.UI.React";
import { attributesClassFormControlMaxL9, Button, EPZEUBaseComponent, LegalForm, Nomenclatures, ValidationSummaryStrategy } from 'EPZEU.Core';
import { ApplicationFormTypes, LegalForms } from "EPZEU.CR.Core";
import { ApplicationFormContextProviderProps, DeedsDataService, ListRecordsContainerProps, Person, PersonUI, ValidatorHelpers, withApplicationFormContext, withFieldSingleListRecordsContainer } from 'EPZEU.CR.Domain';
import { PersonTypes } from "EPZEU.CR.Domain";
import { observable, runInAction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F7030_Successor } from '../../Models/Fields/ModelsAutoGenerated';

interface F703_SuccessorProps extends ListRecordsContainerProps, AsyncUIProps, ApplicationFormContextProviderProps {
    showLegalFormDropdown?: boolean;
    hideUIC?: boolean;
    onUICChange?: (uic: string) => void;
    companyLabel?: string;
    legalFormLabel?: string;
}

@observer class F703_SuccessorUI extends EPZEUBaseComponent<F703_SuccessorProps, F7030_Successor> {

    constructor(props: F703_SuccessorProps) {
        super(props)
        this.onChangeLegalForm = this.onChangeLegalForm.bind(this);

        // инициализира се тук, а не в manager-a, защото като се добави нов запис не се минава през manager-a.
        if ((this.props.applicationManager.application.appType == ApplicationFormTypes.V21 || this.props.applicationManager.application.appType == ApplicationFormTypes.V22)
            && ObjectHelper.isStringNullOrEmpty(this.model.legalForm)) {
            this.model.legalForm = '-1';
        }
    }

    renderEdit(): JSX.Element {
        return <Person703UI
            showLegalFormDropdown={this.props.showLegalFormDropdown}
            hideUIC={this.props.hideUIC}
            legalForm={this.model.legalForm}
            onChangeLegalForm={this.onChangeLegalForm}
            onUICChange={this.props.onUICChange}
            companyLabel={this.props.companyLabel}
            legalFormLabel={this.props.legalFormLabel}
            {...this.bind(m => m.subject, 'successor')} />;
    }

    renderDisplay(): JSX.Element {
        return (<>
            <PersonUI {...this.bind(m => m.subject, 'successor')} PersonType={PersonTypes.Successor703} />
        </>);
    }

    private onChangeLegalForm(legalForm: string): void {
        this.model.legalForm = legalForm;
    }
}

interface F703_UIProps extends F703_SuccessorProps {
    onChangeLegalForm: (legalForm: string) => void;
    legalForm: string;
    onUICChange?: (uic: string) => void;
    companyLabel?: string;
    legalFormLabel?: string;
}

@observer class Person703UIImpl extends EPZEUBaseComponent<F703_UIProps, Person> {
    @observable private _legalForms: LegalForm[] = [];

    private _reportsDataService: DeedsDataService;

    constructor(props: F703_UIProps) {
        super(props);

        this.onSearch = this.onSearch.bind(this);
        this.onSelectLegalForm = this.onSelectLegalForm.bind(this);
        this.getCompanyByUIC = this.getCompanyByUIC.bind(this);
        this.onUICChange = this.onUICChange.bind(this);

        this._reportsDataService = new DeedsDataService();

        Nomenclatures.getLegalForms().then((legalForms: LegalForm[]) => {

            if (this.props.applicationManager.application.appType == ApplicationFormTypes.V25 || this.props.applicationManager.application.appType == ApplicationFormTypes.V26)
                this._legalForms = legalForms.filter(x => x.id == LegalForms.ASSOC || x.id == LegalForms.FOUND || x.id == LegalForms.BFLE || x.id == LegalForms.CC);
            else
                this._legalForms = legalForms.sort((a: LegalForm, b: LegalForm) => a.name > b.name ? 1 : -1);
        });
    }

    renderEdit(): JSX.Element {
        return (
            <>
                {this.props.hideUIC
                    ? null
                    : <>
                        <div className="row">
                            <div className="col-12">
                                {this.labelFor(m => m.indent, 'GL_COMPANY_ID_L')}
                            </div>
                        </div>
                        <div className="row">
                            <div className="form-group col-6">
                                {this.textBoxFor(m => m.indent, attributesClassFormControlMaxL9, this.onUICChange)}
                                {this.model.nameAndLegalFormText ? <div className="form-text">{this.model.nameAndLegalFormText}</div> : null}
                            </div>
                            <div className="form-group col-auto">
                                <Button type="button" className="btn btn-outline-light text-dark" lableTextKey={"GL_EXTRACT_DATA_L"} onClick={this.onSearch}>
                                    <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i></Button>
                            </div>
                        </div>
                    </>
                }
                <div className="row">
                    <div className="form-group col">
                        {this.labelFor(m => m.name, ObjectHelper.isStringNullOrEmpty(this.props.companyLabel) ? 'GL_COMPANY_L' : this.props.companyLabel)}
                        {this.textBoxFor(m => m.name)}
                    </div>
                </div>
                {this.props.showLegalFormDropdown &&
                    <div className="row">
                        <div className="form-group col">
                            <select value={this.props.legalForm ? this.props.legalForm : '-1'} onChange={this.onSelectLegalForm} className="form-control">
                                <option key={0} value="-1">{this.getResource(ObjectHelper.isStringNullOrEmpty(this.props.legalFormLabel) ? 'CR_APP_CHOOSE_LEGAL_FORM_FOR_FOUNDING_COMPANY_L' : this.props.legalFormLabel)}</option>
                                {this._legalForms.map((legalForm, i) => <option value={legalForm.id} key={ObjectHelper.newGuid()}>{legalForm.name}</option>)}
                            </select>
                        </div>
                    </div>
                }
            </>
        )
    }

    renderDisplay(): JSX.Element {
        return <></>;
    }

    onSearch(): any {
        // Ако е запазена чернова с невалиден UIC, при първоначалното й зареждане в модела няма да има грешки.
        if (!ValidatorHelpers.isValidUIC(this.model.indent) && this.model.getPropertyErrors('indent').length == 0) {
            this.model.addError('indent', this.getResource('GL_INPUT_VALID_ID_E'))
        }

        this.getCompanyByUIC();
    }

    private getCompanyByUIC(): void {
        if (ValidatorHelpers.isValidUIC(this.model.indent)) {
            this.props.registerAsyncOperation(this._reportsDataService.getDeedSummary(this.model.indent).then((report) => {
                runInAction(() => {
                    if (!report) {
                        this.model.removeError('indent');
                        this.model.addError('indent', this.getResource('GL_NOT_FOUND_COMPANY_E'));
                        this.model.name = '';
                    } else {
                        this.model.name = report.companyName;
                        this.model.initialName = report.companyName;
                        this.model.nameAndLegalFormText = report.companyFullName;
                        this.props.onChangeLegalForm(report.legalForm.toString());
                    }
                });
            }));
        }
    }

    private onUICChange(e: any): void {
        this.model.nameAndLegalFormText = "";
        if (this.props.onUICChange)
            this.props.onUICChange(e.target.value)
    }

    private onSelectLegalForm(e: any): void {
        this.props.onChangeLegalForm(e.target.value);
    }
}

const Person703UI = withAsyncFrame(withApplicationFormContext(Person703UIImpl));

export const F703_SuccessorFieldUI = withFieldSingleListRecordsContainer(withApplicationFormContext(F703_SuccessorUI), F7030_Successor, {
    listSelector: m => m.successorList,
    fieldLabelTextKey: "CR_F_703_L",
    hasOnlyOneRecord: true,
    isMandatoryField: true,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "subject"]
});

export const F703_SuccessorFieldListUI = withFieldSingleListRecordsContainer(withApplicationFormContext(F703_SuccessorUI), F7030_Successor, {
    listSelector: m => m.successorList,
    addButtonLabelKey: 'CR_APP_ADD_SUCCESSOR_L',
    fieldLabelTextKey: "CR_F_703_L",
    hasAtLeastOneRecord: true,
    isMandatoryField: true,
    valSummaryStrategy: ValidationSummaryStrategy.excludeAllExcept,
    valSummaryRecursive: true,
    valSummaryPropNames: ["", "subject"]
});