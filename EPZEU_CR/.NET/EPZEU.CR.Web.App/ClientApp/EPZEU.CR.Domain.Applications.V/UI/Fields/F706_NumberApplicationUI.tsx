import { BindableReference } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControl, attributesClassFormControlMaxL14, Authority, AutoComplete, EPZEUBaseComponent, Nomenclatures } from 'EPZEU.Core';
import { FieldContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F706_NumberApplication } from '../../Models/Fields/ModelsAutoGenerated';

interface F706_NumberApplicationProps extends FieldContainerProps, AsyncUIProps {
}

@observer class F706_NumberApplicationUI extends EPZEUBaseComponent<F706_NumberApplicationProps, F706_NumberApplication> {
    @observable private _courtName: string = "";
    private persistedCourt: string;

    constructor(props: F706_NumberApplicationProps) {
        super(props);
        this.initCourtName = this.initCourtName.bind(this);
        this.handleAuthorityChange = this.handleAuthorityChange.bind(this);
        this.handleAuthoritySelectOption = this.handleAuthoritySelectOption.bind(this);

        this.initCourtName();
    }

    private initCourtName() {
        if (this.model.courtCode) {
            this.persistedCourt = this.model.courtCode;

            this.props.registerAsyncOperation(Nomenclatures.getCourts().bind(this).then(authorities => {
                var corts = authorities.filter(authority => authority.authorityID == +this.model.courtCode);

                if (corts && corts.length > 0) {
                    this._courtName = corts[0].authorityName;
                }
                else {
                    this._courtName = "";
                }
            }));
        }
        else {
            this.persistedCourt = null;
            this._courtName = "";
        }
    }

    componentDidUpdate(prevProps: FieldContainerProps, prevState: any, snapshot?: never): void {
        if (super.componentDidUpdate) {
            super.componentDidUpdate(prevProps, prevState, snapshot);
        }

        if (this.model.courtCode != this.persistedCourt) {

            this.initCourtName();
        }
    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className='row'>
                    <div className='form-group col'>
                        {this.labelFor(m => m.incomingNumber, 'CR_GL_INCOMING_REG_NUMBER_APPL_CONTESTATION_TRANSFORM_L')}
                        {this.textBoxFor(m => m.incomingNumber, attributesClassFormControlMaxL14)}
                    </div>
                    <div className='form-group col-auto'>
                        {this.labelFor(m => m.date, 'CR_APP_FROM_DATE_L')}
                        {this.dateFor(m => m.date)}
                    </div>
                    <div className='form-group col-12 col-lg-4'>
                        {this.labelFor(m => m.courtCode, 'GL_COURT_CODE_L')}
                        <AutoComplete fullHtmlName="courtName"
                            modelReference={new BindableReference(this, () => this._courtName)}
                            selector={this.selectAuthority}
                            showValue={this.showAuthorityValue}
                            handleSelectCallback={this.handleAuthoritySelectOption}
                            hasSelectedValue={this.model.courtCode ? true : false}
                            handleChangeCallback={this.handleAuthorityChange}
                            triggerLength={1}
                            attributes={attributesClassFormControl}/>
                    </div>
                </div>
            </>
        )
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {this.model.incomingNumber && <span>{this.getResource('CR_GL_INCOMING_REG_NUMBER_APPL_CONTESTATION_TRANSFORM_L') + ': ' + this.model.incomingNumber}</span>}
                {this.model.incomingNumber && (this.model.date || this.model.courtCode) && ', '}
                {this.model.date && <span className='text-lowercase'>{this.getResource('CR_APP_FROM_DATE_L') + ': ' + this.model.date.format('DD.MM.YYYY')} {this.getResource('GL_YEAR_ABBREVIATION_L')}</span>}
                {this.model.date && this.model.courtCode && ', '}
                {this.model.courtCode && <span>{this.getResource('GL_COURT_CODE_L') + ': ' + this._courtName}</span>}
            </>
        );
    }

    selectAuthority(value: string): Promise<Authority[]> {
        var valueLowerCase = value.toLowerCase();

        if (valueLowerCase.trim() != "")
            return Nomenclatures.getCourts().then(s => {
                return s.filter(s => {
                    let authorityCheck: string = s.authorityID.toString().toLowerCase() + " - " + s.authorityName.toLowerCase();

                    return authorityCheck.indexOf(" " + valueLowerCase) > -1
                        || authorityCheck.indexOf(valueLowerCase) == 0;
                }
                );
            }
            );
        else
            return Promise.resolve([]);
    }

    showAuthorityValue(value: Authority): string {
        return value.authorityID.toString() + " - " + value.authorityName;
    }

    @action handleAuthorityChange() {
        this.model.courtCode = null;
    }

    @action handleAuthoritySelectOption(value?: Authority) {
        if (value) {
            this.model.courtCode = value.authorityID.toString();
            this._courtName = value.authorityName;
        }
    }
}

export const F706_NumberApplicationFieldUI = withAsyncFrame(withFieldRecordContainer(F706_NumberApplicationUI, {
    fieldLabelTextKey: "CR_F_706_L",
    isMandatoryField: true
}));