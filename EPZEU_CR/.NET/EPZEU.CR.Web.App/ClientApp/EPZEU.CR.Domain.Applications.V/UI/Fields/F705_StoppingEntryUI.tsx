import { ObjectHelper } from 'Cnsys.Core';
import { AsyncUIProps, withAsyncFrame } from 'Cnsys.UI.React';
import { attributesClassFormControlMaxL14, Button, EPZEUBaseComponent, IDataServiceProviderProps, withDataServiceProvider } from 'EPZEU.Core';
import { ApplicationFormTypes, CompaniesDataService, TransformationSummary } from 'EPZEU.CR.Core';
import { FieldContainerProps, withFieldRecordContainer } from 'EPZEU.CR.Domain';
import { runInAction, action } from 'mobx';
import { observer } from 'mobx-react';
import * as React from "react";
import { F705_StoppingEntry } from '../../Models/Fields/ModelsAutoGenerated';

interface F705_StoppingEntryProps extends FieldContainerProps, AsyncUIProps, IDataServiceProviderProps {
    setTransformationApplicationType(applicationType: ApplicationFormTypes): void;
}

@observer class F705_StoppingEntryUI extends EPZEUBaseComponent<F705_StoppingEntryProps, F705_StoppingEntry> {

    constructor(props: F705_StoppingEntryProps) {
        super(props);

        this.getTransformationSummary = this.getTransformationSummary.bind(this);
        this.onChange = this.onChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return (
            <div className="row">
                <div className="form-group col-sm-6">
                    {this.textBoxFor(m => m.incomingNumber, attributesClassFormControlMaxL14, this.onChange)}
                </div>
                <div className="form-group col-auto">
                    <Button type="button" className="btn btn-outline-light text-dark" lableTextKey={"GL_EXTRACT_DATA_L"} onClick={this.getTransformationSummary}>
                        <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i></Button>
                </div>
                {this.model.transformingCompanies && this.model.transformingCompanies.length > 0 &&
                    <div className="form-group col-12">
                        {this.labelFor(m => m.incomingNumber, 'CR_APP_TRANSFORMING_COMPANY_L', { className: 'field-title field-title--form' })}
                        <p className='field-text'>
                            {this.model.transformingCompanies.map((companySummary: string, index: number) => {
                                return <React.Fragment key={index}>{companySummary}<br /></React.Fragment>;
                            })}
                        </p>
                    </div>
                }
                {this.model.successors && this.model.successors.length > 0 &&
                    <div className="form-group col-12">
                        {this.labelFor(m => m.incomingNumber, 'CR_APP_SUCCESSOR_L', { className: 'field-title field-title--form' })}
                        <p className='field-text'>
                            {this.model.successors.map((companySummary: string, index: number) => {
                                return <React.Fragment key={index}>{companySummary}<br /></React.Fragment>;
                            })}
                        </p>
                    </div>
                }
            </div>
        )
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                {this.model.incomingNumber}
            </>
        );
    }

    @action private onChange(): void {
        this.model.removeError('incomingNumber');
        this.model.transformingCompanies = [];
        this.model.successors = [];

        if (!ObjectHelper.isStringNullOrEmpty(this.model.incomingNumber) && this.model.incomingNumber.length == 14) {
            let dataSrv = this.props.dataSrvProvider.getDataService<CompaniesDataService>(CompaniesDataService);

            this.props.registerAsyncOperation(dataSrv.getTransformationSummary(this.model.incomingNumber).then((summary) => {
                this.model.hasTransformation = summary ? true : false;
            }));
        } else
            this.model.hasTransformation = false;
    }

    @action private getTransformationSummary(): void {
        if (!ObjectHelper.isStringNullOrEmpty(this.model.incomingNumber)) {
            this.model.removeError('incomingNumber');

            let companiesSrv = this.props.dataSrvProvider.getDataService<CompaniesDataService>(CompaniesDataService);

            this.props.registerAsyncOperation(companiesSrv.getTransformationSummary(this.model.incomingNumber).then((transformation: TransformationSummary) => {
                if (transformation) {
                    runInAction(() => {
                        this.model.transformingCompanies = [];
                        this.model.successors = [];
                        this.props.setTransformationApplicationType(transformation.mainApplicationFormType);
                        this.model.appType = (Number(transformation.mainApplicationFormType)).toString();

                        for (var i = 0; i < transformation.transformingCompanies.length; i++) {
                            this.model.transformingCompanies.push(
                                transformation.transformingCompanies[i].companyName
                                + ', '
                                + this.getResource('GL_COMPANY_ID_L')
                                + ' '
                                + transformation.transformingCompanies[i].uic);
                        }

                        for (var i = 0; i < transformation.successors.length; i++) {
                            this.model.successors.push(
                                transformation.successors[i].companyName
                                + ', '
                                + this.getResource('GL_COMPANY_ID_L')
                                + ' '
                                + transformation.successors[i].uic);
                        }
                    });
                } else {
                    this.model.transformingCompanies = [];
                    this.model.successors = [];
                    this.model.removeError('incomingNumber');
                    this.model.addError('incomingNumber', this.getResource('CR_GL_NO_APPL_WITH_THIS_INCOMING_NUMBER_E')); // Няма заявление с този входящ номер.
                }
            }));
        } else {
            this.model.transformingCompanies = [];
            this.model.successors = [];
            this.model.removeError('incomingNumber');
            this.model.addError('incomingNumber', this.getResource('GL_INPUT_INCOMING_NO_E')); // Моля, въведете входящ номер
        }
    }
}

export const F705_StoppingEntryFieldUI = withFieldRecordContainer(withDataServiceProvider(withAsyncFrame(F705_StoppingEntryUI)), {
    fieldLabelTextKey: "CR_F_705_L"
});