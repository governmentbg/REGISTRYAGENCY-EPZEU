import { ArrayHelper } from 'Cnsys.Core';
import { LegalForms } from 'EPZEU.CR.Core';
import { ApplicationFormFieldsBaseValidator, Person } from 'EPZEU.CR.Domain';
import { F802a0_CoOperative2, F8030_Successor803 } from '../../Fields/ModelsAutoGenerated';
import { F801a_FormOfTransformingValidator } from '../../Fields/Validators/F801a_FormOfTransformingValidator';
import { F802a_ReorganizeCoOperativesValidator } from '../../Fields/Validators/F802a_ReorganizeCoOperativesValidator';
import { F803_SuccessorsValidator } from '../../Fields/Validators/F803_SuccessorsValidator';
import { V33 } from '../ApplicationFormsV';
import { V33Fields } from '../ModelsAutoGenerated';

export class V33FieldsValidator extends ApplicationFormFieldsBaseValidator<V33Fields>{

    constructor() {
        super();
        this.validateForAtLeast2NotEmptyRecords = this.validateForAtLeast2NotEmptyRecords.bind(this);
        this.ruleFor(m => m.formOfTransforming801a).setValidator(new F801a_FormOfTransformingValidator());
        this.ruleFor(m => m.reorganizeCoOperatives2).setValidator(new F802a_ReorganizeCoOperativesValidator());
        this.ruleFor(m => m.successors803).setValidator(new F803_SuccessorsValidator());

        this.validateThatCompaniesAreCooperativesOrForeignTraders = this.validateThatCompaniesAreCooperativesOrForeignTraders.bind(this);
        this.validateCompanyForLegalForms = this.validateCompanyForLegalForms.bind(this);
    }

    public validate(obj: V33Fields): boolean {
        let isValid = super.validate(obj);

        if (obj.reorganizeCoOperatives2.coOperative2List.length > 1) {
            let emptyElements = ArrayHelper
                .queryable
                .from(obj.reorganizeCoOperatives2.coOperative2List)
                .where(m => this.isReorganizeCooperativeRecordEmpty(m.subject))
                .toArray();

            for (var i = 0; i < emptyElements.length; i++) {
                emptyElements[i].addError(this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.
                isValid = false;
            }
        }

        let countNotEmptyCompanys: number = ArrayHelper
            .queryable
            .from(obj.reorganizeCoOperatives2.coOperative2List)
            .where(m => !this.isReorganizeCooperativeRecordEmpty(m.subject))
            .count();

        /**учредяване на ЕКД чрез вливане с участие на кооперации със седалище в държава – членка на ЕС или други държави – страни по споразумението за ЕИП*/
        if (obj.formOfTransforming801a.influx801a) {
            if (this.validateForAtLeast2NotEmptyRecords(obj, countNotEmptyCompanys)) {
                isValid = (this.validateThatCompaniesAreCooperativesOrForeignTraders(obj, true)) && isValid;
            } else
                isValid = false;

            // Попълнете данни за кооперативно дружество или европейско кооперативно дружество
            isValid = (this.validateCompanyForLegalForms(obj.successors803.successorList[0], [LegalForms.K, LegalForms.EKD, LegalForms.LEKD], 'CR_APP_00149_E')) && isValid;

            // Правоприемникът не съвпада с никой от праводателите
            isValid = this.isSuccessorInListOfCooperatives(obj.successors803.successorList[0], obj.reorganizeCoOperatives2.coOperative2List) && isValid;
        } else if (obj.formOfTransforming801a.fusion801a) { /**учредяване на ЕКД чрез сливане с участие на кооперации със седалище в държава – членка на ЕС или други държави – страни по споразумението за ЕИП*/
            if (this.validateForAtLeast2NotEmptyRecords(obj, countNotEmptyCompanys)) {
                isValid = (this.validateThatCompaniesAreCooperativesOrForeignTraders(obj, false)) && isValid;
            } else
                isValid = false;
        } else if (obj.formOfTransforming801a.conversionToCoop) { /**преобразуване на ЕКД със седалище в Р. България в кооперация със седалище в Р. България*/
            if (obj.reorganizeCoOperatives2.coOperative2List.length > 1) {
                obj.reorganizeCoOperatives2.addError(this.getMessage('CR_APP_00074_E')); //При преобразуване на ЕКД със седалище в Р. България в кооперация е задължително в поле 802а "Преобразуващо се ЕКД или кооперация" да въведете само данните за преобразуващото се ЕКД със седалище на територията на Р. България.
                isValid = false;
            } else { //Попълнете данни за европейско кооперативно дружество
                isValid = (this.validateCompanyForLegalForms(obj.reorganizeCoOperatives2.coOperative2List[0], [LegalForms.EKD, LegalForms.LEKD], 'CR_APP_INPUT_DATA_EUROPEAN_COOPERATIVE_COMPANY_E')) && isValid;
            }

            // Попълнете данни за европейско кооперативно дружество.
            isValid = (this.validateCompanyForLegalForms(obj.successors803.successorList[0], [LegalForms.EKD, LegalForms.LEKD], 'CR_APP_INPUT_DATA_EUROPEAN_COOPERATIVE_COMPANY_E')) && isValid;

            // Правоприемникът не съвпада с праводателя
            isValid = this.isSuccessorInListOfCooperatives(obj.successors803.successorList[0], obj.reorganizeCoOperatives2.coOperative2List) && isValid;
        } else if (obj.formOfTransforming801a.conversionToEUCoop) { /**преобразуване на кооперация със седалище в Р. България в ЕКД със седалище в Р. България*/
            if (obj.reorganizeCoOperatives2.coOperative2List.length != 1) {
                obj.reorganizeCoOperatives2.addError(this.getMessage('CR_APP_00075_E')); // При преобразуване на кооперация в ЕКД със седалище в Р. България в кооперация е задължително в поле 802а "Преобразуващо се ЕКД или кооперация" да въведете само данните за преобразуващата се кооперация със седалище на територията на Р. България.
                isValid = false;
            } else {
                // Попълнете данни за кооперативно дружество.
                isValid = (this.validateCompanyForLegalForms(obj.reorganizeCoOperatives2.coOperative2List[0], [LegalForms.K], 'CR_APP_INPUT_DATA_COOPERATIVE_COMPANY_E')) && isValid;
            }

            // Попълнете данни за кооперативно дружество.
            isValid = (this.validateCompanyForLegalForms(obj.successors803.successorList[0], [LegalForms.K], 'CR_APP_INPUT_DATA_COOPERATIVE_COMPANY_E')) && isValid;

            // Правоприемникът не съвпада с праводателя
            isValid = this.isSuccessorInListOfCooperatives(obj.successors803.successorList[0], obj.reorganizeCoOperatives2.coOperative2List) && isValid;
        } else {
            isValid = this.validateForAtLeast2NotEmptyRecords(obj, countNotEmptyCompanys) && isValid;
        }

        return isValid;
    }

    private validateForAtLeast2NotEmptyRecords(obj: V33Fields, countNotEmptyRecords: number): boolean {
        if (countNotEmptyRecords < 2) {
            obj.reorganizeCoOperatives2.clearErrors();
            obj.reorganizeCoOperatives2.addError(this.getMessage('CR_APP_00038_E')); // Задължително е попълването на поне два елемента в поле 802а. "Преобразуващо се ЕКД или кооперация".
            return false;
        }

        return true;
    }

    // не можем да ползваме this.validationContext.isRecordEmpty, защото countryName се сетва по подразбиране да е България!
    private isReorganizeCooperativeRecordEmpty(company: Person): boolean {
        return (!company.name && !company.indent && !company.isForeignTrader);
    }

    private validateThatCompaniesAreCooperativesOrForeignTraders(obj: V33Fields, shouldHaveAtLeastOneWithLegalFormCooperative: boolean): boolean {
        let isValid = true;
        let hasAtLeast1Cooperative = false;
        let mainApp = (<V33>this.validationContext.applicationManager.application);

        for (var i = 0; i < obj.reorganizeCoOperatives2.coOperative2List.length; i++) {
            let cooperative = obj.reorganizeCoOperatives2.coOperative2List[i];
            let cooperativeReport = mainApp.draftDeedInfoList.filter(d => d.uic == cooperative.subject.indent)[0];

            if ((!cooperative.subject.isForeignTrader) && cooperative.subject.indent && (cooperative.getErrors().length == 0)) {
                if (cooperativeReport) {
                    if (cooperativeReport.legalForm == LegalForms.K) {
                        hasAtLeast1Cooperative = true;
                    } else {
                        cooperative.addError(this.getMessage('CR_APP_INPUT_DATA_COOPERATIVE_COMPANY_E')); //Попълнете данни за кооперативно дружество
                        isValid = false;
                    }
                } else {
                    cooperative.addError(this.getMessage('CR_APP_INPUT_DATA_COOPERATIVE_COMPANY_E')); //Попълнете данни за кооперативно дружество
                    isValid = false;
                }
            }
        }

        if (shouldHaveAtLeastOneWithLegalFormCooperative && hasAtLeast1Cooperative == false) {
            obj.reorganizeCoOperatives2.addError(this.getMessage('CR_APP_00224_E')); // При учредяване на ЕКД чрез вливане с участие на кооперации със седалище в държава – членка на ЕС или други държави – страни по споразумението за ЕИП е задължително в поле 802а. "Преобразуващо се ЕКД или кооперация" да въведете данни за поне една преобразуващата се кооперация със седалище на територията на Р.България.
            isValid = false;
        }

        return isValid;
    }

    private validateCompanyForLegalForms(company: (F802a0_CoOperative2 | F8030_Successor803), validLegalForms: LegalForms[], errorMessageCode: string): boolean {
        if (company.subject.indent && company.getErrors().length == 0) {

            let mainApp = (<V33>this.validationContext.applicationManager.application);
            let report = mainApp.draftDeedInfoList.filter(d => d.uic == company.subject.indent)[0];

            if (!report) {
                company.addError(this.getMessage(errorMessageCode));
                return false;
            }

            if (validLegalForms.indexOf(report.legalForm) < 0) {
                company.addError(this.getMessage(errorMessageCode));
                return false;
            }

            return true;
        }

        return false;
    }

    private isSuccessorInListOfCooperatives(successor: F8030_Successor803, cooperatives: F802a0_CoOperative2[]): boolean {
        let foundMatch = ArrayHelper
            .queryable
            .from(cooperatives)
            .where(m => m.subject.indent == successor.subject.indent)
            .count() > 0;

        if (foundMatch == false) {
            successor.addError(this.getMessage('CR_APP_00099_E')); // Правоприемникът не съвпада с никой от праводателите.
            return false;
        }

        return true;
    }
}