import { ArrayHelper, ErrorLevels, Helper, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormTypes, LegalForms } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationItem, Person, SpecificApplicationInfoAccessor, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F7030_Successor } from '../../Fields/ModelsAutoGenerated';
import { V24 } from '../ApplicationFormsV';
import { ApplicationFormVValidator } from './ApplicationFormVValidator';
import { V24FieldsValidator } from './V24FieldsValidator';

export class V24Validator extends ApplicationFormVValidator<V24> {
    private _matchedAdditionalApplicationsCount: number = 0;

    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new V24FieldsValidator());
    }

    public validate(obj: V24): boolean {
        let isValid = super.validate(obj);

        isValid = this.validateAdditionalApps(obj) && isValid;
        isValid = this.validateAllUICsAreRegisteredInTR(obj) && isValid;

        return isValid;
    }

    private validateAdditionalApps(mainApp: V24): boolean {
        let isValid = true;
        this._matchedAdditionalApplicationsCount = 0;

        let applicationTypesToSearch =
            [ApplicationFormTypes.A4,
            ApplicationFormTypes.A5,
            ApplicationFormTypes.A6,
            ApplicationFormTypes.A12,
            ApplicationFormTypes.A14];

        let applicationsToSearch = ArrayHelper.queryable.from(this.validationContext.applicationManager.processContext.applicationItems.filter((applicationItem: ApplicationItem) => {
            return applicationTypesToSearch.indexOf(applicationItem.applicationProvider.applicationType) >= 0;
        })).select((element: ApplicationItem) => element.applicationManager.application).toArray();

        let errors: { errorMessage: string, errorLevel: ErrorLevels }[] = [];
        if (mainApp.fields.formOfTransforming701.fusion) {
            let error = this.getErrorForAppsForSuccessorInFusion(mainApp.fields.successors703.successorList[0], applicationsToSearch); // в това заявление има само един правоприемник - затова забиваме индекс 0.
            if (error)
                errors.push({ errorMessage: error, errorLevel: ErrorLevels.Error });
        } else if (mainApp.fields.formOfTransforming701.influx) {
            this.matchAppsForSuccessorInInflux(mainApp.fields.successors703.successorList[0], applicationsToSearch); // в това заявление има само един правоприемник - затова забиваме индекс 0.
        }

        let a12 = applicationsToSearch
            .filter(app => app.appType == ApplicationFormTypes.A12)[0];

        if (a12) {
            if ((mainApp.fields.formOfTransforming701.influx && SpecificApplicationInfoAccessor.getF070_WayOfEstablishingEuropeanCompany(a12).fromAcquisition == false)
                || (mainApp.fields.formOfTransforming701.fusion && SpecificApplicationInfoAccessor.getF070_WayOfEstablishingEuropeanCompany(a12).fromMerge == false)) {
                // Това е едно съобщение, но е разбито на 3, защото ако/като променим начина, по който излизат, ще е добре да са на нови редове.
                errors.push({ errorMessage: this.getMessage('CR_APP_00200_E'), errorLevel: ErrorLevels.Information }); // Начинът на учредяване на европейското дружество в заявление А12 трябва да отговаря на формата на преобразуване в заявление В24. 
                errors.push({ errorMessage: this.getMessage('CR_APP_00201_E'), errorLevel: ErrorLevels.Information }); // Ако в поле 701 „Форма на преобразуване” е избрано „сливане” , в поле 70 „Начин на учредяване на ЕД” трябва да е избрано „Чрез сливане по чл. 2, ал. 1 и чл. 17 до чл. 31 от Регламент (ЕО) № 2157/2001”
                errors.push({ errorMessage: this.getMessage('CR_APP_00202_E'), errorLevel: ErrorLevels.Information }); // Ако в поле 701 „Форма на преобразуване” е избрано „вливане” , в поле 70 „Начин на учредяване на ЕД” трябва да е избрано „Чрез вливане по чл. 2, ал. 1 и чл. 17 до чл. 31 от Регламент (ЕО) № 2157/2001”“ – ако има А12, което не отговаря на съответните условия.
            }

            let successor = mainApp.fields.successors703.successorList[0];
            if (SpecificApplicationInfoAccessor.getF002_Company(a12).text != successor.subject.name) // Името на фирмата в допълнително подаденото заявление А12 не съвпада с името на правоприемника от заявление В24
                errors.push({ errorMessage: this.getMessage('CR_APP_00199_E'), errorLevel: ErrorLevels.Error });

            if (mainApp.fields.formOfTransforming701.influx && successor.subject.indent && successor.subject.name) {
                let foundMatch = false;
                for (var i = 0; i < mainApp.fields.transformingCompanys2.transformingCompany2List.length; i++) {
                    if (mainApp.fields.transformingCompanys2.transformingCompany2List[i].subject.indent == successor.subject.indent)
                        foundMatch = true;
                }

                if (foundMatch == false) {
                    successor.addError('subject', this.getMessage('CR_APP_00099_E'), ErrorLevels.Error); //Правоприемникът не съвпада с никой от праводателите.
                    isValid = false;
                }
            }

            for (const transformingCompany of mainApp.fields.transformingCompanys2.transformingCompany2List) {
                if (transformingCompany.subject.indent && (!transformingCompany.subject.isForeignTrader)) {

                    let report = mainApp.draftDeedInfoList.filter(d => d.uic == transformingCompany.subject.indent)[0];

                    if (!report) {
                        transformingCompany.addError(this.getMessage('CR_APP_00029_E'), ErrorLevels.Error); //Участниците в преобразуването трябва да бъдат с правна форма АД (или ЕАД).
                        isValid = false;
                    } else if ((report.legalForm != LegalForms.AD) && (report.legalForm != LegalForms.EAD)) {
                        transformingCompany.addError(this.getMessage('CR_APP_00029_E'), ErrorLevels.Error); //Участниците в преобразуването трябва да бъдат с правна форма АД (или ЕАД).
                        isValid = false;
                    }
                };
            }
        }

        if (applicationsToSearch
            .filter(app => app.appType == ApplicationFormTypes.A4
                || app.appType == ApplicationFormTypes.A5
                || app.appType == ApplicationFormTypes.A6).length > 0) {

            for (const transformingCompany of mainApp.fields.transformingCompanys2.transformingCompany2List) {
                if (transformingCompany.subject.indent && (!transformingCompany.subject.isForeignTrader)) {

                    let report = mainApp.draftDeedInfoList.filter(d => d.uic == transformingCompany.subject.indent)[0];

                    if (!report) {
                        transformingCompany.addError(this.getMessage('CR_APP_00249_E'), ErrorLevels.Error); //Участниците в преобразуването трябва да бъдат с правна форма АД (или ЕАД).
                        isValid = false;
                    } else if ((report.legalForm != LegalForms.AD) && (report.legalForm != LegalForms.EAD)
                        && (report.legalForm != LegalForms.OOD) && (report.legalForm != LegalForms.EOOD)
                        && (report.legalForm != LegalForms.KDA)) {
                        transformingCompany.addError(this.getMessage('CR_APP_00249_E'), ErrorLevels.Error); //Участниците в преобразуването трябва да бъдат с правна форма АД (или ЕАД).
                        isValid = false;
                    }
                };
            }
        }

        errors.forEach((error: { errorMessage: string, errorLevel: ErrorLevels }) => mainApp.addError(error.errorMessage, error.errorLevel));

        isValid = (errors.length == 0) && isValid;

        if (applicationsToSearch.length > this._matchedAdditionalApplicationsCount) {
            // Добавени са допълнителни заявления, които не са подадени коректно за първоначална регистрация или за промяна на данни или не са свързани с правоприемник и/или преобразуващо се дружество
            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00197_E'), ErrorLevels.Error);
        }

        return isValid;
    }

    private getErrorForAppsForSuccessorInFusion(successor: F7030_Successor, additionalApps: ApplicationFormBase[]): string {
        let error;

        let appsForInitialRegForSuccessorName = additionalApps
            .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap)) && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

        if (appsForInitialRegForSuccessorName.length == 0) // Няма подадено допълнително заявление за първоначална регистрация на правоприемник
            error = this.getMessage('CR_APP_00188_E') + ': ' + (successor.subject.name ? successor.subject.name : '');

        this._matchedAdditionalApplicationsCount += appsForInitialRegForSuccessorName.length;
        return error;
    }

    private matchAppsForSuccessorInInflux(successor: F7030_Successor, additionalApps: ApplicationFormBase[]): void {
        let appsForChangeRegForSuccessorIdent = additionalApps
            .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateForChange(ap)) && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent)));

        let appsForInitialRegForSuccessorIdent = additionalApps
            .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap)) && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent)));

        this._matchedAdditionalApplicationsCount += appsForInitialRegForSuccessorIdent.length;
        this._matchedAdditionalApplicationsCount += appsForChangeRegForSuccessorIdent.length;
    }

    private validateAllUICsAreRegisteredInTR(mainApp: V24): boolean {
        let isValid = true;

        for (let transformingCompany2 of mainApp.fields.transformingCompanys2.transformingCompany2List) {
            if (ValidatorHelpers.isValidUIC(transformingCompany2.subject.indent)) {

                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == transformingCompany2.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    transformingCompany2.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(transformingCompany2.subject.name) && summary.companyName != transformingCompany2.subject.name) {
                    //Наименованието {COMPANY_NAME} е различно от наименованието, което е регистрирано в Търговския регистър за посочения ЕИК. 
                    //Натиснете "Извлечи данни", за да се попълни коректното наименование!
                    isValid = false;
                    transformingCompany2.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', transformingCompany2.subject.name), ErrorLevels.Error);
                }
            }
        }

        for (let successor of mainApp.fields.successors703.successorList) {
            if (ValidatorHelpers.isValidUIC(successor.subject.indent)) {

                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == successor.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    successor.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(successor.subject.name) && summary.companyName != successor.subject.name) {
                    //Наименованието {COMPANY_NAME} е различно от наименованието, което е регистрирано в Търговския регистър за посочения ЕИК. 
                    //Натиснете "Извлечи данни", за да се попълни коректното наименование!
                    isValid = false;
                    successor.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', successor.subject.name), ErrorLevels.Error);
                }
            }
        }

        return isValid;
    }
}