import { ArrayHelper, ErrorLevels, Helper, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationItem, Person, SpecificApplicationInfoAccessor, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F7020_TransformingCompany, F7030_Successor } from '../../Fields/ModelsAutoGenerated';
import { V21 } from '../ApplicationFormsV';
import { ApplicationFormVValidator } from './ApplicationFormVValidator';
import { V21FieldsValidator } from './V21FieldsValidator';

export class V21Validator extends ApplicationFormVValidator<V21> {
    private _matchedAdditionalApplicationsCount: number = 0;

    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new V21FieldsValidator());
    }

    public validate(obj: V21): boolean {
        let isValid = super.validate(obj);

        isValid = this.validateAdditionalApps(obj) && isValid;
        isValid = this.validateAllUICsAreRegisteredInTR(obj) && isValid;

        return isValid;
    }

    private validateAdditionalApps(mainApp: V21): boolean {
        let isValid = true;
        this._matchedAdditionalApplicationsCount = 0;

        let applicationTypesToSearch =
            [ApplicationFormTypes.A1,
            ApplicationFormTypes.A2,
            ApplicationFormTypes.A3,
            ApplicationFormTypes.A4,
            ApplicationFormTypes.A5,
            ApplicationFormTypes.A6,
            ApplicationFormTypes.A9,
            ApplicationFormTypes.A12,
            ApplicationFormTypes.A14];

        let applicationsToSearch = ArrayHelper.queryable.from(this.validationContext.applicationManager.processContext.applicationItems.filter((applicationItem: ApplicationItem) => {
            return applicationTypesToSearch.indexOf(applicationItem.applicationProvider.applicationType) >= 0;
        })).select((element: ApplicationItem) => element.applicationManager.application).toArray();

        if (mainApp.fields.formOfTransforming701.conversionOfBulgarianPLCIntoBulgarianEuropeanCompany) {
            isValid = this.validateForConversionToED(mainApp, applicationsToSearch) && isValid;
        } else if (mainApp.fields.formOfTransforming701.conversionOfBulgarianEuropeanCompanyIntoBulgarianPLC) {
            isValid = this.validateForConversionToAD(mainApp, applicationsToSearch) && isValid;
        } else {
            isValid = this.validateForFormsOfTransformingDifferentFromConversion(mainApp, applicationsToSearch) && isValid;
        }

        if (applicationsToSearch.length > this._matchedAdditionalApplicationsCount) {
            // Добавени са допълнителни заявления, които не са подадени коректно за първоначална регистрация или за промяна на данни или не са свързани с правоприемник и/или преобразуващо се дружество
            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00197_E'), ErrorLevels.Error);
        }

        return isValid;
    }

    private validateForConversionToED(mainApp: V21, additionalApps: ApplicationFormBase[]): boolean {
        let errors: { errorMessage: string, errorLevel: ErrorLevels }[] = [];
        let successor = mainApp.fields.successors703.successorList[0].subject; // в това заявление има само един правоприемник - затова забиваме индекс 0.
        let a12ForInitRegForSuccessorID = additionalApps
            .filter(app => (SpecificApplicationInfoAccessor.isApplicationStateNew(app))
                && (app.appType == ApplicationFormTypes.A12)
                && SpecificApplicationInfoAccessor.getF001_UIC(app).text == successor.indent)[0];

        if (a12ForInitRegForSuccessorID) {
            if (SpecificApplicationInfoAccessor.getF070_WayOfEstablishingEuropeanCompany(a12ForInitRegForSuccessorID).fromConvert == false)
                errors.push({ errorMessage: this.getMessage('CR_APP_00192_E'), errorLevel: ErrorLevels.Information }); //В добавеното А12 не е попълнен начин на учредяване чрез преобразуване на съществуващо АД в ЕД по чл. 2, ал. 4 и чл. 37 от Регламент (ЕО) № 2157/2001

            if (SpecificApplicationInfoAccessor.getF002_Company(a12ForInitRegForSuccessorID).text != mainApp.fields.successors703.successorList[0].subject.name)
                errors.push({ errorMessage: this.getMessage('CR_APP_00193_E'), errorLevel: ErrorLevels.Error }); // Името на фирмата в допълнително подаденото заявление А12 не съвпада с името на правоприемника от заявление В21

            this._matchedAdditionalApplicationsCount += 1;
        } else {
            errors.push({ errorMessage: this.getMessage('CR_APP_00194_E'), errorLevel: ErrorLevels.Error }); // Няма подадено допълнително заявление А12 за първоначална регистрация за правоприемника
        }

        errors.forEach((error: { errorMessage: string, errorLevel?: ErrorLevels }) => mainApp.addError(error.errorMessage, error.errorLevel));
        return errors.length == 0;
    }

    private validateForConversionToAD(mainApp: V21, additionalApps: ApplicationFormBase[]): boolean {
        let errors: { errorMessage: string, errorLevel: ErrorLevels }[] = [];
        let successor = mainApp.fields.successors703.successorList[0].subject; // в това заявление има само един правоприемник - затова забиваме индекс 0.
        let a5 = additionalApps
            .filter(app => (SpecificApplicationInfoAccessor.isApplicationStateNew(app))
                && app.appType == ApplicationFormTypes.A5
                && SpecificApplicationInfoAccessor.getF001_UIC(app).text == successor.indent)[0];

        if (a5) {
            if (SpecificApplicationInfoAccessor.getF002_Company(a5).text != mainApp.fields.successors703.successorList[0].subject.name)
                errors.push({ errorMessage: this.getMessage('CR_APP_00260_E'), errorLevel: ErrorLevels.Error }); //Името на фирмата в допълнително подаденото заявление А5 не съвпада с името на правоприемника от заявление В21.

            this._matchedAdditionalApplicationsCount += 1;
        } else {
            // Няма подадено допълнително заявление А5 за първоначална регистрация за правоприемник
            errors.push({ errorMessage: this.getMessage('CR_APP_00195_E') + ': ' + (successor.name ? (successor.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.indent ? successor.indent : ''), errorLevel: ErrorLevels.Error });
        }

        errors.forEach((error: { errorMessage: string, errorLevel?: ErrorLevels }) => mainApp.addError(error.errorMessage, error.errorLevel));
        return errors.length == 0;
    }

    private validateForFormsOfTransformingDifferentFromConversion(mainApp: V21, additionalApps: ApplicationFormBase[]): boolean {
        let errors = this.getErrorsForAppsForSuccessor(mainApp.fields.successors703.successorList[0], additionalApps, mainApp.fields.formOfTransforming701.transferringProperty); // в това заявление има само един правоприемник - затова забиваме индекс 0.
        errors.forEach((error: string) => mainApp.addError(error, ErrorLevels.Error));

        for (var i = 0; i < mainApp.fields.transformingCompanys.transformingCompanyList.length; i++)
            this.matchAppsForTransformingCompany(mainApp.fields.transformingCompanys.transformingCompanyList[i], additionalApps);

        return errors.length == 0;
    }

    private getErrorsForAppsForSuccessor(successor: F7030_Successor, additionalApps: ApplicationFormBase[], transferringProperty: boolean): string[] {
        let errors = [];
        let additionalAppsToSearch = transferringProperty ? additionalApps.filter((app: ApplicationFormBase) => app.appType == ApplicationFormTypes.A1) : additionalApps;

        if (ObjectHelper.isStringNullOrEmpty(successor.subject.indent)) {
            let appsForInitialRegForSuccessorName = additionalAppsToSearch
                .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap)) && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

            if (appsForInitialRegForSuccessorName.length == 0) // Няма подадено допълнително заявление за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00188_E') + ': ' + (successor.subject.name ? successor.subject.name : ''));

            this._matchedAdditionalApplicationsCount += appsForInitialRegForSuccessorName.length;
        } else {
            let appsForInitRegForSuccessorId = additionalAppsToSearch
                .filter(ap => SpecificApplicationInfoAccessor.isApplicationStateNew(ap) && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent));

            if (appsForInitRegForSuccessorId.length > 0) // Добавено е допълнително заявление за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00196_E') + ': ' + (successor.subject.name ? (successor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.subject.indent ? successor.subject.indent : ''));

            let appsForChangeForSuccessorId = additionalAppsToSearch
                .filter(ap => SpecificApplicationInfoAccessor.isApplicationStateForChange(ap) && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent));

            this._matchedAdditionalApplicationsCount += appsForChangeForSuccessorId.length;
            this._matchedAdditionalApplicationsCount += appsForInitRegForSuccessorId.length;
        }

        return errors;
    }

    private matchAppsForTransformingCompany(transformingCompany: F7020_TransformingCompany, additionalApps: ApplicationFormBase[]): void {
        let appsForChangeForTransformingCompanyId = additionalApps
            .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateForChange(ap)) && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == transformingCompany.subject.indent)));

        this._matchedAdditionalApplicationsCount += appsForChangeForTransformingCompanyId.length;
    }

    private validateAllUICsAreRegisteredInTR(mainApp: V21): boolean {
        let isValid = true;

        for (let transformingCompany of mainApp.fields.transformingCompanys.transformingCompanyList) {
            if (ValidatorHelpers.isValidUIC(transformingCompany.subject.indent)) {
                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == transformingCompany.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    transformingCompany.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(transformingCompany.subject.name) && summary.companyName != transformingCompany.subject.name) {
                    isValid = false;
                    transformingCompany.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', transformingCompany.subject.name), ErrorLevels.Error);
                }
            }
        }

        for (let successor of mainApp.fields.successors703.successorList) {
            if (ValidatorHelpers.isValidUIC(successor.subject.indent)) {
                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == successor.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    successor.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(successor.subject.name) && summary.companyName != successor.subject.name) {
                    //Наименованието {COMPANY_NAME} е различно от наименованието, което е регистрирано в Търговския регистър за посочения ЕИК. 
                    //Натиснете "Извлечи данни", за да се попълни коректното наименование!
                    isValid = false;
                    successor.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', successor.subject.name), ErrorLevels.Error);
                }
            }
        }

        return isValid;
    }
}