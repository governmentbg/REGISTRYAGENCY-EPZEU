import { ArrayHelper, ErrorLevels, Helper, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationFormFieldsBaseValidator, ApplicationItem, Person, SpecificApplicationInfoAccessor, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F601_TransferringEnterprise, F6020_AcquisitionEnterprise } from '../../Fields/ModelsAutoGenerated';
import { F601_TransferringEnterpriseValidator } from '../../Fields/Validators/F601_TransferringEnterpriseValidator';
import { F602_AcquisitionEnterprisesValidator } from '../../Fields/Validators/F602_AcquisitionEnterprisesValidator';
import { V1 } from '../ApplicationFormsV';
import { V1Fields } from '../ModelsAutoGenerated';
import { ApplicationFormVValidator } from './ApplicationFormVValidator';

export class V1Validator extends ApplicationFormVValidator<V1> {
    private _matchedAdditionalApplicationsCount: number = 0;

    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new V1FieldsValidator());
    }

    public validate(obj: V1): boolean {
        let isValid = super.validate(obj);

        isValid = this.validateAdditionalApps(obj) && isValid;
        isValid = this.validateAllUICsAreRegisteredInTR(obj) && isValid;

        return isValid;
    }

    private validateAdditionalApps(mainApp: V1): boolean {
        let isValid = true;
        this._matchedAdditionalApplicationsCount = 0;

        let a1Applications = ArrayHelper.queryable.from(this.validationContext.applicationManager.processContext.applicationItems.filter((applicationItem: ApplicationItem) => {
            return applicationItem.applicationProvider.applicationType == ApplicationFormTypes.A1;
        })).select((element: ApplicationItem) => element.applicationManager.application).toArray();

        if (mainApp.fields.transferringTypeOfTradeEnterprise.taketransfer && a1Applications.length > 1) {
            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00187_E'), ErrorLevels.Error); // Може да добавите само едно допълнително заявление A1.
        } else if (mainApp.fields.transferringTypeOfTradeEnterprise.fulltransfer && a1Applications.length > 2) {
            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00186_E'), ErrorLevels.Error); // Може да добавите най-много две допълнителни заявления А1
        }

        isValid = this.validateAdditionalAppsForAcquisitors(mainApp, a1Applications) && isValid;
        if (!mainApp.fields.transferringTypeOfTradeEnterprise.taketransfer)
            this.matchAppsForTransferringEnterprise(mainApp.fields.transferringEnterprise, a1Applications);

        if (a1Applications.length > this._matchedAdditionalApplicationsCount) {
            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00191_E'), ErrorLevels.Error); // Добавени са допълнителни заявления А1, които не са подадени коректно за първоначална регистрация или за промяна на данни или не са свързани с правоприемник и/или отчуждител/наследодател
        }

        return isValid;
    }

    private validateAdditionalAppsForAcquisitors(mainApp: V1, a1Apps: ApplicationFormBase[]): boolean {
        let validationResults = [];
        for (var i = 0; i < mainApp.fields.acquisitionEnterprises.acquisitionEnterpriseList.length; i++)
            validationResults.push(this.validateAdditionalAppsForAcquisitor(mainApp, mainApp.fields.acquisitionEnterprises.acquisitionEnterpriseList[i], a1Apps));

        return validationResults.indexOf(false) < 0;
    }

    private validateAdditionalAppsForAcquisitor(mainApp: V1, acquisitor: F6020_AcquisitionEnterprise, a1Apps: ApplicationFormBase[]): boolean {
        let errors = this.getErrorsForAdditionalAppsForAcquisitor(acquisitor, a1Apps);
        errors.forEach((error: string) => mainApp.addError(error, ErrorLevels.Error));

        return errors.length == 0;
    }

    private getErrorsForAdditionalAppsForAcquisitor(acquisitor: F6020_AcquisitionEnterprise, a1Apps: ApplicationFormBase[]): string[] {
        let errors = [];

        if (ObjectHelper.isStringNullOrEmpty(acquisitor.subject.indent)) {
            let a1ForInitialRegForAcquisitorName = a1Apps
                .filter(a1 => ((SpecificApplicationInfoAccessor.isApplicationStateNew(a1))
                    && SpecificApplicationInfoAccessor.getF002_Company(a1).text
                    && (SpecificApplicationInfoAccessor.getF002_Company(a1).text == acquisitor.subject.name)));

            if (a1ForInitialRegForAcquisitorName.length == 0) // Няма подадено допълнително заявление за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00188_E') + ': ' + (acquisitor.subject.name ? acquisitor.subject.name : ''));

            if (a1ForInitialRegForAcquisitorName.length > 1) // Добавено е повече от едно допълнително заявление за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00189_E') + ': ' + (acquisitor.subject.name ? acquisitor.subject.name : ''));

            this._matchedAdditionalApplicationsCount += a1ForInitialRegForAcquisitorName.length;
        } else {
            let a1ForChangeForAcquisitorId = a1Apps
                .filter(a1 => SpecificApplicationInfoAccessor.isApplicationStateForChange(a1) && (SpecificApplicationInfoAccessor.getF001_UIC(a1).text == acquisitor.subject.indent));

            if (a1ForChangeForAcquisitorId.length > 0) // Добавено е допълнително заявление за промяна на обстоятелства на правоприемник
                errors.push(this.getMessage('CR_APP_00190_E') + ': ' + (acquisitor.subject.name ? (acquisitor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (acquisitor.subject.indent ? acquisitor.subject.indent : ''));

            this._matchedAdditionalApplicationsCount += a1ForChangeForAcquisitorId.length;
        }

        return errors;
    }

    private matchAppsForTransferringEnterprise(transferringEnterprise: F601_TransferringEnterprise, additionalApps: ApplicationFormBase[]): void {
        let a1ForChangeForTransferringEnterpriseId = additionalApps
            .filter(app => SpecificApplicationInfoAccessor.isApplicationStateForChange(app) && (SpecificApplicationInfoAccessor.getF001_UIC(app).text == transferringEnterprise.subject.indent));

        this._matchedAdditionalApplicationsCount += a1ForChangeForTransferringEnterpriseId.length;
    }

    private validateAllUICsAreRegisteredInTR(mainApp: V1): boolean {
        let isValid = true;

        if (ValidatorHelpers.isValidUIC(mainApp.fields.transferringEnterprise.subject.indent)) {
            let summary = mainApp.draftDeedInfoList.filter(d => d.uic == mainApp.fields.transferringEnterprise.subject.indent)[0];
            if (!summary) {
                isValid = false;
                mainApp.fields.transferringEnterprise.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
            } else if (!ObjectHelper.isStringNullOrEmpty(mainApp.fields.transferringEnterprise.subject.name) && summary.companyName != mainApp.fields.transferringEnterprise.subject.name) {
                isValid = false;
                mainApp.fields.transferringEnterprise.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', mainApp.fields.transferringEnterprise.subject.name), ErrorLevels.Error);
            }
        }


        for (let acquisitionEnterprise of mainApp.fields.acquisitionEnterprises.acquisitionEnterpriseList) {
            if (ValidatorHelpers.isValidUIC(acquisitionEnterprise.subject.indent)) {
                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == acquisitionEnterprise.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    acquisitionEnterprise.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(acquisitionEnterprise.subject.name) && summary.companyName != acquisitionEnterprise.subject.name) {
                    isValid = false;
                    acquisitionEnterprise.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', acquisitionEnterprise.subject.name), ErrorLevels.Error);
                }
            }
        }

        return isValid;
    }
}

export class V1FieldsValidator extends ApplicationFormFieldsBaseValidator<V1Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.transferringEnterprise).setValidator(new F601_TransferringEnterpriseValidator());
        this.ruleFor(m => m.acquisitionEnterprises).setValidator(new F602_AcquisitionEnterprisesValidator());
    }

    public validate(obj: V1Fields): boolean {
        let isValid = super.validate(obj);

        return isValid;
    }
}