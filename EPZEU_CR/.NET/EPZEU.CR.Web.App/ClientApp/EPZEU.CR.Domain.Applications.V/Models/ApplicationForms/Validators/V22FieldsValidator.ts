import { ArrayHelper, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormFieldsBaseValidator } from 'EPZEU.CR.Domain';
import { F7030_Successor } from '../../Fields/ModelsAutoGenerated';
import { F701_FormOfTransformingValidator } from '../../Fields/Validators/F701_FormOfTransformingValidator';
import { F702_TransformingCompaniesValidator } from '../../Fields/Validators/F702_TransformingCompaniesValidator';
import { F703_SuccessorsValidator } from '../../Fields/Validators/F703_SuccessorsValidator';
import { F704_BranchesValidator } from '../../Fields/Validators/F704_BranchesValidator';
import { V22Fields } from '../ModelsAutoGenerated';

export class V22FieldsValidator extends ApplicationFormFieldsBaseValidator<V22Fields>{
    constructor() {
        super();

        this.ruleFor(m => m.formOfTransforming701).setValidator(new F701_FormOfTransformingValidator());
        this.ruleFor(m => m.transformingCompanys).setValidator(new F702_TransformingCompaniesValidator());
        this.ruleFor(m => m.successors703).setValidator(new F703_SuccessorsValidator());
        this.ruleFor(m => m.branches704).setValidator(new F704_BranchesValidator());
    }

    public validate(obj: V22Fields): boolean {
        let isValid = super.validate(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.transformingCompanys.transformingCompanyList[0].subject.indent) && ObjectHelper.isStringNullOrEmpty(obj.transformingCompanys.transformingCompanyList[0].subject.name)) {
            obj.transformingCompanys.transformingCompanyList[0].clearErrors();
            obj.transformingCompanys.transformingCompanyList[0].addError('subject', this.getMessage('CR_APP_00017_Е')); // Задължително е попълването на "Преобразуващо се дружество"!
            isValid = false;
        }

        for (var i = 0; i < obj.successors703.successorList.length; i++) {
            let company = obj.successors703.successorList[i];
            if (this.isSuccessorRecordEmpty(company) && obj.successors703.successorList.length > 1) {
                company.clearErrors();
                company.addError('subject', this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.
                isValid = false;
            } else if (!company.subject.name) {
                company.addError('subject', this.getMessage('CR_APP_00018_E')); //Полето "Фирма" е задължително!
                isValid = false;
            }
        }

        for (var i = 0; i < obj.branches704.branchList.length; i++) {
            let subject704 = obj.branches704.branchList[i];

            if (subject704.branchSubject.indent) {
                if (ArrayHelper.queryable.from(obj.successors703.successorList)
                    .where(successor => successor.subject.indent == subject704.branchSubject.indent)
                    .count() == 0) {
                    subject704.addError(this.getMessage('CR_APP_00147_E')); // Фирмата не е от списъка от фирми изброени в поле 703!
                    isValid = false;
                    break;
                }
            }

            if (subject704.branchSubject.name) {
                if (ArrayHelper.queryable.from(obj.successors703.successorList)
                    .where(successor => successor.subject.name == subject704.branchSubject.name)
                    .count() == 0) {
                    subject704.addError(this.getMessage('CR_APP_00147_E')); // Фирмата не е от списъка от фирми изброени в поле 703!
                    isValid = false;
                }
            }
        }
        return isValid;
    }

    private isSuccessorRecordEmpty(successor: F7030_Successor): boolean {
        // в UI-a legalForm се сетва на -1 по default.
        return (!successor.subject.name && !successor.subject.indent && successor.legalForm == '-1');
    }
}