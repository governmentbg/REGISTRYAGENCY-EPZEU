import { ArrayHelper, ErrorLevels, Helper, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationItem, Person, SpecificApplicationInfoAccessor, ValidatorHelpers } from 'EPZEU.CR.Domain';
import { F801a_FormOfTransforming801a, F8030_Successor803 } from '../../Fields/ModelsAutoGenerated';
import { V33 } from '../ApplicationFormsV';
import { ApplicationFormVValidator } from './ApplicationFormVValidator';
import { V33FieldsValidator } from './V33FieldsValidator';

export class V33Validator extends ApplicationFormVValidator<V33> {
    private _matchedAdditionalA7ApplicaitonsCount: number = 0;
    private _matchedAdditionalA13ApplicaitonsCount: number = 0;

    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new V33FieldsValidator());
    }

    public validate(obj: V33): boolean {
        let isValid = super.validate(obj);

        isValid = this.validateAdditionalApps(obj) && isValid;
        isValid = this.validateAllUICsAreRegisteredInTR(obj) && isValid;

        return isValid;
    }

    private validateAdditionalApps(mainApp: V33): boolean {

        let isValid = true;
        this._matchedAdditionalA7ApplicaitonsCount = 0;
        this._matchedAdditionalA13ApplicaitonsCount = 0;

        let a7List = ArrayHelper.queryable.from(this.validationContext.applicationManager.processContext.applicationItems.filter((applicationItem: ApplicationItem) => {
            return applicationItem.applicationProvider.applicationType == ApplicationFormTypes.A7;
        })).select((element: ApplicationItem) => element.applicationManager.application).toArray();

        let a13List = ArrayHelper.queryable.from(this.validationContext.applicationManager.processContext.applicationItems.filter((applicationItem: ApplicationItem) => {
            return applicationItem.applicationProvider.applicationType == ApplicationFormTypes.A13;
        })).select((element: ApplicationItem) => element.applicationManager.application).toArray();

        let errorsForWayOfEstablishing: string[] = [];
        if (a13List.length > 0)
            errorsForWayOfEstablishing = this.getErrorsForWayOfEstablishingEuropeanCooperativeSociety(a13List, mainApp);

        errorsForWayOfEstablishing.forEach((error: string) => mainApp.addError(error, ErrorLevels.Information));

        let errorsForAppsForSuccessor = this.getErrorsForAppsForSuccessor(mainApp.fields.successors803.successorList[0], a7List, a13List, mainApp.fields.formOfTransforming801a); // в това заявление има само един правоприемник - затова забиваме индекс 0.
        errorsForAppsForSuccessor.forEach((error: string) => mainApp.addError(error, ErrorLevels.Error));

        isValid = ((errorsForWayOfEstablishing.length == 0) && (errorsForAppsForSuccessor.length == 0)) && isValid;

        if (a13List[0] && (mainApp.fields.formOfTransforming801a.conversionToCoop == false)) {
            if (SpecificApplicationInfoAccessor.getF002_Company(a13List[0]).text != mainApp.fields.successors803.successorList[0].subject.name) {
                mainApp.addError(this.getMessage('CR_APP_00206_E'), ErrorLevels.Error); //Името на фирмата в допълнително подаденото заявление А13 не съвпада с името на правоприемника от заявление В33.
                isValid = false;
                this._matchedAdditionalA13ApplicaitonsCount += 1;
            }
        }

        if (a7List[0] && mainApp.fields.formOfTransforming801a.conversionToCoop) {
            if (SpecificApplicationInfoAccessor.getF002_Company(a7List[0]).text != mainApp.fields.successors803.successorList[0].subject.name) {
                mainApp.addError(this.getMessage('CR_APP_00209_E'), ErrorLevels.Error); // Името на фирмата в допълнително подаденото заявление А7 не съвпада с името на правоприемника от заявление В33.
                isValid = false;
                this._matchedAdditionalA7ApplicaitonsCount += 1;
            }
        }


        if ((a7List.length > this._matchedAdditionalA7ApplicaitonsCount) || (a13List.length > this._matchedAdditionalA13ApplicaitonsCount)) {
            // Добавени са допълнителни заявления, които не са подадени коректно за първоначална регистрация или за промяна на данни или не са свързани с правоприемник и / или преобразуващо се дружество
            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00197_E'), ErrorLevels.Error);
        }

        return isValid;
    }

    private getErrorsForWayOfEstablishingEuropeanCooperativeSociety(a13List: ApplicationFormBase[], mainApp: V33): string[] {
        let errors: string[] = [];

        // ако е избрано influx801a, трябва в допълнителното заявление да е избрано throughAcquisitionOrMerge;
        let isThroughAcquisitionOrMergeNOTSelectedWhenInfluxIsSelected = mainApp.fields.formOfTransforming801a.influx801a
            && (SpecificApplicationInfoAccessor.getF070a_WayOfEstablishingEuropeanCooperativeSociety(a13List[0]).throughAcquisitionOrMerge == false);

        // ако е избрано Fusion801a, трябва в допълнителното заявление да е избрано ThroughAcquisitionOrMerge;
        let isThroughAcquisitionOrMergeNOTSelectedWhenFusionIsSelected = mainApp.fields.formOfTransforming801a.fusion801a
            && (SpecificApplicationInfoAccessor.getF070a_WayOfEstablishingEuropeanCooperativeSociety(a13List[0]).throughAcquisitionOrMerge == false);

        // ако е избрано ConversionToEUCoop, трябва в допълнителното заявление да е избрано ByConvertingCooperativeSocietyIntoEuropeanCooperativeSociety;
        let isByConvertingCooperativeSocietyNOTSelectedWhenInfluxIsSelected = mainApp.fields.formOfTransforming801a.conversionToEUCoop
            && (SpecificApplicationInfoAccessor.getF070a_WayOfEstablishingEuropeanCooperativeSociety(a13List[0]).byConvertingCooperativeSocietyIntoEuropeanCooperativeSociety == false);

        if (isThroughAcquisitionOrMergeNOTSelectedWhenInfluxIsSelected
            || isThroughAcquisitionOrMergeNOTSelectedWhenFusionIsSelected
            || isByConvertingCooperativeSocietyNOTSelectedWhenInfluxIsSelected) {
            errors.push(this.getMessage('CR_APP_00212_E')); //Начинът на учредяване на европейското кооперативно дружество в заявление А13 трябва да отговаря на формата на преобразуване в заявление В33
            errors.push(this.getMessage('CR_APP_00213_E')); // Ако в поле 801а „Форма на преобразуване с участие на ЕКД” е избрано „учредяване на ЕКД чрез вливане с участие на кооперации със седалище в държава – членка на ЕС или други държави – страни по споразумението за ЕИП” , в поле 70а „Начин на учредяване на ЕКД” трябва да е избрано „Чрез вливане/сливане по чл. 2, ал. 1, четвърто тире и чл. 19 до чл. 34 от Регламент (ЕО) № 1435/2003”
            errors.push(this.getMessage('CR_APP_00215_E')); // Ако в поле 801а „Форма на преобразуване с участие на ЕКД” е избрано „преобразуване на кооперация със седалище в Р. България в ЕКД със седалище в Р. България”,  „в поле 70а „Начин на учредяване на ЕКД” трябва да е избрано „Чрез преобразуване на кооперация в ЕКД по чл. 2, ал. 1, пето тире и чл. 35 от Регламент (ЕО) № 1435/2003”"
        }

        return errors;
    }

    private getErrorsForAppsForSuccessor(successor: F8030_Successor803, a7List: ApplicationFormBase[], a13List: ApplicationFormBase[], formOfTransforming: F801a_FormOfTransforming801a): string[] {
        let errors: string[] = [];

        if (formOfTransforming.influx801a) {
            let a13AppsForInitialRegForSuccessorIdentAndName = a13List
                .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap))
                    && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent)
                    && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

            if (a13AppsForInitialRegForSuccessorIdentAndName.length == 0) // Няма подадено допълнително заявление A13 за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00205_E') + ': ' + (successor.subject.name ? (successor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.subject.indent ? successor.subject.indent : ''));

            if (a7List.length > 0) // Добавено е допълнително заявление A7
                errors.push(this.getMessage('CR_APP_00204_E'));

            this._matchedAdditionalA7ApplicaitonsCount += a7List.length;
            this._matchedAdditionalA13ApplicaitonsCount += a13AppsForInitialRegForSuccessorIdentAndName.length;
        } else if (formOfTransforming.fusion801a) {
            let a13AppsForInitialRegForSuccessorName = a13List
                .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap)) && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

            if (a13AppsForInitialRegForSuccessorName.length == 0) // Няма подадено допълнително заявление A13 за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00205_E') + ': ' + (successor.subject.name ? (successor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.subject.indent ? successor.subject.indent : ''));

            if (a7List.length > 0) // Добавено е допълнително заявление A7
                errors.push(this.getMessage('CR_APP_00204_E'));

            this._matchedAdditionalA7ApplicaitonsCount += a7List.length;
            this._matchedAdditionalA13ApplicaitonsCount += a13AppsForInitialRegForSuccessorName.length;
        } else if (formOfTransforming.conversionToCoop) {
            if (a13List.length > 0) // Добавено е допълнително заявление A13.
                errors.push(this.getMessage('CR_APP_00207_E'));

            let a7AppsForInitialRegForSuccessorIdentAndName = a7List
                .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap))
                    && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent)
                    && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

            if (a7AppsForInitialRegForSuccessorIdentAndName.length == 0) // Няма подадено допълнително заявление A7 за правоприемник
                errors.push(this.getMessage('CR_APP_00208_E') + ': ' + (successor.subject.name ? (successor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.subject.indent ? successor.subject.indent : ''));

            this._matchedAdditionalA7ApplicaitonsCount += a7AppsForInitialRegForSuccessorIdentAndName.length;
            this._matchedAdditionalA13ApplicaitonsCount += a13List.length;
        } else if (formOfTransforming.conversionToEUCoop) {
            if (a7List.length > 0) // Добавено е допълнително заявление A7
                errors.push(this.getMessage('CR_APP_00204_E'));

            let a13AppsForInitialRegForSuccessorIdentAndName = a13List
                .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap))
                    && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent)
                    && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

            if (a13AppsForInitialRegForSuccessorIdentAndName.length == 0) // Няма подадено допълнително заявление A13 за правоприемник
                errors.push(this.getMessage('CR_APP_00210_E') + ': ' + (successor.subject.name ? (successor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.subject.indent ? successor.subject.indent : ''));

            this._matchedAdditionalA7ApplicaitonsCount += a7List.length;
            this._matchedAdditionalA13ApplicaitonsCount += a13AppsForInitialRegForSuccessorIdentAndName.length;
        }

        return errors;
    }

    private validateAllUICsAreRegisteredInTR(mainApp: V33): boolean {
        let isValid = true;

        for (let coOperative of mainApp.fields.reorganizeCoOperatives2.coOperative2List) {

            if (ValidatorHelpers.isValidUIC(coOperative.subject.indent)) {
                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == coOperative.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    coOperative.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(coOperative.subject.name) && summary.companyName != coOperative.subject.name) {
                    //Наименованието {COMPANY_NAME} е различно от наименованието, което е регистрирано в Търговския регистър за посочения ЕИК. 
                    //Натиснете "Извлечи данни", за да се попълни коректното наименование!
                    isValid = false;
                    coOperative.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', coOperative.subject.name), ErrorLevels.Error);
                }
            }
        }

        for (let successor of mainApp.fields.successors803.successorList) {

            if (ValidatorHelpers.isValidUIC(successor.subject.indent)) {
                let summary = mainApp.draftDeedInfoList.filter(d => d.uic == successor.subject.indent)[0];

                if (!summary) {
                    isValid = false;
                    successor.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
                } else if (!ObjectHelper.isStringNullOrEmpty(successor.subject.name) && summary.companyName != successor.subject.name) {
                    //Наименованието {COMPANY_NAME} е различно от наименованието, което е регистрирано в Търговския регистър за посочения ЕИК. 
                    //Натиснете "Извлечи данни", за да се попълни коректното наименование!
                    isValid = false;
                    successor.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', successor.subject.name), ErrorLevels.Error);
                }
            }
        }

        return isValid;
    }
}