import { ArrayHelper, ErrorLevels, Helper, ObjectHelper } from 'Cnsys.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';
import { ApplicationFormBase, ApplicationFormFieldsBaseValidator, ApplicationItem, Person, SpecificApplicationInfoAccessor } from 'EPZEU.CR.Domain';
import { F702b0_TransformingNPO, F7030_Successor } from '../../Fields/ModelsAutoGenerated';
import { F701_FormOfTransformingValidator } from '../../Fields/Validators/F701_FormOfTransformingValidator';
import { F702b_TransformingNPOsValidator } from '../../Fields/Validators/F702b_TransformingNPOsValidator';
import { F703_SuccessorsValidator } from '../../Fields/Validators/F703_SuccessorsValidator';
import { V25 } from '../ApplicationFormsV';
import { V25Fields } from '../ModelsAutoGenerated';
import { ApplicationFormVValidator } from './ApplicationFormVValidator';

export class V25Validator extends ApplicationFormVValidator<V25> {

    private _matchedAdditionalApplicationsCount: number = 0;

    constructor() {
        super();

        this.ruleFor(m => m.fields).setValidator(new V25FieldsValidator());
    }

    public validate(obj: V25): boolean {
        let isValid = super.validate(obj);

        isValid = this.validateAdditionalApps(obj) && isValid;
        isValid = this.validateAllUICsAreRegisteredInTR(obj) && isValid;

        return isValid;
    }

    private validateAdditionalApps(mainApp: V25): boolean {
        let isValid = true;
        this._matchedAdditionalApplicationsCount = 0;

        let applicationTypesToSearch =
            [ApplicationFormTypes.A15,
            ApplicationFormTypes.A16,
            ApplicationFormTypes.A17];

        let applicationsToSearch = ArrayHelper.queryable.from(this.validationContext.applicationManager.processContext.applicationItems.filter((applicationItem: ApplicationItem) => {
            return applicationTypesToSearch.indexOf(applicationItem.applicationProvider.applicationType) >= 0;
        })).select((element: ApplicationItem) => element.applicationManager.application).toArray();

        let errors: string[] = [];
        for (var i = 0; i < mainApp.fields.successors703.successorList.length; i++)
            errors = errors.concat(this.getErrorsForAppsForSuccessor(mainApp.fields.successors703.successorList[i], applicationsToSearch));

        errors.forEach((error: string) => mainApp.addError(error, ErrorLevels.Error));
        isValid = (errors.length == 0) && isValid;

        this.matchAppsForTransformingNPO(mainApp.fields.transformingNPOs.transformingNPOList[0], applicationsToSearch);

        if (applicationsToSearch.length > this._matchedAdditionalApplicationsCount) {
            // Добавени са допълнителни заявления, които не са подадени коректно за първоначална регистрация или за промяна на данни или не са свързани с правоприемник и/или преобразуващо се ЮЛНЦ.

            isValid = false;
            mainApp.addError(this.getMessage('CR_APP_00255_E'), ErrorLevels.Error);
        }

        return isValid;
    }

    private getErrorsForAppsForSuccessor(successor: F7030_Successor, additionalApps: ApplicationFormBase[]): string[] {
        let errors = [];

        if (ObjectHelper.isStringNullOrEmpty(successor.subject.indent)) {
            let appsForInitialRegForSuccessorName = additionalApps
                .filter(ap => ((SpecificApplicationInfoAccessor.isApplicationStateNew(ap)) && (SpecificApplicationInfoAccessor.getF002_Company(ap).text == successor.subject.name)));

            if (appsForInitialRegForSuccessorName.length == 0) //Няма подадено допълнително заявление за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00188_E') + ': ' + (successor.subject.name ? successor.subject.name : ''));

            if (appsForInitialRegForSuccessorName.length > 1) // Добавено е повече от едно допълнително заявление за първоначална регистрация на правоприемник
                errors.push(this.getMessage('CR_APP_00189_E') + ': ' + (successor.subject.name ? successor.subject.name : ''));

            this._matchedAdditionalApplicationsCount += appsForInitialRegForSuccessorName.length;
        } else {
            let appsForChangeForSuccessorId = additionalApps
                .filter(ap => SpecificApplicationInfoAccessor.isApplicationStateForChange(ap) && (SpecificApplicationInfoAccessor.getF001_UIC(ap).text == successor.subject.indent));

            if (appsForChangeForSuccessorId.length > 1) // Добавено е повече от едно допълнително заявление за промяна на обстоятелства на правоприемник
                errors.push(this.getMessage('CR_APP_00198_E') + ': ' + (successor.subject.name ? (successor.subject.name + ', ') : '') + this.getMessage('GL_COMPANY_ID_L') + ': ' + (successor.subject.indent ? successor.subject.indent : ''));

            this._matchedAdditionalApplicationsCount += appsForChangeForSuccessorId.length;
        }

        return errors;
    }

    private matchAppsForTransformingNPO(transformingNPO: F702b0_TransformingNPO, additionalApps: ApplicationFormBase[]): void {
        let appsForChangeForTransformingNPOId = additionalApps
            .filter(app => SpecificApplicationInfoAccessor.isApplicationStateForChange(app) && (SpecificApplicationInfoAccessor.getF001_UIC(app).text == transformingNPO.subject.indent));

        this._matchedAdditionalApplicationsCount += appsForChangeForTransformingNPOId.length;
    }

    private validateAllUICsAreRegisteredInTR(mainApp: V25): boolean {
        let isValid = true;

        for (let transformingNPO of mainApp.fields.transformingNPOs.transformingNPOList) {
            let summary = mainApp.draftDeedInfoList.filter(d => d.uic == transformingNPO.subject.indent)[0];

            if (!summary) {
                isValid = false;
                transformingNPO.subject.addError(Helper.getPropertyNameBySelector((m: Person) => m.indent), this.getMessage('GL_NOT_FOUND_COMPANY_E'), ErrorLevels.Error); // Няма намерена фирма/ЮЛНЦ.
            } else if (!ObjectHelper.isStringNullOrEmpty(transformingNPO.subject.name) && summary.companyName != transformingNPO.subject.name) {
                isValid = false;
                transformingNPO.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', transformingNPO.subject.name), ErrorLevels.Error);
            }
        }

        for (let successor of mainApp.fields.successors703.successorList) {
            let summary = mainApp.draftDeedInfoList.filter(d => d.uic == successor.subject.indent)[0];

            if (summary && !ObjectHelper.isStringNullOrEmpty(successor.subject.name) && summary.companyName != successor.subject.name) {
                isValid = false;
                successor.addError(this.getMessage('CR_APP_00248_E').replace('{COMPANY_NAME}', successor.subject.name), ErrorLevels.Error);
            }
        }

        return isValid;
    }
}

export class V25FieldsValidator extends ApplicationFormFieldsBaseValidator<V25Fields>{

    constructor() {
        super();

        this.ruleFor(m => m.formOfTransforming701).setValidator(new F701_FormOfTransformingValidator());
        this.ruleFor(m => m.transformingNPOs).setValidator(new F702b_TransformingNPOsValidator());
        this.ruleFor(m => m.successors703).setValidator(new F703_SuccessorsValidator());
    }

    public validate(obj: V25Fields): boolean {

        let isValid = super.validate(obj);

        if (ObjectHelper.isStringNullOrEmpty(obj.transformingNPOs.transformingNPOList[0].subject.indent)
            && ObjectHelper.isStringNullOrEmpty(obj.transformingNPOs.transformingNPOList[0].subject.name)) {

            obj.transformingNPOs.transformingNPOList[0].clearErrors();
            obj.transformingNPOs.transformingNPOList[0].addError('subject', this.getMessage('CR_APP_00254_E')); //Задължително е попълването на поне едно "Преобразуващо се ЮЛНЦ"!

            isValid = false;
        }

        if (!obj.formOfTransforming701.fusion && !obj.formOfTransforming701.influx && obj.transformingNPOs.transformingNPOList.length > 1) {
            obj.transformingNPOs.addError(this.getMessage('CR_APP_00098_E')); // За избраната "Форма на преобразуване" може да има само едно преобразуващо се дружество.
            isValid = false;
        }

        for (var i = 0; i < obj.successors703.successorList.length; i++) {
            let company = obj.successors703.successorList[i];

            if (this.isSuccessorRecordEmpty(company) && obj.successors703.successorList.length > 1) {
                company.clearErrors();
                company.addError('subject', this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.
                isValid = false;
            } else if (!company.subject.name) {
                company.addError('subject', this.getMessage('CR_APP_00036_E')); //Полето "Наименование" е задължително!
                isValid = false;
            }
        }

        return isValid;
    }

    private isSuccessorRecordEmpty(successor: F7030_Successor): boolean {
        // в UI-a legalForm се сетва на -1 по default.
        return (!successor.subject.name && !successor.subject.indent && successor.legalForm == '-1');
    }
}