import { IApplicationFormValidationContext, RecordOperations, Person } from 'EPZEU.CR.Domain';
import { F702a_TransformingCompanys2 } from '../ModelsAutoGenerated';
import { F7020a_TransformingCompanyValidator } from './F7020a_TransformingCompanyValidator';
import { EPZEUBaseValidator } from 'EPZEU.Core';
import { ArrayHelper } from 'Cnsys.Core';
import { ApplicationFormTypes } from 'EPZEU.CR.Core';

export class F702a_TransformingCompaniesValidator extends EPZEUBaseValidator<F702a_TransformingCompanys2, IApplicationFormValidationContext> {
    constructor() {
        super();

        this.ruleFor(m => m.transformingCompany2List).setCollectionValidator(new F7020a_TransformingCompanyValidator());
    }

    public validate(obj: F702a_TransformingCompanys2): boolean {
        let isValid = super.validate(obj);

        // В заявление В23 поле 702 се държи като 702 или 702а в зависимост от типа на заявлението, чийто входящ номер е въведен в 705
        // Ако типа е В24, се държи като 702а и си инициализира празен елемент в transformingCompany2List. Затова тук правим тази проверка - ако 
        // няма такъв елемент (obj.transformingCompany2List.length == 0), значи полето се държи като 702, а не 702а и този валидатор не трябва да се задейства.
        // Забито е, но иначе трябва да изнеса логиката на ниво заявление и да я дублирам. Може да я изнеса на някакъв helper?
        if ((this.validationContext.appType != ApplicationFormTypes.V24) && obj.transformingCompany2List.length == 0) {
            return true;
        }

        let countNotEmptyTransformingCompanys: number = ArrayHelper
            .queryable
            .from(obj.transformingCompany2List)
            .where(m => !this.isTransformingCompanyRecordEmpty(m.subject))
            .count();

        if (countNotEmptyTransformingCompanys == 0) {
            obj.clearErrors();
            obj.addError(this.getMessage('CR_APP_00028_E'));  //Задължително е попълването на "Преобразуващо се дружество"!
            isValid = false;
        }

        let emptyElements = ArrayHelper
            .queryable
            .from(obj.transformingCompany2List)
            .where(m => this.isTransformingCompanyRecordEmpty(m.subject))
            .toArray();

        if (obj.transformingCompany2List.length > 1) {
            for (var i = 0; i < emptyElements.length; i++) {
                emptyElements[i].addError(this.getMessage('CR_APP_00063_E')); //Попълнете данните за полето или го изтрийте.
                isValid = false;
            }
        }


        if (isValid) {
            let hasForeignTraders = false;

            for (var i = 0; i < obj.transformingCompany2List.length; i++) {
                if (obj.transformingCompany2List[i].subject.isForeignTrader)
                    hasForeignTraders = true;
            }

            if (hasForeignTraders == false) {
                obj.addError(this.getMessage('CR_APP_00030_E'));  // Попълнете поне едно чуждестранно юридическо лице...
                isValid = false;
            }
        }

        return isValid;
    }

    // не можем да ползваме this.validationContext.isRecordEmpty, защото countryName се сетва по подразбиране да е България!
    private isTransformingCompanyRecordEmpty(company: Person): boolean {
        return (!company.name && !company.indent && !company.isForeignTrader);
    }
}