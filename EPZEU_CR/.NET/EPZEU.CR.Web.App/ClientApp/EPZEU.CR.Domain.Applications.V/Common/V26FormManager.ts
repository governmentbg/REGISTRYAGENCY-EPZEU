import { ObjectHelper } from 'Cnsys.Core';
import { Branch, IApplicationWithFieldsFormManager, RecordOperations } from 'EPZEU.CR.Domain';
import { observable } from 'mobx';
import { V26 } from '../Models/ApplicationForms/ApplicationFormsV';
import { F7030_Successor } from '../Models/Fields/ModelsAutoGenerated';
import { ApplicationFormVBaseManager } from './ApplicationFormVBaseManager';

export interface IV26FormManager extends IApplicationWithFieldsFormManager {
    transformingCompanyBranches: Branch[];
    successors: F7030_Successor[];
}

export function Is26FormManager(obj: IV26FormManager | any): obj is IV26FormManager {
    return obj && (ObjectHelper.isSubClassOf(obj, V26FormManager));
}

export class V26FormManager extends ApplicationFormVBaseManager<V26> implements IV26FormManager {

    constructor() {
        super();

        this.onUICChange = this.onUICChange.bind(this);
        this.searchBranchesByUIC = this.searchBranchesByUIC.bind(this);
    }

    protected createApplication(obj: any): V26 {
        return new V26(obj);
    }

    /**Инициализира данните на заявленеито*/
    protected initApplicationData(): Promise<void> {
        let that = this;

        return super.initApplicationData().bind(this).then(() => {
            // Поле 703 понякога се държи като списъчно, понякога не (в зависимост от това какво е избрано в 701)
            // Може да е задължително или не (пак в зависимост от 701)
            // Затова не можем да го инициализираме в V21Provider.cs - ако го инициалицираме там и после 
            // в 701 е избрана такава опция, че 703 да не е задължително за попълване, и го оставим празно,
            // то няма да се прати към търговския (защото се прави сравнение - вижда се, че няма промяна, и не го праща),
            // а в старата система се праща (макар и празно)
            if (this.application.fields.successors703.successorList.length == 0) {
                let successor = new F7030_Successor();
                successor.legalForm = '-1';
                successor.recordOperation = RecordOperations.Add;
                successor.recordID = ObjectHelper.newGuid();
                this.application.fields.successors703.successorList.push(successor)
            }

            return super.initApplicationData().bind(this).then(() => {
                return super.searchBranchesByUIC(that.application.fields.transformingNPOs.transformingNPOList[0].subject.indent).then((branches) => {
                    that.transformingCompanyBranches = branches;
                });
            });
        });
    }

    public get successors(): F7030_Successor[] {
        return this.application.fields.successors703.successorList;
    }

    public onUICChange(uic: string): Promise<void> {
        let that = this;

        return super.onUICChange(uic).then(() => {
            return super.searchBranchesByUIC(that.application.fields.transformingNPOs.transformingNPOList[0].subject.indent).then((branches) => {
                that.transformingCompanyBranches = branches;
            });
        })
    }

    // поле 704 показва в dropdown клоновете на избраната фирма в поле 702.
    @observable public transformingCompanyBranches: Branch[] = []
}