import { ObjectHelper } from 'Cnsys.Core';
import { DeedSummary } from 'EPZEU.CR.Core';
import { ApplicationWithFieldsFormBaseManager, DeedsDataService, IApplicationWithFieldsFormManager, ValidatorHelpers, Branch } from 'EPZEU.CR.Domain';
import { ApplicationFormVBase } from '../Models/ApplicationForms/ApplicationFormsV';
import { ApplicationFormVFieldsBase, DraftDeedInfo } from '../Models/ApplicationForms/ModelsAutoGenerated';

export interface IApplicationFormVManager extends IApplicationWithFieldsFormManager {
    saveDraftDeedSummary(uic: string): Promise<void>;
    searchBranchesByUIC(ident: string): Promise<Branch[]>;
    onUICChange(uic: string): Promise<void>;
}

export abstract class ApplicationFormVBaseManager<TAppl extends ApplicationFormVBase<ApplicationFormVFieldsBase>> extends ApplicationWithFieldsFormBaseManager<TAppl> implements IApplicationFormVManager {
    private _deedsDataService: DeedsDataService;

    constructor() {
        super();

        this._deedsDataService = new DeedsDataService();
        this.onUICChange = this.onUICChange.bind(this);
        this.saveDraftDeedSummary = this.saveDraftDeedSummary.bind(this);
    }

    public saveDraftDeedSummary(uic: string): Promise<void> {
        if (ValidatorHelpers.isValidUIC(uic)) {
            if (!this.application.draftDeedInfoList) {
                this.application.draftDeedInfoList = [];
            }

            if (this.application.draftDeedInfoList.filter(d => d.uic == uic).length == 0) {
                return this._deedsDataService.getDeedSummary(uic).then((res: DeedSummary) => {
                    if (res) {
                        let draftDeedInfo = new DraftDeedInfo();
                        draftDeedInfo.companyFullName = res.companyFullName;
                        draftDeedInfo.companyName = res.companyName;
                        draftDeedInfo.uic = res.uic;
                        draftDeedInfo.legalForm = res.legalForm;
                        this.application.draftDeedInfoList.push(draftDeedInfo);
                    }
                });
            }
        }

        return Promise.resolve();
    }

    public onUICChange(uic: string): Promise<void> {
        return this.saveDraftDeedSummary(uic);
    }

    public searchBranchesByUIC(ident: string): Promise<Branch[]> {
        if (ValidatorHelpers.isValidUIC(ident)) {
            return this._deedsDataService.getCompanyBranches(ident).then((branches: Branch[]) => {
                return branches ? branches : [];
            });
        }

        return Promise.resolve([]);
    }
}

export function isApplicationFormVBaseManager(obj: IApplicationFormVManager | any): obj is IApplicationFormVManager {
    return obj && ObjectHelper.isSubClassOf(obj, ApplicationFormVBaseManager);
}
