${ 
    // Enable extension methods by adding using Typewriter.Extensions.*
    using Typewriter.Extensions.Types;

    // Uncomment the constructor to change template settings.
    Template(Settings settings)
    {
        settings.OutputFilenameFactory= OutputFilenameFactory;   
        settings.OutputExtension = "cs";

    }

    string OutputFilenameFactory(File file)
    {
        return "FieldExtensionsAutoGenerated";
    }

    string WriteClass(Class classToWrite)
    {
        List<string> abstractClass = new List<string>() {"Statement", "StatementsBase", "DepozitarDistraintData"};

        if(classToWrite.Name == "FieldTypeFactory")
        {
            return "";
        }

        string classType = abstractClass.Contains(classToWrite.Name) ? "abstract partial" : "partial";
        string isEmptyType = classToWrite.BaseClass != null ? "override bool" : "virtual bool";
        string className = classToWrite.Name == "StatementsBase" ? "StatementsBase<T>" :  classToWrite.Name;

        string classDefinitionFormat = @"
    public {0} class {1}
    {{
        public {2} IsEmpty()
        {{{3}
        }}
    }}";

        return string.Format(classDefinitionFormat, classType, className, isEmptyType, WriteIsEmpty(classToWrite));
    }
    
    bool IsSubClassOf(Class classToCheck, string subClassName)
    {
        if(classToCheck.Name == subClassName)
        {
            return true;
        }
        else if(classToCheck.BaseClass != null)
        {
            return IsSubClassOf(classToCheck.BaseClass, subClassName);
        }

        return false;
    }
     
    string WriteIsEmpty(Class classToWrite)
    {
         string isEmptyDef = "";

        if(classToWrite.BaseClass != null && classToWrite.BaseClass.Namespace.Contains("EPZEU.CR.Domain.Fields"))
        {
            isEmptyDef += @"
            if (!base.IsEmpty())
                return false;              
            ";
        }
        
        foreach(var prop in classToWrite.Properties)
        {
            string isEmptyDefFormat;

            if(prop.Name.EndsWith("Specified"))
            {
                isEmptyDefFormat = "";
            }
            else if(prop.Type.IsEnum)
            {
                 isEmptyDefFormat = @"
            if ({0} != 0)
                return false;
            "; 
            }
            else if(prop.Type.Name == "string")
            {
                isEmptyDefFormat = @"
            if (!string.IsNullOrEmpty({0}))
                return false; 
            "; 
            } 
            else if(prop.Type.IsNullable)
            {
                 isEmptyDefFormat = @"
            if ({0}.HasValue)
                return false;
            "; 
            }
            else if(prop.Type.IsEnumerable || prop.Type.Name.Contains("List"))
            {
                isEmptyDefFormat = @"
            if ({0} != null && {0}.Count > 0)
                return false; 
            "; 
            }
            else if(prop.Type.IsPrimitive)
            {
                 isEmptyDefFormat = @"
            if ({0} != {1})
                return false;
            "; 
            }
            else if(prop.Type.IsDate || prop.Type.IsGuid)
            {
               isEmptyDefFormat = @"
            if ({0} == null)
                return false; 
            "; 
            } 
            else if(prop.Type.Namespace.Contains("EPZEU.CR.Domain.Fields"))
            {
                isEmptyDefFormat = @"
            if ({0} != null && !{0}.IsEmpty())
                return false; 
            "; 
            }
            else
            {
                isEmptyDefFormat = @"
            if ({0} != null)
                return false; 
            "; 
            }

            isEmptyDef += string.Format(isEmptyDefFormat, prop.Name, prop.Type.Default());
        }

        isEmptyDef += @"
            return true; ";

        return isEmptyDef;
    }       
}
// Auto Generated Object
using EPZEU.CR.Domain.Fields.Common;

namespace EPZEU.CR.Domain.Fields
{
$Classes(c=>c.Namespace == "EPZEU.CR.Domain.Fields")[
$WriteClass]
}
