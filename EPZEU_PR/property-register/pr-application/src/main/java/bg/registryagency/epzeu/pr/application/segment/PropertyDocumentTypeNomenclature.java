//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.03.20 at 02:18:31 PM EET 
//


package bg.registryagency.epzeu.pr.application.segment;

import bg.registryagency.epzeu.pr.integration.pr.enums.PersonTypeNomenclature;
import lombok.Getter;
import lombok.NoArgsConstructor;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PropertyDocumentTypeNomenclature.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PropertyDocumentTypeNomenclature"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="ACT_OF_OWNERSHIP"/&gt;
 *     &lt;enumeration value="CERTIFICATE_FOR_INHERITANCE"/&gt;
 *     &lt;enumeration value="OTHER"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "PropertyDocumentTypeNomenclature")
@Getter
@XmlEnum
public enum PropertyDocumentTypeNomenclature {
    @XmlEnumValue("ACT_OF_OWNERSHIP")
    ACT_OF_OWNERSHIP(1),
    @XmlEnumValue("CERTIFICATE_FOR_INHERITANCE")
    CERTIFICATE_FOR_INHERITANCE(2),
    @XmlEnumValue("OTHER")
    OTHER(3);

    private final int key;

    PropertyDocumentTypeNomenclature(int key) {
        this.key = key;
    }

    public static PropertyDocumentTypeNomenclature fromInteger(int intValue) {
        PropertyDocumentTypeNomenclature type;
        switch (intValue) {
            case 1:
                type = ACT_OF_OWNERSHIP;
                break;
            case 2:
                type = CERTIFICATE_FOR_INHERITANCE;
                break;
            case 3:
                type = OTHER;
                break;
            default:
                throw new EnumConstantNotPresentException(PersonTypeNomenclature.class, Integer.toString(intValue));
        }
        return type;
    }
}
