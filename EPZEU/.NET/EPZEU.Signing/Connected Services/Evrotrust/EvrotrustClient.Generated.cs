//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace EPZEU.Signing.Evrotrust
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IEvrotrustClient
    {
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>User found</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckUserVendorAsync(string authorization, DataCheckUserInfo data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>User found</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckUserVendorAsync(string authorization, DataCheckUserInfo data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificates list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultUserExtendedCheck> CheckUserExtendedVendorAsync(string authorization, DataCheckExtendedUserInfo data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificates list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultUserExtendedCheck> CheckUserExtendedVendorAsync(string authorization, DataCheckExtendedUserInfo data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get latest certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGetUserCertificate> UserVendorCertificateAsync(string authorization, DataUserCertificate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get latest certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGetUserCertificate> UserVendorCertificateAsync(string authorization, DataUserCertificate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check user certificate status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultCheckCertificate> CheckUserVendorCertificateAsync(string authorization, DataUserCheckCertificate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check user certificate status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultCheckCertificate> CheckUserVendorCertificateAsync(string authorization, DataUserCheckCertificate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send hash of file to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> AddDocumentHashAsync(string authorization, DataDocument data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send hash of file to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> AddDocumentHashAsync(string authorization, DataDocument data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send group of hashes to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Group info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGroupHash> AddDocumentGroupHashAsync(string authorization, DataHashGroupOnline data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of hashes to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Group info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGroupHash> AddDocumentGroupHashAsync(string authorization, DataHashGroupOnline data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send file to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0,&lt;br/&gt; "coverage": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentTransaction> AddDocumentDocAsync(string authorization, FileParameter document, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0,&lt;br/&gt; "coverage": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentTransaction> AddDocumentDocAsync(string authorization, FileParameter document, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send file for delivery to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0, &lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt;  "user": {"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"} ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDeliveryTransaction> AddDeliveryDocAsync(string authorization, FileParameter document, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file for delivery to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0, &lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt;  "user": {"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"} ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDeliveryTransaction> AddDeliveryDocAsync(string authorization, FileParameter document, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Download receipts</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ReceiptDownloadAsync(string authorization, DataDeliveryDownload data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download receipts</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ReceiptDownloadAsync(string authorization, DataDeliveryDownload data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send group of files to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">{&lt;br/&gt;"documents": [{&lt;br/&gt;"description": "string",&lt;br/&gt; "optional": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;"algorithm": "string"&lt;br/&gt;},&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  , &lt;br/&gt;  "dateExpire": 0, &lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] , &lt;br/&gt;  "publicKey": "string"  &lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentTransactionGroup> AddDocumentGroupDocAsync(string authorization, FileParameter documents, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of files to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">{&lt;br/&gt;"documents": [{&lt;br/&gt;"description": "string",&lt;br/&gt; "optional": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;"algorithm": "string"&lt;br/&gt;},&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  , &lt;br/&gt;  "dateExpire": 0, &lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] , &lt;br/&gt;  "publicKey": "string"  &lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentTransactionGroup> AddDocumentGroupDocAsync(string authorization, FileParameter documents, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send request for authentication to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> AddDocumentAuthAsync(string authorization, DataDocumentAuth data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request for authentication to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> AddDocumentAuthAsync(string authorization, DataDocumentAuth data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Agent info</param>
        /// <returns>Agents added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultAgentsAdded> AgentAddAsync(string authorization, Agents data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Agent info</param>
        /// <returns>Agents added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultAgentsAdded> AgentAddAsync(string authorization, Agents data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Delete agent</param>
        /// <returns>Agents deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultAgentsDeleted> RemoveAgentAsync(string authorization, DataDeleteAgents data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Delete agent</param>
        /// <returns>Agents deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultAgentsDeleted> RemoveAgentAsync(string authorization, DataDeleteAgents data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentAsync(string authorization, FileParameter document, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentAsync(string authorization, FileParameter document, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentFileAsync(string authorization, FileParameter document, FileParameter signedfile, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentFileAsync(string authorization, FileParameter document, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Activate one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneActivateAsync(string authorization, DocumentActivate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneActivateAsync(string authorization, DocumentActivate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneResendAsync(string authorization, DocumentActivateResend data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneResendAsync(string authorization, DocumentActivateResend data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupAsync(string authorization, FileParameter documents, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupAsync(string authorization, FileParameter documents, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupFileAsync(string authorization, FileParameter documents, FileParameter signedfile, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupFileAsync(string authorization, FileParameter documents, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Activate group of files to user one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneTimeGroupActivateAsync(string authorization, OneTimeDocumentGroupActivate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate group of files to user one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneTimeGroupActivateAsync(string authorization, OneTimeDocumentGroupActivate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resend an SMS for activation group of files to user of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneTimeGroupResendAsync(string authorization, OneTimeDocumentGroupActivateResend data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation group of files to user of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocOneTimeGroupResendAsync(string authorization, OneTimeDocumentGroupActivateResend data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> SignDocCertAttributeAsync(string authorization, DataAttrCertDocument data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> SignDocCertAttributeAsync(string authorization, DataAttrCertDocument data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineAsync(string authorization, DataAttrCertDocumentOffline data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineAsync(string authorization, DataAttrCertDocumentOffline data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;"includes": { &lt;br/&gt;    "names": "boolean", &lt;br/&gt;"latinNames": "boolean", &lt;br/&gt;"address": "boolean", &lt;br/&gt;    "documentType": "boolean", &lt;br/&gt;    "documentNumber": "boolean", &lt;br/&gt;    "documentIssuerName": "boolean", &lt;br/&gt;    "documentValidDate": "boolean", &lt;br/&gt;    "documentIssueDate": "boolean", &lt;br/&gt;    "identificationNumber": "boolean", &lt;br/&gt;    "gender": "boolean", &lt;br/&gt;    "nationality": "boolean", &lt;br/&gt;    "documentPicture": "boolean", &lt;br/&gt;    "documentSignature": "boolean", &lt;br/&gt;    "dateOfBirth": "boolean",  &lt;br/&gt;   "placeOfBirth": "boolean" &lt;br/&gt;  }, &lt;br/&gt;  "identificationReason": "string", &lt;br/&gt; "signInfo": { &lt;br/&gt;    "algorithm": "string" &lt;br/&gt;  },  &lt;br/&gt; "user": {  &lt;br/&gt;   "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",  &lt;br/&gt;   "email": "string",&lt;br/&gt;   "phone": "string" &lt;br/&gt;  }, &lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt; "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineFileAsync(string authorization, FileParameter signedfile, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;"includes": { &lt;br/&gt;    "names": "boolean", &lt;br/&gt;"latinNames": "boolean", &lt;br/&gt;"address": "boolean", &lt;br/&gt;    "documentType": "boolean", &lt;br/&gt;    "documentNumber": "boolean", &lt;br/&gt;    "documentIssuerName": "boolean", &lt;br/&gt;    "documentValidDate": "boolean", &lt;br/&gt;    "documentIssueDate": "boolean", &lt;br/&gt;    "identificationNumber": "boolean", &lt;br/&gt;    "gender": "boolean", &lt;br/&gt;    "nationality": "boolean", &lt;br/&gt;    "documentPicture": "boolean", &lt;br/&gt;    "documentSignature": "boolean", &lt;br/&gt;    "dateOfBirth": "boolean",  &lt;br/&gt;   "placeOfBirth": "boolean" &lt;br/&gt;  }, &lt;br/&gt;  "identificationReason": "string", &lt;br/&gt; "signInfo": { &lt;br/&gt;    "algorithm": "string" &lt;br/&gt;  },  &lt;br/&gt; "user": {  &lt;br/&gt;   "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",  &lt;br/&gt;   "email": "string",&lt;br/&gt;   "phone": "string" &lt;br/&gt;  }, &lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt; "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineFileAsync(string authorization, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add DOPK document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Add DOPK document</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> AddMobileDocumentDOPKAsync(string authorization, DataAddDOPKDocument data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add DOPK document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Add DOPK document</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocument> AddMobileDocumentDOPKAsync(string authorization, DataAddDOPKDocument data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check for file/hash signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentStatus> StatusDocumentAsync(string authorization, DataDocumentStatus data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check for file/hash signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentStatus> StatusDocumentAsync(string authorization, DataDocumentStatus data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check for group signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document group status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentGroupStatus> StatusDocumentGroupAsync(string authorization, DataDocumentGroupStatus data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check for group signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document group status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentGroupStatus> StatusDocumentGroupAsync(string authorization, DataDocumentGroupStatus data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentThreadStatus> StatusDocumentThreadAsync(string authorization, DataDocumentThreadStatus data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentThreadStatus> StatusDocumentThreadAsync(string authorization, DataDocumentThreadStatus data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Download signed file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DocumentDownloadAsync(string authorization, DataDocumentDownload data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download signed file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DocumentDownloadAsync(string authorization, DataDocumentDownload data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Download signed group with file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document group downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DocumentGroupDownloadAsync(string authorization, DataDocumentGroupDownload data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download signed group with file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document group downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DocumentGroupDownloadAsync(string authorization, DataDocumentGroupDownload data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Withdraw a document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document withdraw status.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentWithdraw> DocumentWithdrawAsync(string authorization, DataDocumentWithdraw data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Withdraw a document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document withdraw status.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDocumentWithdraw> DocumentWithdrawAsync(string authorization, DataDocumentWithdraw data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Sending initial information for offline hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitHash> InitOfflineHashAsync(string authorization, DataOfflineInitHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitHash> InitOfflineHashAsync(string authorization, DataOfflineInitHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Sending initial information for offline hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt; "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileHashAsync(string authorization, FileParameter signedfile, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt; "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileHashAsync(string authorization, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Sending initial information for offline group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Documents info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitHash> InitOfflineGroupHashAsync(string authorization, DataOfflineGroupInitHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Documents info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitHash> InitOfflineGroupHashAsync(string authorization, DataOfflineGroupInitHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Sending initial information for offline group hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string"}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "coverage": 0,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "groupDescription": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileGroupHashAsync(string authorization, FileParameter signedfile, string data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline group hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string"}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "coverage": 0,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "groupDescription": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileGroupHashAsync(string authorization, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Activate one-time hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HashOneActivateAsync(string authorization, HashActivate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate one-time hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HashOneActivateAsync(string authorization, HashActivate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Activate one-time group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GrouOneActivateAsync(string authorization, HashActivate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate one-time group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GrouOneActivateAsync(string authorization, HashActivate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HashOneResendAsync(string authorization, HashActivateResend data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HashOneResendAsync(string authorization, HashActivateResend data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resend an SMS for activation of group one-time hash signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HashGroupResendAsync(string authorization, HashActivateResend data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation of group one-time hash signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HashGroupResendAsync(string authorization, HashActivateResend data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check certificate status for hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashCertificateAsync(string authorization, DataHashCheckCertificate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check certificate status for hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashCertificateAsync(string authorization, DataHashCheckCertificate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashCertificateAsync(string authorization, DataHashGetCertificate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashCertificateAsync(string authorization, DataHashGetCertificate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check certificate status for group of hashes</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashGroupCertificateAsync(string authorization, DataHashCheckCertificate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check certificate status for group of hashes</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashGroupCertificateAsync(string authorization, DataHashCheckCertificate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashGroupCertificateAsync(string authorization, DataHashGetCertificate data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashGroupCertificateAsync(string authorization, DataHashGetCertificate data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SendOfflineHashAsync(string authorization, DataOfflineSendHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SendOfflineHashAsync(string authorization, DataOfflineSendHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckOfflineHashAsync(string authorization, DataOfflineCheckHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckOfflineHashAsync(string authorization, DataOfflineCheckHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetOfflineHashAsync(string authorization, DataOfflineGetHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetOfflineHashAsync(string authorization, DataOfflineGetHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SendGroupOfflineHashAsync(string authorization, DataOfflineGroupSendHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SendGroupOfflineHashAsync(string authorization, DataOfflineGroupSendHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckGroupOfflineHashAsync(string authorization, DataOfflineGroupCheckHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckGroupOfflineHashAsync(string authorization, DataOfflineGroupCheckHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Files downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetGroupOfflineHashAsync(string authorization, DataOfflineGroupGetHash data);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Files downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetGroupOfflineHashAsync(string authorization, DataOfflineGroupGetHash data, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get API version</summary>
        /// <returns>Supported versions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultVersionGet> VersionCheckAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get API version</summary>
        /// <returns>Supported versions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResultVersionGet> VersionCheckAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0))")]
    internal partial class EvrotrustClient : IEvrotrustClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public EvrotrustClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>User found</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CheckUserVendorAsync(string authorization, DataCheckUserInfo data)
        {
            return CheckUserVendorAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>User found</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CheckUserVendorAsync(string authorization, DataCheckUserInfo data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user/check");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificates list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultUserExtendedCheck> CheckUserExtendedVendorAsync(string authorization, DataCheckExtendedUserInfo data)
        {
            return CheckUserExtendedVendorAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>User check</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificates list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultUserExtendedCheck> CheckUserExtendedVendorAsync(string authorization, DataCheckExtendedUserInfo data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user/check/extended");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultUserExtendedCheck>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultUserExtendedCheck);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get latest certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultGetUserCertificate> UserVendorCertificateAsync(string authorization, DataUserCertificate data)
        {
            return UserVendorCertificateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get latest certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultGetUserCertificate> UserVendorCertificateAsync(string authorization, DataUserCertificate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user/certificate/get");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultGetUserCertificate>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "442") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultGetUserCertificate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check user certificate status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultCheckCertificate> CheckUserVendorCertificateAsync(string authorization, DataUserCheckCertificate data)
        {
            return CheckUserVendorCertificateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check user certificate status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">User info</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultCheckCertificate> CheckUserVendorCertificateAsync(string authorization, DataUserCheckCertificate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("user/certificate/check");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultCheckCertificate>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultCheckCertificate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send hash of file to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocument> AddDocumentHashAsync(string authorization, DataDocument data)
        {
            return AddDocumentHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send hash of file to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocument> AddDocumentHashAsync(string authorization, DataDocument data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/hash/online");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocument>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "442") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send group of hashes to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Group info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultGroupHash> AddDocumentGroupHashAsync(string authorization, DataHashGroupOnline data)
        {
            return AddDocumentGroupHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of hashes to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Group info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultGroupHash> AddDocumentGroupHashAsync(string authorization, DataHashGroupOnline data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/hash/online");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultGroupHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "442") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultGroupHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send file to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0,&lt;br/&gt; "coverage": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentTransaction> AddDocumentDocAsync(string authorization, FileParameter document, string data)
        {
            return AddDocumentDocAsync(authorization, document, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0,&lt;br/&gt; "coverage": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentTransaction> AddDocumentDocAsync(string authorization, FileParameter document, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/online");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (document == null)
                        throw new System.ArgumentNullException("document");
                    else
                    {
                        var content_document_ = new System.Net.Http.StreamContent(document.Data);
                        if (!string.IsNullOrEmpty(document.ContentType))
                            content_document_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(document.ContentType);
                        content_.Add(content_document_, "document", document.FileName ?? "document");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentTransaction>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentTransaction);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send file for delivery to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0, &lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt;  "user": {"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"} ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDeliveryTransaction> AddDeliveryDocAsync(string authorization, FileParameter document, string data)
        {
            return AddDeliveryDocAsync(authorization, document, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file for delivery to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt;    "dateExpire": 0, &lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;},&lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt;  "user": {"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"} ,&lt;br/&gt;"publicKey": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDeliveryTransaction> AddDeliveryDocAsync(string authorization, FileParameter document, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("delivery/online");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (document == null)
                        throw new System.ArgumentNullException("document");
                    else
                    {
                        var content_document_ = new System.Net.Http.StreamContent(document.Data);
                        if (!string.IsNullOrEmpty(document.ContentType))
                            content_document_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(document.ContentType);
                        content_.Add(content_document_, "document", document.FileName ?? "document");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDeliveryTransaction>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDeliveryTransaction);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download receipts</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> ReceiptDownloadAsync(string authorization, DataDeliveryDownload data)
        {
            return ReceiptDownloadAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download receipts</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> ReceiptDownloadAsync(string authorization, DataDeliveryDownload data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("delivery/receipts/download");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send group of files to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">{&lt;br/&gt;"documents": [{&lt;br/&gt;"description": "string",&lt;br/&gt; "optional": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;"algorithm": "string"&lt;br/&gt;},&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  , &lt;br/&gt;  "dateExpire": 0, &lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] , &lt;br/&gt;  "publicKey": "string"  &lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentTransactionGroup> AddDocumentGroupDocAsync(string authorization, FileParameter documents, string data)
        {
            return AddDocumentGroupDocAsync(authorization, documents, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of files to Evrotrust users</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">{&lt;br/&gt;"documents": [{&lt;br/&gt;"description": "string",&lt;br/&gt; "optional": 0,&lt;br/&gt; "preview": 0,&lt;br/&gt; "checksumDocument": "string"&lt;br/&gt;}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;"algorithm": "string"&lt;br/&gt;},&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  , &lt;br/&gt;  "dateExpire": 0, &lt;br/&gt;  "urlCallback": "string",&lt;br/&gt;  "vendorNumber": "string", &lt;br/&gt;  "users": [{"identificationNumber": "string", "country": "string", "email": "string", "phone": "string"}] , &lt;br/&gt;  "publicKey": "string"  &lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentTransactionGroup> AddDocumentGroupDocAsync(string authorization, FileParameter documents, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/online");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (documents == null)
                        throw new System.ArgumentNullException("documents");
                    else
                    {
                        var content_documents_ = new System.Net.Http.StreamContent(documents.Data);
                        if (!string.IsNullOrEmpty(documents.ContentType))
                            content_documents_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(documents.ContentType);
                        content_.Add(content_documents_, "documents", documents.FileName ?? "documents");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentTransactionGroup>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentTransactionGroup);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send request for authentication to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocument> AddDocumentAuthAsync(string authorization, DataDocumentAuth data)
        {
            return AddDocumentAuthAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request for authentication to Evrotrust user</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocument> AddDocumentAuthAsync(string authorization, DataDocumentAuth data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/auth/online");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocument>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Add an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Agent info</param>
        /// <returns>Agents added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultAgentsAdded> AgentAddAsync(string authorization, Agents data)
        {
            return AgentAddAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Agent info</param>
        /// <returns>Agents added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultAgentsAdded> AgentAddAsync(string authorization, Agents data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("agents");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultAgentsAdded>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User for master agent not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultAgentsAdded);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Delete an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Delete agent</param>
        /// <returns>Agents deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultAgentsDeleted> RemoveAgentAsync(string authorization, DataDeleteAgents data)
        {
            return RemoveAgentAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an agent</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Delete agent</param>
        /// <returns>Agents deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultAgentsDeleted> RemoveAgentAsync(string authorization, DataDeleteAgents data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("agents");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultAgentsDeleted>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultAgentsDeleted);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentAsync(string authorization, FileParameter document, string data)
        {
            return DocOneTimeDocumentAsync(authorization, document, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentAsync(string authorization, FileParameter document, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/offline");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (document == null)
                        throw new System.ArgumentNullException("document");
                    else
                    {
                        var content_document_ = new System.Net.Http.StreamContent(document.Data);
                        if (!string.IsNullOrEmpty(document.ContentType))
                            content_document_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(document.ContentType);
                        content_.Add(content_document_, "document", document.FileName ?? "document");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultOneTimeDocument>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultOneTimeDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentFileAsync(string authorization, FileParameter document, FileParameter signedfile, string data)
        {
            return DocOneTimeDocumentFileAsync(authorization, document, signedfile, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send file to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="document">File bytes</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;  "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0,&lt;br/&gt;    "checksumDocument": "string"&lt;br/&gt;  },&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultOneTimeDocument> DocOneTimeDocumentFileAsync(string authorization, FileParameter document, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/offline/file");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (document == null)
                        throw new System.ArgumentNullException("document");
                    else
                    {
                        var content_document_ = new System.Net.Http.StreamContent(document.Data);
                        if (!string.IsNullOrEmpty(document.ContentType))
                            content_document_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(document.ContentType);
                        content_.Add(content_document_, "document", document.FileName ?? "document");
                    }
                    if (signedfile == null)
                        throw new System.ArgumentNullException("signedfile");
                    else
                    {
                        var content_signedfile_ = new System.Net.Http.StreamContent(signedfile.Data);
                        if (!string.IsNullOrEmpty(signedfile.ContentType))
                            content_signedfile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(signedfile.ContentType);
                        content_.Add(content_signedfile_, "signedfile", signedfile.FileName ?? "signedfile");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultOneTimeDocument>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultOneTimeDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Activate one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DocOneActivateAsync(string authorization, DocumentActivate data)
        {
            return DocOneActivateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DocOneActivateAsync(string authorization, DocumentActivate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/offline/activate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "432") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Wrong activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "448") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Expired activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DocOneResendAsync(string authorization, DocumentActivateResend data)
        {
            return DocOneResendAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DocOneResendAsync(string authorization, DocumentActivateResend data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/offline/activate/resend");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupAsync(string authorization, FileParameter documents, string data)
        {
            return DocOneTimeDocumentGroupAsync(authorization, documents, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt; "agentIdentificationNumber": "string",&lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupAsync(string authorization, FileParameter documents, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/offline");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (documents == null)
                        throw new System.ArgumentNullException("documents");
                    else
                    {
                        var content_documents_ = new System.Net.Http.StreamContent(documents.Data);
                        if (!string.IsNullOrEmpty(documents.ContentType))
                            content_documents_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(documents.ContentType);
                        content_.Add(content_documents_, "documents", documents.FileName ?? "documents");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultOneTimeDocumentGroup>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultOneTimeDocumentGroup);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupFileAsync(string authorization, FileParameter documents, FileParameter signedfile, string data)
        {
            return DocOneTimeDocumentGroupFileAsync(authorization, documents, signedfile, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send group of files to user for one-time signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="documents">Array of files</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string",&lt;br/&gt;  "checksumDocument": "string"&lt;br/&gt;  }],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "type": "string",&lt;br/&gt;  "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "groupDescription": "string", &lt;br/&gt;  "coverage": 0  ,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultOneTimeDocumentGroup> DocOneTimeDocumentGroupFileAsync(string authorization, FileParameter documents, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/offline/file");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (documents == null)
                        throw new System.ArgumentNullException("documents");
                    else
                    {
                        var content_documents_ = new System.Net.Http.StreamContent(documents.Data);
                        if (!string.IsNullOrEmpty(documents.ContentType))
                            content_documents_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(documents.ContentType);
                        content_.Add(content_documents_, "documents", documents.FileName ?? "documents");
                    }
                    if (signedfile == null)
                        throw new System.ArgumentNullException("signedfile");
                    else
                    {
                        var content_signedfile_ = new System.Net.Http.StreamContent(signedfile.Data);
                        if (!string.IsNullOrEmpty(signedfile.ContentType))
                            content_signedfile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(signedfile.ContentType);
                        content_.Add(content_signedfile_, "signedfile", signedfile.FileName ?? "signedfile");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultOneTimeDocumentGroup>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultOneTimeDocumentGroup);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Activate group of files to user one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DocOneTimeGroupActivateAsync(string authorization, OneTimeDocumentGroupActivate data)
        {
            return DocOneTimeGroupActivateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate group of files to user one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DocOneTimeGroupActivateAsync(string authorization, OneTimeDocumentGroupActivate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/offline/activate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "432") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Wrong activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "448") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Expired activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resend an SMS for activation group of files to user of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DocOneTimeGroupResendAsync(string authorization, OneTimeDocumentGroupActivateResend data)
        {
            return DocOneTimeGroupResendAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation group of files to user of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DocOneTimeGroupResendAsync(string authorization, OneTimeDocumentGroupActivateResend data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/offline/activate/resend");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocument> SignDocCertAttributeAsync(string authorization, DataAttrCertDocument data)
        {
            return SignDocCertAttributeAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocument> SignDocCertAttributeAsync(string authorization, DataAttrCertDocument data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/identification");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocument>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineAsync(string authorization, DataAttrCertDocumentOffline data)
        {
            return SignDocCertAttributeOfflineAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineAsync(string authorization, DataAttrCertDocumentOffline data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/identification/offline");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentOffline>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentOffline);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;"includes": { &lt;br/&gt;    "names": "boolean", &lt;br/&gt;"latinNames": "boolean", &lt;br/&gt;"address": "boolean", &lt;br/&gt;    "documentType": "boolean", &lt;br/&gt;    "documentNumber": "boolean", &lt;br/&gt;    "documentIssuerName": "boolean", &lt;br/&gt;    "documentValidDate": "boolean", &lt;br/&gt;    "documentIssueDate": "boolean", &lt;br/&gt;    "identificationNumber": "boolean", &lt;br/&gt;    "gender": "boolean", &lt;br/&gt;    "nationality": "boolean", &lt;br/&gt;    "documentPicture": "boolean", &lt;br/&gt;    "documentSignature": "boolean", &lt;br/&gt;    "dateOfBirth": "boolean",  &lt;br/&gt;   "placeOfBirth": "boolean" &lt;br/&gt;  }, &lt;br/&gt;  "identificationReason": "string", &lt;br/&gt; "signInfo": { &lt;br/&gt;    "algorithm": "string" &lt;br/&gt;  },  &lt;br/&gt; "user": {  &lt;br/&gt;   "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",  &lt;br/&gt;   "email": "string",&lt;br/&gt;   "phone": "string" &lt;br/&gt;  }, &lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt; "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineFileAsync(string authorization, FileParameter signedfile, string data)
        {
            return SignDocCertAttributeOfflineFileAsync(authorization, signedfile, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send request to Evrotrust user to confirm their personal data</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;"includes": { &lt;br/&gt;    "names": "boolean", &lt;br/&gt;"latinNames": "boolean", &lt;br/&gt;"address": "boolean", &lt;br/&gt;    "documentType": "boolean", &lt;br/&gt;    "documentNumber": "boolean", &lt;br/&gt;    "documentIssuerName": "boolean", &lt;br/&gt;    "documentValidDate": "boolean", &lt;br/&gt;    "documentIssueDate": "boolean", &lt;br/&gt;    "identificationNumber": "boolean", &lt;br/&gt;    "gender": "boolean", &lt;br/&gt;    "nationality": "boolean", &lt;br/&gt;    "documentPicture": "boolean", &lt;br/&gt;    "documentSignature": "boolean", &lt;br/&gt;    "dateOfBirth": "boolean",  &lt;br/&gt;   "placeOfBirth": "boolean" &lt;br/&gt;  }, &lt;br/&gt;  "identificationReason": "string", &lt;br/&gt; "signInfo": { &lt;br/&gt;    "algorithm": "string" &lt;br/&gt;  },  &lt;br/&gt; "user": {  &lt;br/&gt;   "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",  &lt;br/&gt;   "email": "string",&lt;br/&gt;   "phone": "string" &lt;br/&gt;  }, &lt;br/&gt;  "vendorNumber": "string",  &lt;br/&gt; "publicKey": "string",&lt;br/&gt;"urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentOffline> SignDocCertAttributeOfflineFileAsync(string authorization, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/identification/offline/file");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (signedfile == null)
                        throw new System.ArgumentNullException("signedfile");
                    else
                    {
                        var content_signedfile_ = new System.Net.Http.StreamContent(signedfile.Data);
                        if (!string.IsNullOrEmpty(signedfile.ContentType))
                            content_signedfile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(signedfile.ContentType);
                        content_.Add(content_signedfile_, "signedfile", signedfile.FileName ?? "signedfile");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentOffline>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentOffline);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Add DOPK document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Add DOPK document</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocument> AddMobileDocumentDOPKAsync(string authorization, DataAddDOPKDocument data)
        {
            return AddMobileDocumentDOPKAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add DOPK document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Add DOPK document</param>
        /// <returns>Document added success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocument> AddMobileDocumentDOPKAsync(string authorization, DataAddDOPKDocument data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/doc/dopk");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocument>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check for file/hash signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentStatus> StatusDocumentAsync(string authorization, DataDocumentStatus data)
        {
            return StatusDocumentAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check for file/hash signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentStatus> StatusDocumentAsync(string authorization, DataDocumentStatus data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/status");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentStatus>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentStatus);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check for group signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document group status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentGroupStatus> StatusDocumentGroupAsync(string authorization, DataDocumentGroupStatus data)
        {
            return StatusDocumentGroupAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check for group signing status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document group status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentGroupStatus> StatusDocumentGroupAsync(string authorization, DataDocumentGroupStatus data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/status");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentGroupStatus>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentGroupStatus);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentThreadStatus> StatusDocumentThreadAsync(string authorization, DataDocumentThreadStatus data)
        {
            return StatusDocumentThreadAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check status</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentThreadStatus> StatusDocumentThreadAsync(string authorization, DataDocumentThreadStatus data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/thread/status");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentThreadStatus>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentThreadStatus);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download signed file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> DocumentDownloadAsync(string authorization, DataDocumentDownload data)
        {
            return DocumentDownloadAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download signed file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> DocumentDownloadAsync(string authorization, DataDocumentDownload data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/download");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download signed group with file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document group downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> DocumentGroupDownloadAsync(string authorization, DataDocumentGroupDownload data)
        {
            return DocumentGroupDownloadAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download signed group with file</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document group downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> DocumentGroupDownloadAsync(string authorization, DataDocumentGroupDownload data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/group/download");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Withdraw a document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document withdraw status.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDocumentWithdraw> DocumentWithdrawAsync(string authorization, DataDocumentWithdraw data)
        {
            return DocumentWithdrawAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Withdraw a document</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">File data</param>
        /// <returns>Document withdraw status.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDocumentWithdraw> DocumentWithdrawAsync(string authorization, DataDocumentWithdraw data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("document/withdraw");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDocumentWithdraw>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDocumentWithdraw);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Sending initial information for offline hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultInitHash> InitOfflineHashAsync(string authorization, DataOfflineInitHash data)
        {
            return InitOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultInitHash> InitOfflineHashAsync(string authorization, DataOfflineInitHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/init");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultInitHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultInitHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Sending initial information for offline hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt; "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileHashAsync(string authorization, FileParameter signedfile, string data)
        {
            return InitOfflineFileHashAsync(authorization, signedfile, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt; "document": {&lt;br/&gt;    "description": "string",&lt;br/&gt; "coverage": 0},&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileHashAsync(string authorization, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/file/init");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (signedfile == null)
                        throw new System.ArgumentNullException("signedfile");
                    else
                    {
                        var content_signedfile_ = new System.Net.Http.StreamContent(signedfile.Data);
                        if (!string.IsNullOrEmpty(signedfile.ContentType))
                            content_signedfile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(signedfile.ContentType);
                        content_.Add(content_signedfile_, "signedfile", signedfile.FileName ?? "signedfile");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultInitFileHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Agent not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultInitFileHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Sending initial information for offline group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Documents info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultInitHash> InitOfflineGroupHashAsync(string authorization, DataOfflineGroupInitHash data)
        {
            return InitOfflineGroupHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Documents info</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultInitHash> InitOfflineGroupHashAsync(string authorization, DataOfflineGroupInitHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/init");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultInitHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultInitHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Sending initial information for offline group hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string"}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "coverage": 0,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "groupDescription": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileGroupHashAsync(string authorization, FileParameter signedfile, string data)
        {
            return InitOfflineFileGroupHashAsync(authorization, signedfile, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sending initial information for offline group hash using file identification</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="signedfile">File bytes</param>
        /// <param name="data">JSON string with structure&lt;br/&gt;{&lt;br/&gt;  "user": {&lt;br/&gt;    "identificationNumber": "string", &lt;br/&gt;    "documentNumber": "string",&lt;br/&gt;    "phone": "string", &lt;br/&gt;    "email": "string"&lt;br/&gt;  }, &lt;br/&gt;&lt;br/&gt;  "documents": [{&lt;br/&gt;    "description": "string"}],&lt;br/&gt;  "signInfo": {&lt;br/&gt;    "algorithm": "string"&lt;br/&gt;  },&lt;br/&gt;  "coverage": 0,&lt;br/&gt;  "vendorNumber": "string",&lt;br/&gt;  "groupDescription": "string",&lt;br/&gt;  "publicKey": "string", &lt;br/&gt; "urlCallback": "string"&lt;br/&gt;}</param>
        /// <returns>Document created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultInitFileHash> InitOfflineFileGroupHashAsync(string authorization, FileParameter signedfile, string data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/file/init");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (signedfile == null)
                        throw new System.ArgumentNullException("signedfile");
                    else
                    {
                        var content_signedfile_ = new System.Net.Http.StreamContent(signedfile.Data);
                        if (!string.IsNullOrEmpty(signedfile.ContentType))
                            content_signedfile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(signedfile.ContentType);
                        content_.Add(content_signedfile_, "signedfile", signedfile.FileName ?? "signedfile");
                    }
                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture)), "data");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultInitFileHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "438") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Agent not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "450") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("File exceeds max allowed file size", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "454") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Incorrect coverage", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "457") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Not supported file types", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultInitFileHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Activate one-time hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task HashOneActivateAsync(string authorization, HashActivate data)
        {
            return HashOneActivateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate one-time hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task HashOneActivateAsync(string authorization, HashActivate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/activate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "432") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Wrong activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "448") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Expired activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Activate one-time group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GrouOneActivateAsync(string authorization, HashActivate data)
        {
            return GrouOneActivateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activate one-time group hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GrouOneActivateAsync(string authorization, HashActivate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/activate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "432") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Wrong activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "448") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Expired activation code", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "449") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User data is not valid", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "469") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The request can not be processed. Try again in 60 seconds.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task HashOneResendAsync(string authorization, HashActivateResend data)
        {
            return HashOneResendAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation of one-time signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task HashOneResendAsync(string authorization, HashActivateResend data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/activate/resend");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resend an SMS for activation of group one-time hash signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task HashGroupResendAsync(string authorization, HashActivateResend data)
        {
            return HashGroupResendAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resend an SMS for activation of group one-time hash signing process</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Document</param>
        /// <returns>Activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task HashGroupResendAsync(string authorization, HashActivateResend data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/activate/resend");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check certificate status for hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashCertificateAsync(string authorization, DataHashCheckCertificate data)
        {
            return CheckHashCertificateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check certificate status for hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashCertificateAsync(string authorization, DataHashCheckCertificate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/certificate/check");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultCheckHashCertificate>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultCheckHashCertificate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashCertificateAsync(string authorization, DataHashGetCertificate data)
        {
            return GetHashCertificateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashCertificateAsync(string authorization, DataHashGetCertificate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/certificate/get");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultGetHashCertificate>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "442") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultGetHashCertificate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check certificate status for group of hashes</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashGroupCertificateAsync(string authorization, DataHashCheckCertificate data)
        {
            return CheckHashGroupCertificateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check certificate status for group of hashes</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultCheckHashCertificate> CheckHashGroupCertificateAsync(string authorization, DataHashCheckCertificate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/certificate/check");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultCheckHashCertificate>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultCheckHashCertificate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashGroupCertificateAsync(string authorization, DataHashGetCertificate data)
        {
            return GetHashGroupCertificateAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get certificate</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Transaction ID</param>
        /// <returns>Certificate</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultGetHashCertificate> GetHashGroupCertificateAsync(string authorization, DataHashGetCertificate data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/certificate/get");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultGetHashCertificate>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "442") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultGetHashCertificate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SendOfflineHashAsync(string authorization, DataOfflineSendHash data)
        {
            return SendOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SendOfflineHashAsync(string authorization, DataOfflineSendHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/send");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckOfflineHashAsync(string authorization, DataOfflineCheckHash data)
        {
            return CheckOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckOfflineHashAsync(string authorization, DataOfflineCheckHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/check");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDataOfflineCheckHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDataOfflineCheckHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> GetOfflineHashAsync(string authorization, DataOfflineGetHash data)
        {
            return GetOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>File downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> GetOfflineHashAsync(string authorization, DataOfflineGetHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/offline/download");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SendGroupOfflineHashAsync(string authorization, DataOfflineGroupSendHash data)
        {
            return SendGroupOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send hash of files to Evrotrust for signing</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">Hash and transaction ID</param>
        /// <returns>Hash send for sigining</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SendGroupOfflineHashAsync(string authorization, DataOfflineGroupSendHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/send");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "468") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Certificate expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckGroupOfflineHashAsync(string authorization, DataOfflineGroupCheckHash data)
        {
            return CheckGroupOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check the sigining status of hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Status of the hash</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultDataOfflineCheckHash> CheckGroupOfflineHashAsync(string authorization, DataOfflineGroupCheckHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/check");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultDataOfflineCheckHash>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Group not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultDataOfflineCheckHash);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Files downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> GetGroupOfflineHashAsync(string authorization, DataOfflineGroupGetHash data)
        {
            return GetGroupOfflineHashAsync(authorization, data, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get signed hash</summary>
        /// <param name="authorization">auth value</param>
        /// <param name="data">transaction ID</param>
        /// <returns>Files downloaded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> GetGroupOfflineHashAsync(string authorization, DataOfflineGroupGetHash data, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("hash/group/offline/download");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "443") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Document not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get API version</summary>
        /// <returns>Supported versions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResultVersionGet> VersionCheckAsync()
        {
            return VersionCheckAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get API version</summary>
        /// <returns>Supported versions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ResultVersionGet> VersionCheckAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("version/get");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResultVersionGet>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ResultVersionGet);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new SwaggerException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new SwaggerException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataCheckUserInfo 
    {
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataCheckUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataCheckUserInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataCheckExtendedUserInfo 
    {
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataCheckExtendedUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataCheckExtendedUserInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserIdentifyData 
    {
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserIdentifyData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserIdentifyData>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserIdentifyDataOffline 
    {
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserIdentifyDataOffline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserIdentifyDataOffline>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataFilterGetCertificate 
    {
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isPidIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPidIncluded { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataFilterGetCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataFilterGetCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataFilterCheckCertificate 
    {
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataFilterCheckCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataFilterCheckCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataUserCertificate 
    {
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterGetCertificate Certificate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataUserCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataUserCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataUserCheckCertificate 
    {
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataFilterCheckCertificate Certificate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataUserCheckCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataUserCheckCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataHashCheckCertificate 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataHashCheckCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataHashCheckCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataHashGetCertificate 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataHashGetCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataHashGetCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Document 
    {
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateExpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateExpire { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Document FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Document>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentHash 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Coverage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentGroupHash 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentGroupHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentGroupHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentGroupOnlineHash 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentGroupOnlineHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentGroupOnlineHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HashActivate 
    {
        [Newtonsoft.Json.JsonProperty("activationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HashActivate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HashActivate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentAuth 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateExpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateExpire { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentAuth FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentAuth>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Certificate 
    {
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateValidTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateValidTo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Certificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Certificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transaction 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Transaction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transaction>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StatusThreads 
    {
        [Newtonsoft.Json.JsonProperty("groupTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("groupIsProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupIsProcessing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("groupStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentThreadStatus> Documents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static StatusThreads FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusThreads>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentThreadStatus 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProcessing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentThreadStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentThreadStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentAttr 
    {
        [Newtonsoft.Json.JsonProperty("dateExpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateExpire { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentAttr FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentAttr>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentDopk 
    {
        [Newtonsoft.Json.JsonProperty("dateExpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateExpire { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentDopk FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentDopk>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentActivate 
    {
        [Newtonsoft.Json.JsonProperty("activationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentActivate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentActivate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentActivateResend 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DocumentActivateResend FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentActivateResend>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HashActivateResend 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HashActivateResend FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HashActivateResend>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataAddDOPKDocument 
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentDopk Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataAddDOPKDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataAddDOPKDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SignInfoHash 
    {
        [Newtonsoft.Json.JsonProperty("algorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Algorithm { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SignInfoHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignInfoHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SignInfoHashAuth 
    {
        [Newtonsoft.Json.JsonProperty("algorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Algorithm { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SignInfoHashAuth FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignInfoHashAuth>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataHashGroupOnline 
    {
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentGroupOnlineHash> Documents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateExpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateExpire { get; set; }
    
        [Newtonsoft.Json.JsonProperty("groupDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificateSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateSerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataHashGroupOnline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataHashGroupOnline>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocument 
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificateSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateSerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentAuth 
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentAuth Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHashAuth SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isRequiredSigning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequiredSigning { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentAuth FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentAuth>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Includes 
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("latinNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LatinNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Emails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Phones { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentIssuerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentIssuerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentValidDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentValidDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentIssueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Nationality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentPicture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentPicture { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentSignature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("picFront", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PicFront { get; set; }
    
        [Newtonsoft.Json.JsonProperty("picBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PicBack { get; set; }
    
        [Newtonsoft.Json.JsonProperty("picIDCombined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PicIDCombined { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DateOfBirth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("placeOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PlaceOfBirth { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Includes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Includes>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IncludesOffline 
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("latinNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LatinNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentIssuerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentIssuerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentValidDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentValidDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentIssueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Nationality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentPicture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentPicture { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentSignature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DateOfBirth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("placeOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PlaceOfBirth { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static IncludesOffline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IncludesOffline>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocument 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentOffline 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentOffline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentOffline>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultGroupHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultGroupHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultGroupHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentTransactionGroup 
    {
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction> Transactions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentTransactionGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentTransactionGroup>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentTransaction 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction> Transactions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentTransaction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentTransaction>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDeliveryTransaction 
    {
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction> Transactions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDeliveryTransaction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDeliveryTransaction>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultGetUserCertificate 
    {
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateValidTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateValidTo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultGetUserCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultGetUserCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultCheckCertificate 
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Result { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultCheckCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultCheckCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultGetHashCertificate 
    {
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateValidTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DateValidTo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultGetHashCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultGetHashCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultCheckHashCertificate 
    {
        [Newtonsoft.Json.JsonProperty("issued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Issued { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProcessing { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultCheckHashCertificate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultCheckHashCertificate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultUserExtendedCheck 
    {
        [Newtonsoft.Json.JsonProperty("isRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRegistered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isIdentified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsIdentified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSupervised", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSupervised { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasConfirmedPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasConfirmedPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasConfirmedEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasConfirmedEmail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultUserExtendedCheck FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultUserExtendedCheck>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataAttrCertDocument 
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentAttr Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Includes Includes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyData User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataAttrCertDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataAttrCertDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Agents 
    {
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("masterIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Agent> Agents1 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Agents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Agents>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Agent 
    {
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certificateSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateSerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Agent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Agent>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultAgentsAdded 
    {
        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AgentAdded> Agents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultAgentsAdded FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultAgentsAdded>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentAdded 
    {
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AgentAdded FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AgentAdded>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDeleteAgents 
    {
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("masterIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeleteAgent> Agents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDeleteAgents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDeleteAgents>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineInitHash 
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentHash Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyDataOffline User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agentIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineInitHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineInitHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineGroupInitHash 
    {
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentGroupHash> Documents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyDataOffline User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("groupDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agentIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineGroupInitHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineGroupInitHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineSendHash 
    {
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineSendHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineSendHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineCheckHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineCheckHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineCheckHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineGetHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineGetHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineGetHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineGroupSendHash 
    {
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineGroupSendHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineGroupSendHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineGroupCheckHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineGroupCheckHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineGroupCheckHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataOfflineGroupGetHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataOfflineGroupGetHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataOfflineGroupGetHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDataOfflineCheckHash 
    {
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProcessing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDataOfflineCheckHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDataOfflineCheckHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDataOfflineGetHash 
    {
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsProcessing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDataOfflineGetHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDataOfflineGetHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultInitHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultInitHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultInitHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultInitFileHash 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultInitFileHash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultInitFileHash>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeleteAgent 
    {
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DeleteAgent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteAgent>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultAgentsDeleted 
    {
        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AgentDeleted> Agents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultAgentsDeleted FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultAgentsDeleted>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentDeleted 
    {
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AgentDeleted FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AgentDeleted>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataAttrCertDocumentOffline 
    {
        [Newtonsoft.Json.JsonProperty("includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IncludesOffline Includes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignInfoHash SignInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIdentifyDataOffline User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agentIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlCallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlCallback { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataAttrCertDocumentOffline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataAttrCertDocumentOffline>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultOneTimeDocument 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultOneTimeDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultOneTimeDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentStatus 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentThreadStatus 
    {
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentThreadStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentThreadStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultVersionGet 
    {
        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultVersionGet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultVersionGet>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentStatus 
    {
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProcessing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentThreadStatus 
    {
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusThreads> Statuses { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentThreadStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentThreadStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentGroupStatus 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentGroupStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentGroupStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentGroupStatus 
    {
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProcessing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReason { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentGroupStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentGroupStatus>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentDownload 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentDownload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentDownload>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentWithdraw 
    {
        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreadID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentWithdraw FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentWithdraw>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultDocumentWithdraw 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultDocumentWithdraw FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultDocumentWithdraw>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDeliveryDownload 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDeliveryDownload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDeliveryDownload>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataDocumentGroupDownload 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DataDocumentGroupDownload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDocumentGroupDownload>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultOneTimeDocumentGroup 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResultOneTimeDocumentGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultOneTimeDocumentGroup>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OneTimeDocumentGroupActivate 
    {
        [Newtonsoft.Json.JsonProperty("activationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OneTimeDocumentGroupActivate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OneTimeDocumentGroupActivate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OneTimeDocumentGroupActivateResend 
    {
        [Newtonsoft.Json.JsonProperty("transactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OneTimeDocumentGroupActivateResend FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OneTimeDocumentGroupActivateResend>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108