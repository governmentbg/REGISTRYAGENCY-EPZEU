//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace TestAtanas.EPZEU.CR.Web.App
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Client 
    {
        private string _baseUrl = "/EPZEU.CR.Web.App";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Операция за изчитане на процес по заявяване.</summary>
        /// <param name="applType">Тип на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationProcess> ApplicationProcessesAsync(int? applType)
        {
            return ApplicationProcessesAsync(applType, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на процес по заявяване.</summary>
        /// <param name="applType">Тип на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationProcess> ApplicationProcessesAsync(int? applType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses?");
            if (applType != null) 
            {
                urlBuilder_.Append("applType=").Append(System.Uri.EscapeDataString(ConvertToString(applType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationProcess); 
                            try
                            {
                                result_ = (ApplicationProcess)System.Convert.ChangeType(responseData_, typeof(ApplicationProcess));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationProcess);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за създаване на процес по заявяване.</summary>
        /// <param name="body">Заявка за създаване на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationProcess> ApplicationProcesses2Async(ApplicationRequest body)
        {
            return ApplicationProcesses2Async(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за създаване на процес по заявяване.</summary>
        /// <param name="body">Заявка за създаване на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationProcess> ApplicationProcesses2Async(ApplicationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationProcess); 
                            try
                            {
                                result_ = (ApplicationProcess)System.Convert.ChangeType(responseData_, typeof(ApplicationProcess));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationProcess);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на процес по заявяване.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="loadAllData">Флаг указващ дали да се заредят всички данни.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationProcess> ApplicationProcesses3Async(long? processID, bool? loadAllData)
        {
            return ApplicationProcesses3Async(processID, loadAllData, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на процес по заявяване.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="loadAllData">Флаг указващ дали да се заредят всички данни.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationProcess> ApplicationProcesses3Async(long? processID, bool? loadAllData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}?");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            if (loadAllData != null) 
            {
                urlBuilder_.Append("loadAllData=").Append(System.Uri.EscapeDataString(ConvertToString(loadAllData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationProcess); 
                            try
                            {
                                result_ = (ApplicationProcess)System.Convert.ChangeType(responseData_, typeof(ApplicationProcess));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationProcess);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изтриване на процес по заявяване.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ApplicationProcesses4Async(long processID)
        {
            return ApplicationProcesses4Async(processID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изтриване на процес по заявяване.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ApplicationProcesses4Async(long processID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за добавяне на подпроцес.</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <param name="body">Заявка за създаване на заявление</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationProcess> AddChildProcessAsync(long processID, ApplicationRequest body)
        {
            return AddChildProcessAsync(processID, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за добавяне на подпроцес.</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <param name="body">Заявка за създаване на заявление</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationProcess> AddChildProcessAsync(long processID, ApplicationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/AddChildProcess");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationProcess); 
                            try
                            {
                                result_ = (ApplicationProcess)System.Convert.ChangeType(responseData_, typeof(ApplicationProcess));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationProcess);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Application> ApplicationsAsync(long processID, long applID)
        {
            return ApplicationsAsync(processID, applID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Application> ApplicationsAsync(long processID, long applID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Application); 
                            try
                            {
                                result_ = (Application)System.Convert.ChangeType(responseData_, typeof(Application));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Application);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за обновяване на съдържанието на заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="body">Съдържание на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Applications2Async(long processID, long applID, JsonElement body)
        {
            return Applications2Async(processID, applID, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за обновяване на съдържанието на заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="body">Съдържание на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Applications2Async(long processID, long applID, JsonElement body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изтриване на заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Applications3Async(long processID, long applID)
        {
            return Applications3Async(processID, applID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изтриване на заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Applications3Async(long processID, long applID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за създаване на заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="body">Заявка за създаване на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Application> Applications4Async(long processID, ApplicationRequest body)
        {
            return Applications4Async(processID, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за създаване на заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="body">Заявка за създаване на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Application> Applications4Async(long processID, ApplicationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Application); 
                            try
                            {
                                result_ = (Application)System.Convert.ChangeType(responseData_, typeof(Application));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Application);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Връща всички прикачени документи за заявление</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <param name="applID">Идентификатори на заявления.</param>
        /// <param name="body">Прикачен документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AttachedDocument>> AttachedDocumentsAllAsync(long processID, long applID, AttachedDocument body)
        {
            return AttachedDocumentsAllAsync(processID, applID, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Връща всички прикачени документи за заявление</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <param name="applID">Идентификатори на заявления.</param>
        /// <param name="body">Прикачен документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AttachedDocument>> AttachedDocumentsAllAsync(long processID, long applID, AttachedDocument body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}/AttachedDocuments");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<AttachedDocument>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<AttachedDocument>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<AttachedDocument>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<AttachedDocument>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операзия за добавяне на документ към заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="body">Документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AttachedDocument> AttachedDocumentsAsync(long processID, long applID, AttachedDocument body)
        {
            return AttachedDocumentsAsync(processID, applID, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операзия за добавяне на документ към заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="body">Документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AttachedDocument> AttachedDocumentsAsync(long processID, long applID, AttachedDocument body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}/AttachedDocuments");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AttachedDocument); 
                            try
                            {
                                result_ = (AttachedDocument)System.Convert.ChangeType(responseData_, typeof(AttachedDocument));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AttachedDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операзия за добавяне на документ към заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AttachedDocument> WithContentAsync(long processID, long applID, string guid, string documentTypeID, bool? isOriginal, string description, string reusedIncomingNumber, string fileMetadata_Guid, bool? fileMetadata_GuidSpecified, string fileMetadata_FileName, bool? fileMetadata_FileNameSpecified, string fileMetadata_ContentType, bool? fileMetadata_ContentTypeSpecified, long? fileMetadata_Size, long? fileMetadata_SizeAttribute, bool? fileMetadata_SizeAttributeSpecified, string fileMetadata_HashAlgorithm, bool? fileMetadata_HashAlgorithmSpecified, long? fileMetadata_NumberOfPages, long? fileMetadata_NumberOfPagesAttribute, bool? fileMetadata_NumberOfPagesAttributeSpecified, byte[] fileMetadata_Hash, string fileName, string contentType, long? size, string hashAlgorithm, byte[] hash, long? numberOfPages, long? applicationDocumentID, string htmlTemplateContent, System.Guid? signingGuid, bool? isActWithErasedPersonalData, Body body)
        {
            return WithContentAsync(processID, applID, guid, documentTypeID, isOriginal, description, reusedIncomingNumber, fileMetadata_Guid, fileMetadata_GuidSpecified, fileMetadata_FileName, fileMetadata_FileNameSpecified, fileMetadata_ContentType, fileMetadata_ContentTypeSpecified, fileMetadata_Size, fileMetadata_SizeAttribute, fileMetadata_SizeAttributeSpecified, fileMetadata_HashAlgorithm, fileMetadata_HashAlgorithmSpecified, fileMetadata_NumberOfPages, fileMetadata_NumberOfPagesAttribute, fileMetadata_NumberOfPagesAttributeSpecified, fileMetadata_Hash, fileName, contentType, size, hashAlgorithm, hash, numberOfPages, applicationDocumentID, htmlTemplateContent, signingGuid, isActWithErasedPersonalData, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операзия за добавяне на документ към заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AttachedDocument> WithContentAsync(long processID, long applID, string guid, string documentTypeID, bool? isOriginal, string description, string reusedIncomingNumber, string fileMetadata_Guid, bool? fileMetadata_GuidSpecified, string fileMetadata_FileName, bool? fileMetadata_FileNameSpecified, string fileMetadata_ContentType, bool? fileMetadata_ContentTypeSpecified, long? fileMetadata_Size, long? fileMetadata_SizeAttribute, bool? fileMetadata_SizeAttributeSpecified, string fileMetadata_HashAlgorithm, bool? fileMetadata_HashAlgorithmSpecified, long? fileMetadata_NumberOfPages, long? fileMetadata_NumberOfPagesAttribute, bool? fileMetadata_NumberOfPagesAttributeSpecified, byte[] fileMetadata_Hash, string fileName, string contentType, long? size, string hashAlgorithm, byte[] hash, long? numberOfPages, long? applicationDocumentID, string htmlTemplateContent, System.Guid? signingGuid, bool? isActWithErasedPersonalData, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}/AttachedDocuments/WithContent?");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
            if (guid != null) 
            {
                urlBuilder_.Append("Guid=").Append(System.Uri.EscapeDataString(ConvertToString(guid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (documentTypeID != null) 
            {
                urlBuilder_.Append("DocumentTypeID=").Append(System.Uri.EscapeDataString(ConvertToString(documentTypeID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOriginal != null) 
            {
                urlBuilder_.Append("IsOriginal=").Append(System.Uri.EscapeDataString(ConvertToString(isOriginal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (description != null) 
            {
                urlBuilder_.Append("Description=").Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reusedIncomingNumber != null) 
            {
                urlBuilder_.Append("ReusedIncomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(reusedIncomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_Guid != null) 
            {
                urlBuilder_.Append("FileMetadata.Guid=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_Guid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_GuidSpecified != null) 
            {
                urlBuilder_.Append("FileMetadata.GuidSpecified=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_GuidSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_FileName != null) 
            {
                urlBuilder_.Append("FileMetadata.FileName=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_FileNameSpecified != null) 
            {
                urlBuilder_.Append("FileMetadata.FileNameSpecified=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_FileNameSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_ContentType != null) 
            {
                urlBuilder_.Append("FileMetadata.ContentType=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_ContentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_ContentTypeSpecified != null) 
            {
                urlBuilder_.Append("FileMetadata.ContentTypeSpecified=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_ContentTypeSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_Size != null) 
            {
                urlBuilder_.Append("FileMetadata.Size=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_SizeAttribute != null) 
            {
                urlBuilder_.Append("FileMetadata.SizeAttribute=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_SizeAttribute, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_SizeAttributeSpecified != null) 
            {
                urlBuilder_.Append("FileMetadata.SizeAttributeSpecified=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_SizeAttributeSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_HashAlgorithm != null) 
            {
                urlBuilder_.Append("FileMetadata.HashAlgorithm=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_HashAlgorithm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_HashAlgorithmSpecified != null) 
            {
                urlBuilder_.Append("FileMetadata.HashAlgorithmSpecified=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_HashAlgorithmSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_NumberOfPages != null) 
            {
                urlBuilder_.Append("FileMetadata.NumberOfPages=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_NumberOfPages, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_NumberOfPagesAttribute != null) 
            {
                urlBuilder_.Append("FileMetadata.NumberOfPagesAttribute=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_NumberOfPagesAttribute, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_NumberOfPagesAttributeSpecified != null) 
            {
                urlBuilder_.Append("FileMetadata.NumberOfPagesAttributeSpecified=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_NumberOfPagesAttributeSpecified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileMetadata_Hash != null) 
            {
                urlBuilder_.Append("FileMetadata.Hash=").Append(System.Uri.EscapeDataString(ConvertToString(fileMetadata_Hash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fileName != null) 
            {
                urlBuilder_.Append("FileName=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contentType != null) 
            {
                urlBuilder_.Append("ContentType=").Append(System.Uri.EscapeDataString(ConvertToString(contentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null) 
            {
                urlBuilder_.Append("Size=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hashAlgorithm != null) 
            {
                urlBuilder_.Append("HashAlgorithm=").Append(System.Uri.EscapeDataString(ConvertToString(hashAlgorithm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hash != null) 
            {
                urlBuilder_.Append("Hash=").Append(System.Uri.EscapeDataString(ConvertToString(hash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (numberOfPages != null) 
            {
                urlBuilder_.Append("NumberOfPages=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfPages, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (applicationDocumentID != null) 
            {
                urlBuilder_.Append("ApplicationDocumentID=").Append(System.Uri.EscapeDataString(ConvertToString(applicationDocumentID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (htmlTemplateContent != null) 
            {
                urlBuilder_.Append("HtmlTemplateContent=").Append(System.Uri.EscapeDataString(ConvertToString(htmlTemplateContent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (signingGuid != null) 
            {
                urlBuilder_.Append("SigningGuid=").Append(System.Uri.EscapeDataString(ConvertToString(signingGuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isActWithErasedPersonalData != null) 
            {
                urlBuilder_.Append("IsActWithErasedPersonalData=").Append(System.Uri.EscapeDataString(ConvertToString(isActWithErasedPersonalData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AttachedDocument); 
                            try
                            {
                                result_ = (AttachedDocument)System.Convert.ChangeType(responseData_, typeof(AttachedDocument));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AttachedDocument);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операзия за обновяване на данните за документ към заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="applDocID">Идентификатор на документ към заявление.</param>
        /// <param name="body">Документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AttachedDocuments2Async(long processID, long applID, long applDocID, AttachedDocument body)
        {
            return AttachedDocuments2Async(processID, applID, applDocID, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операзия за обновяване на данните за документ към заявление</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="applDocID">Идентификатор на документ към заявление.</param>
        /// <param name="body">Документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AttachedDocuments2Async(long processID, long applID, long applDocID, AttachedDocument body, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            if (applDocID == null)
                throw new System.ArgumentNullException("applDocID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}/AttachedDocuments/{applDocID}");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applDocID}", System.Uri.EscapeDataString(ConvertToString(applDocID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операзия за изтриване на документ от заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="applDocID">Идентификатор на документ към заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AttachedDocuments3Async(long processID, long applID, long applDocID)
        {
            return AttachedDocuments3Async(processID, applID, applDocID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операзия за изтриване на документ от заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="applDocID">Идентификатор на документ към заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AttachedDocuments3Async(long processID, long applID, long applDocID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            if (applDocID == null)
                throw new System.ArgumentNullException("applDocID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}/AttachedDocuments/{applDocID}");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applDocID}", System.Uri.EscapeDataString(ConvertToString(applDocID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за стартиране на процес по подписване на документ прикачен към заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="applDocID">Идентификатор на документ към заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Guid> StartSigningAsync(long processID, long applID, long applDocID)
        {
            return StartSigningAsync(processID, applID, applDocID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за стартиране на процес по подписване на документ прикачен към заявление.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <param name="applID">Идентификатор на заявление.</param>
        /// <param name="applDocID">Идентификатор на документ към заявление.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Guid> StartSigningAsync(long processID, long applID, long applDocID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            if (applID == null)
                throw new System.ArgumentNullException("applID");
    
            if (applDocID == null)
                throw new System.ArgumentNullException("applDocID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Applications/{applID}/AttachedDocuments/{applDocID}/StartSigning");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applID}", System.Uri.EscapeDataString(ConvertToString(applID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{applDocID}", System.Uri.EscapeDataString(ConvertToString(applDocID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Guid); 
                            try
                            {
                                result_ = (System.Guid)System.Convert.ChangeType(responseData_, typeof(System.Guid));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Guid);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за извличане на плащания по заявление.</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ObligationInfo>> ObligationsAsync(long processID)
        {
            return ObligationsAsync(processID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за извличане на плащания по заявление.</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ObligationInfo>> ObligationsAsync(long processID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/Obligations");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ObligationInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ObligationInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ObligationInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ObligationInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за стартиране на процес по подписаване на заявлението.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Guid> StartSigning2Async(long processID)
        {
            return StartSigning2Async(processID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за стартиране на процес по подписаване на заявлението.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Guid> StartSigning2Async(long processID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/StartSigning");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Guid); 
                            try
                            {
                                result_ = (System.Guid)System.Convert.ChangeType(responseData_, typeof(System.Guid));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Guid);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за стартира порцеса по изпращане на заявлението.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartSendingAsync(long processID)
        {
            return StartSendingAsync(processID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за стартира порцеса по изпращане на заявлението.</summary>
        /// <param name="processID">Идентификатор на процес по заявяване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartSendingAsync(long processID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/StartSending");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за връщане към начален статус.</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProcessStatuses> ReturnToBeginningStatusAsync(long processID)
        {
            return ReturnToBeginningStatusAsync(processID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за връщане към начален статус.</summary>
        /// <param name="processID">Идентификатор на процес.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ProcessStatuses> ReturnToBeginningStatusAsync(long processID, System.Threading.CancellationToken cancellationToken)
        {
            if (processID == null)
                throw new System.ArgumentNullException("processID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ApplicationProcesses/{processID}/ReturnToBeginningStatus");
            urlBuilder_.Replace("{processID}", System.Uri.EscapeDataString(ConvertToString(processID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ProcessStatuses); 
                            try
                            {
                                result_ = (ProcessStatuses)System.Convert.ChangeType(responseData_, typeof(ProcessStatuses));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unauthorized", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Forbidden", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ProcessStatuses);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на заявления.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="entryNumber">Номер на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationInfo> Applications5Async(string incomingNumber, string entryNumber)
        {
            return Applications5Async(incomingNumber, entryNumber, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на заявления.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="entryNumber">Номер на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationInfo> Applications5Async(string incomingNumber, string entryNumber, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/{incomingNumber}?");
            if (incomingNumber != null) 
            {
                urlBuilder_.Append("incomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryNumber != null) 
            {
                urlBuilder_.Append("entryNumber=").Append(System.Uri.EscapeDataString(ConvertToString(entryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationInfo); 
                            try
                            {
                                result_ = (ApplicationInfo)System.Convert.ChangeType(responseData_, typeof(ApplicationInfo));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationInfo);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за заявление.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationFormBase> FormAsync(string incomingNumber)
        {
            return FormAsync(incomingNumber, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за заявление.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationFormBase> FormAsync(string incomingNumber, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/{incomingNumber}/Form");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationFormBase); 
                            try
                            {
                                result_ = (ApplicationFormBase)System.Convert.ChangeType(responseData_, typeof(ApplicationFormBase));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationFormBase);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за приложени документи.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="entryDate">Дата на входиране.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationDocumentInfo>> DocumentsAllAsync(string incomingNumber, System.DateTimeOffset? entryDate)
        {
            return DocumentsAllAsync(incomingNumber, entryDate, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за приложени документи.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="entryDate">Дата на входиране.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationDocumentInfo>> DocumentsAllAsync(string incomingNumber, System.DateTimeOffset? entryDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/{incomingNumber}/Documents?");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (entryDate != null) 
            {
                urlBuilder_.Append("entryDate=").Append(System.Uri.EscapeDataString(entryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationDocumentInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationDocumentInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationDocumentInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationDocumentInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операцияза изчитане на изходящ документ към заявление.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="outgoingGuid">Изходящ гуид.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OutgoingDocument>> OutgoingDocumentsAsync(string incomingNumber, string outgoingGuid)
        {
            return OutgoingDocumentsAsync(incomingNumber, outgoingGuid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операцияза изчитане на изходящ документ към заявление.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="outgoingGuid">Изходящ гуид.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OutgoingDocument>> OutgoingDocumentsAsync(string incomingNumber, string outgoingGuid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/{incomingNumber}/OutgoingDocuments?");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (outgoingGuid != null) 
            {
                urlBuilder_.Append("outgoingGuid=").Append(System.Uri.EscapeDataString(ConvertToString(outgoingGuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<OutgoingDocument>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<OutgoingDocument>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<OutgoingDocument>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<OutgoingDocument>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на заявления - преобразувания.</summary>
        /// <param name="dateFrom">От дата.</param>
        /// <param name="dateTo">До дата.</param>
        /// <param name="companyName">Фирма/Наименование.</param>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> TransformationsAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string companyName, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords)
        {
            return TransformationsAsync(dateFrom, dateTo, companyName, page, pageSize, count, loadMaxNumberOfRecords, maxNumberOfRecords, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на заявления - преобразувания.</summary>
        /// <param name="dateFrom">От дата.</param>
        /// <param name="dateTo">До дата.</param>
        /// <param name="companyName">Фирма/Наименование.</param>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> TransformationsAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string companyName, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/Transformations?");
            if (dateFrom != null) 
            {
                urlBuilder_.Append("DateFrom=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateTo != null) 
            {
                urlBuilder_.Append("DateTo=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadMaxNumberOfRecords != null) 
            {
                urlBuilder_.Append("LoadMaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(loadMaxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxNumberOfRecords != null) 
            {
                urlBuilder_.Append("MaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(maxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на документи без партида.</summary>
        /// <param name="dateFrom">От дата.</param>
        /// <param name="dateTo">До дата.</param>
        /// <param name="companyName">Фирма/Наименование.</param>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="status">Ресултат.</param>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> DocumentsWithoutDeedAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string companyName, string incomingNumber, ApplicationStatuses? status, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords)
        {
            return DocumentsWithoutDeedAsync(dateFrom, dateTo, companyName, incomingNumber, status, page, pageSize, count, loadMaxNumberOfRecords, maxNumberOfRecords, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на документи без партида.</summary>
        /// <param name="dateFrom">От дата.</param>
        /// <param name="dateTo">До дата.</param>
        /// <param name="companyName">Фирма/Наименование.</param>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="status">Ресултат.</param>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> DocumentsWithoutDeedAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string companyName, string incomingNumber, ApplicationStatuses? status, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/DocumentsWithoutDeed?");
            if (dateFrom != null) 
            {
                urlBuilder_.Append("DateFrom=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateTo != null) 
            {
                urlBuilder_.Append("DateTo=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incomingNumber != null) 
            {
                urlBuilder_.Append("IncomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null) 
            {
                urlBuilder_.Append("Status=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadMaxNumberOfRecords != null) 
            {
                urlBuilder_.Append("LoadMaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(loadMaxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxNumberOfRecords != null) 
            {
                urlBuilder_.Append("MaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(maxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка 'Вписвания, заличавания и обявявания'</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Entry>> EntriesAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string entryNumber, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return EntriesAsync(dateFrom, dateTo, entryNumber, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка 'Вписвания, заличавания и обявявания'</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Entry>> EntriesAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string entryNumber, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/Entries?");
            if (dateFrom != null) 
            {
                urlBuilder_.Append("DateFrom=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateTo != null) 
            {
                urlBuilder_.Append("DateTo=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryNumber != null) 
            {
                urlBuilder_.Append("EntryNumber=").Append(System.Uri.EscapeDataString(ConvertToString(entryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Entry>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Entry>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Entry>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка 'Справка несъстоятелност'</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Entry>> BankruptciesAsync(string uIC, string companyName, BankruptcyEntriesTypes? bankruptcyEntryType, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string entryNumber, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return BankruptciesAsync(uIC, companyName, bankruptcyEntryType, dateFrom, dateTo, entryNumber, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка 'Справка несъстоятелност'</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Entry>> BankruptciesAsync(string uIC, string companyName, BankruptcyEntriesTypes? bankruptcyEntryType, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string entryNumber, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/Entries/Bankruptcies?");
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankruptcyEntryType != null) 
            {
                urlBuilder_.Append("BankruptcyEntryType=").Append(System.Uri.EscapeDataString(ConvertToString(bankruptcyEntryType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateFrom != null) 
            {
                urlBuilder_.Append("DateFrom=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateTo != null) 
            {
                urlBuilder_.Append("DateTo=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryNumber != null) 
            {
                urlBuilder_.Append("EntryNumber=").Append(System.Uri.EscapeDataString(ConvertToString(entryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Entry>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Entry>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Entry>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка 'Търговци/ЮЛНЦ в ликвидация'</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Entry>> LiquidationsAsync(string uIC, string companyName, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string entryNumber, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return LiquidationsAsync(uIC, companyName, dateFrom, dateTo, entryNumber, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка 'Търговци/ЮЛНЦ в ликвидация'</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Entry>> LiquidationsAsync(string uIC, string companyName, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, string entryNumber, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Applications/Entries/Liquidations?");
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateFrom != null) 
            {
                urlBuilder_.Append("DateFrom=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateTo != null) 
            {
                urlBuilder_.Append("DateTo=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryNumber != null) 
            {
                urlBuilder_.Append("EntryNumber=").Append(System.Uri.EscapeDataString(ConvertToString(entryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Entry>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Entry>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Entry>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на назначенията.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="docNumber">Номер на документа.</param>
        /// <param name="outgoingDate">Дата на изходящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssignmentSummary>> AssignmentAsync(string incomingNumber, int docNumber, string outgoingDate)
        {
            return AssignmentAsync(incomingNumber, docNumber, outgoingDate, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на назначенията.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="docNumber">Номер на документа.</param>
        /// <param name="outgoingDate">Дата на изходящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssignmentSummary>> AssignmentAsync(string incomingNumber, int docNumber, string outgoingDate, System.Threading.CancellationToken cancellationToken)
        {
            if (docNumber == null)
                throw new System.ArgumentNullException("docNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Assignments/{incomingNumber}-{docNumber}/{outgoingDate}/Assignment");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{docNumber}", System.Uri.EscapeDataString(ConvertToString(docNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{outgoingDate}", System.Uri.EscapeDataString(ConvertToString(outgoingDate, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<AssignmentSummary>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<AssignmentSummary>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<AssignmentSummary>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<AssignmentSummary>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на назначенията.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> AssignmentMasterApplicationsAsync(string uIC, string incomingNumber, string companyName, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, MasterAssignmentSearchSearchMode? mode, string outgoingIncomingNumber, string outgoingSeqNumber, System.DateTimeOffset? outgoingNumberDate, bool? includeAll, bool? getOnlyAssWithoutDeed, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return AssignmentMasterApplicationsAsync(uIC, incomingNumber, companyName, fromDate, toDate, mode, outgoingIncomingNumber, outgoingSeqNumber, outgoingNumberDate, includeAll, getOnlyAssWithoutDeed, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на назначенията.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> AssignmentMasterApplicationsAsync(string uIC, string incomingNumber, string companyName, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, MasterAssignmentSearchSearchMode? mode, string outgoingIncomingNumber, string outgoingSeqNumber, System.DateTimeOffset? outgoingNumberDate, bool? includeAll, bool? getOnlyAssWithoutDeed, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Assignments/AssignmentMasterApplications?");
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incomingNumber != null) 
            {
                urlBuilder_.Append("IncomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append("FromDate=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append("ToDate=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append("Mode=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (outgoingIncomingNumber != null) 
            {
                urlBuilder_.Append("OutgoingIncomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(outgoingIncomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (outgoingSeqNumber != null) 
            {
                urlBuilder_.Append("OutgoingSeqNumber=").Append(System.Uri.EscapeDataString(ConvertToString(outgoingSeqNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (outgoingNumberDate != null) 
            {
                urlBuilder_.Append("OutgoingNumberDate=").Append(System.Uri.EscapeDataString(outgoingNumberDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAll != null) 
            {
                urlBuilder_.Append("IncludeAll=").Append(System.Uri.EscapeDataString(ConvertToString(includeAll, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getOnlyAssWithoutDeed != null) 
            {
                urlBuilder_.Append("GetOnlyAssWithoutDeed=").Append(System.Uri.EscapeDataString(ConvertToString(getOnlyAssWithoutDeed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = (object)System.Convert.ChangeType(responseData_, typeof(object));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка Документи без назначение.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> DocumentsWithoutAppointmentAsync(string incomingNumber, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, ApplicationFormTypes? applicationFormType, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return DocumentsWithoutAppointmentAsync(incomingNumber, fromDate, toDate, applicationFormType, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка Документи без назначение.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> DocumentsWithoutAppointmentAsync(string incomingNumber, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, ApplicationFormTypes? applicationFormType, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Assignments/DocumentsWithoutAppointment?");
            if (incomingNumber != null) 
            {
                urlBuilder_.Append("IncomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append("FromDate=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append("ToDate=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (applicationFormType != null) 
            {
                urlBuilder_.Append("ApplicationFormType=").Append(System.Uri.EscapeDataString(ConvertToString(applicationFormType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операзия за изчитане на данни за фирма.</summary>
        /// <param name="uic">ЕИК</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BulstatSummary>> SummaryAllAsync(string uic)
        {
            return SummaryAllAsync(uic, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операзия за изчитане на данни за фирма.</summary>
        /// <param name="uic">ЕИК</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BulstatSummary>> SummaryAllAsync(string uic, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Bulstats/{uic}/Summary");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<BulstatSummary>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<BulstatSummary>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<BulstatSummary>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<BulstatSummary>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за приемане на комуникация.</summary>
        /// <param name="body">Искане за изправяне на грешка при сканиране.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AcceptAsync(RequestForCorrectionForScanning body)
        {
            return AcceptAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за приемане на комуникация.</summary>
        /// <param name="body">Искане за изправяне на грешка при сканиране.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AcceptAsync(RequestForCorrectionForScanning body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Communications/Accept");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за търсене на комуникации.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestForCorrectionForScanning>> CommunicationAsync(string incomingNumber)
        {
            return CommunicationAsync(incomingNumber, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за търсене на комуникации.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestForCorrectionForScanning>> CommunicationAsync(string incomingNumber, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Communications/Search/{incomingNumber}/Communication");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<RequestForCorrectionForScanning>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<RequestForCorrectionForScanning>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<RequestForCorrectionForScanning>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<RequestForCorrectionForScanning>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за зареждане на данни за заявление.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationInfo> ApplicationInfoAsync(string incomingNumber)
        {
            return ApplicationInfoAsync(incomingNumber, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за зареждане на данни за заявление.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApplicationInfo> ApplicationInfoAsync(string incomingNumber, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Communications/Load/{incomingNumber}/ApplicationInfo");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationInfo); 
                            try
                            {
                                result_ = (ApplicationInfo)System.Convert.ChangeType(responseData_, typeof(ApplicationInfo));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApplicationInfo);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на основни данни за фирми.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="entryNumber">Номер на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanySummary>> SummaryAsync(string incomingNumber, string entryNumber)
        {
            return SummaryAsync(incomingNumber, entryNumber, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на основни данни за фирми.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <param name="entryNumber">Номер на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanySummary>> SummaryAsync(string incomingNumber, string entryNumber, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Companies/Summary?");
            if (incomingNumber != null) 
            {
                urlBuilder_.Append("incomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryNumber != null) 
            {
                urlBuilder_.Append("entryNumber=").Append(System.Uri.EscapeDataString(ConvertToString(entryNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<CompanySummary>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<CompanySummary>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<CompanySummary>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<CompanySummary>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за преобразуване.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TransformationSummary> GetTransformationInfoAsync(string incomingNumber)
        {
            return GetTransformationInfoAsync(incomingNumber, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за преобразуване.</summary>
        /// <param name="incomingNumber">Входящ номер.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TransformationSummary> GetTransformationInfoAsync(string incomingNumber, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Companies/GetTransformationInfo/{incomingNumber}");
            urlBuilder_.Replace("{incomingNumber}", System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TransformationSummary); 
                            try
                            {
                                result_ = (TransformationSummary)System.Convert.ChangeType(responseData_, typeof(TransformationSummary));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TransformationSummary);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за запазено име на фирма.</summary>
        /// <param name="clearName">Пълно име на фирма</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyInfo>> GetReservedCompanyAsync(string clearName)
        {
            return GetReservedCompanyAsync(clearName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за запазено име на фирма.</summary>
        /// <param name="clearName">Пълно име на фирма</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyInfo>> GetReservedCompanyAsync(string clearName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Companies/GetReservedCompany/{clearName}");
            urlBuilder_.Replace("{clearName}", System.Uri.EscapeDataString(ConvertToString(clearName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<CompanyInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<CompanyInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<CompanyInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<CompanyInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на фирмено дело</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TreeNodeCollection> CompanyCasesAsync(string uic)
        {
            return CompanyCasesAsync(uic, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на фирмено дело</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TreeNodeCollection> CompanyCasesAsync(string uic, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Companies/CompanyCases/{uic}");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TreeNodeCollection); 
                            try
                            {
                                result_ = (TreeNodeCollection)System.Convert.ChangeType(responseData_, typeof(TreeNodeCollection));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TreeNodeCollection);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за партида.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="entryDate">Дата на вписване.</param>
        /// <param name="loadFieldsFromAllLegalForms">Флаг указващ дали да се заредят полета за всички правни  форми.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeedVM> DeedsAsync(string uic, System.DateTimeOffset? entryDate, bool? loadFieldsFromAllLegalForms)
        {
            return DeedsAsync(uic, entryDate, loadFieldsFromAllLegalForms, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за партида.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="entryDate">Дата на вписване.</param>
        /// <param name="loadFieldsFromAllLegalForms">Флаг указващ дали да се заредят полета за всички правни  форми.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DeedVM> DeedsAsync(string uic, System.DateTimeOffset? entryDate, bool? loadFieldsFromAllLegalForms, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            if (entryDate != null) 
            {
                urlBuilder_.Append("entryDate=").Append(System.Uri.EscapeDataString(entryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadFieldsFromAllLegalForms != null) 
            {
                urlBuilder_.Append("loadFieldsFromAllLegalForms=").Append(System.Uri.EscapeDataString(ConvertToString(loadFieldsFromAllLegalForms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DeedVM); 
                            try
                            {
                                result_ = (DeedVM)System.Convert.ChangeType(responseData_, typeof(DeedVM));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeedVM);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на TRULNC представители.</summary>
        /// <param name="uic">ЕИК</param>
        /// <param name="ident">Идентификатор</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Deed> TRRULNCRepresentativesAsync(string uic, string ident)
        {
            return TRRULNCRepresentativesAsync(uic, ident, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на TRULNC представители.</summary>
        /// <param name="uic">ЕИК</param>
        /// <param name="ident">Идентификатор</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Deed> TRRULNCRepresentativesAsync(string uic, string ident, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/TRRULNCRepresentatives?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            if (ident != null) 
            {
                urlBuilder_.Append("ident=").Append(System.Uri.EscapeDataString(ConvertToString(ident, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Deed); 
                            try
                            {
                                result_ = (Deed)System.Convert.ChangeType(responseData_, typeof(Deed));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Deed);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на TRULNC представители.</summary>
        /// <param name="uic">ЕИК</param>
        /// <param name="ident">Идентификатор</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Deed> TRRULNCRepresentatives2Async(string uic, string ident)
        {
            return TRRULNCRepresentatives2Async(uic, ident, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на TRULNC представители.</summary>
        /// <param name="uic">ЕИК</param>
        /// <param name="ident">Идентификатор</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Deed> TRRULNCRepresentatives2Async(string uic, string ident, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/{ident}/TRRULNCRepresentatives");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ident}", System.Uri.EscapeDataString(ConvertToString(ident, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Deed); 
                            try
                            {
                                result_ = (Deed)System.Convert.ChangeType(responseData_, typeof(Deed));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Deed);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на идентификатори на партиди.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="entryDate">Дата на входиране.</param>
        /// <param name="includeHistory">Флаг указващ дали да се включи история.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DeedFieldIdentsAsync(string uic, System.DateTimeOffset? entryDate, bool? includeHistory)
        {
            return DeedFieldIdentsAsync(uic, entryDate, includeHistory, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на идентификатори на партиди.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="entryDate">Дата на входиране.</param>
        /// <param name="includeHistory">Флаг указващ дали да се включи история.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DeedFieldIdentsAsync(string uic, System.DateTimeOffset? entryDate, bool? includeHistory, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/DeedFieldIdents?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            if (entryDate != null) 
            {
                urlBuilder_.Append("entryDate=").Append(System.Uri.EscapeDataString(entryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHistory != null) 
            {
                urlBuilder_.Append("includeHistory=").Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<string>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<string>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за справка "Списък със запазени фирми/ наименования"</summary>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyInfoVM>> PreservedNamesAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, string companyFirstLatter, SortColumnsWithOrder? sortColumnOrder, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords)
        {
            return PreservedNamesAsync(fromDate, toDate, companyFirstLatter, sortColumnOrder, page, pageSize, count, loadMaxNumberOfRecords, maxNumberOfRecords, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за справка "Списък със запазени фирми/ наименования"</summary>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyInfoVM>> PreservedNamesAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, string companyFirstLatter, SortColumnsWithOrder? sortColumnOrder, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/PreservedNames?");
            if (fromDate != null) 
            {
                urlBuilder_.Append("FromDate=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append("ToDate=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyFirstLatter != null) 
            {
                urlBuilder_.Append("CompanyFirstLatter=").Append(System.Uri.EscapeDataString(ConvertToString(companyFirstLatter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortColumnOrder != null) 
            {
                urlBuilder_.Append("SortColumnOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortColumnOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadMaxNumberOfRecords != null) 
            {
                urlBuilder_.Append("LoadMaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(loadMaxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxNumberOfRecords != null) 
            {
                urlBuilder_.Append("MaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(maxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<CompanyInfoVM>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<CompanyInfoVM>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<CompanyInfoVM>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<CompanyInfoVM>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справки за права върху фирма/ наименование</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtectedRightsCompanyInfo>> RightsCompaniesAsync(string name, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return RightsCompaniesAsync(name, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справки за права върху фирма/ наименование</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtectedRightsCompanyInfo>> RightsCompaniesAsync(string name, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/RightsCompanies?");
            if (name != null) 
            {
                urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ProtectedRightsCompanyInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ProtectedRightsCompanyInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ProtectedRightsCompanyInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ProtectedRightsCompanyInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Търсене по юридическо лице.</summary>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PhysicalOrCompanyObj>> Summary2Async(string name, string ident, bool? includeHistory, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords)
        {
            return Summary2Async(name, ident, includeHistory, page, pageSize, count, loadMaxNumberOfRecords, maxNumberOfRecords, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Търсене по юридическо лице.</summary>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PhysicalOrCompanyObj>> Summary2Async(string name, string ident, bool? includeHistory, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/Summary?");
            if (name != null) 
            {
                urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ident != null) 
            {
                urlBuilder_.Append("Ident=").Append(System.Uri.EscapeDataString(ConvertToString(ident, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHistory != null) 
            {
                urlBuilder_.Append("IncludeHistory=").Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadMaxNumberOfRecords != null) 
            {
                urlBuilder_.Append("LoadMaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(loadMaxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxNumberOfRecords != null) 
            {
                urlBuilder_.Append("MaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(maxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<PhysicalOrCompanyObj>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<PhysicalOrCompanyObj>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<PhysicalOrCompanyObj>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<PhysicalOrCompanyObj>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Търсене по физическо лице</summary>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PhysicalOrCompanyObj>> SubjectsAsync(string name, string ident, bool? includeHistory, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords)
        {
            return SubjectsAsync(name, ident, includeHistory, page, pageSize, count, loadMaxNumberOfRecords, maxNumberOfRecords, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Търсене по физическо лице</summary>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PhysicalOrCompanyObj>> SubjectsAsync(string name, string ident, bool? includeHistory, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/Subjects?");
            if (name != null) 
            {
                urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ident != null) 
            {
                urlBuilder_.Append("Ident=").Append(System.Uri.EscapeDataString(ConvertToString(ident, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHistory != null) 
            {
                urlBuilder_.Append("IncludeHistory=").Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadMaxNumberOfRecords != null) 
            {
                urlBuilder_.Append("LoadMaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(loadMaxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxNumberOfRecords != null) 
            {
                urlBuilder_.Append("MaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(maxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<PhysicalOrCompanyObj>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<PhysicalOrCompanyObj>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<PhysicalOrCompanyObj>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<PhysicalOrCompanyObj>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка по физическо или юридическо лицe</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubjectInFieldItem>> SubjectInFieldsAsync(string uID, string name, bool? searchInHistory, SubjectInFieldTypes? type)
        {
            return SubjectInFieldsAsync(uID, name, searchInHistory, type, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка по физическо или юридическо лицe</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubjectInFieldItem>> SubjectInFieldsAsync(string uID, string name, bool? searchInHistory, SubjectInFieldTypes? type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/SubjectInFields?");
            if (uID != null) 
            {
                urlBuilder_.Append("UID=").Append(System.Uri.EscapeDataString(ConvertToString(uID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null) 
            {
                urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchInHistory != null) 
            {
                urlBuilder_.Append("SearchInHistory=").Append(System.Uri.EscapeDataString(ConvertToString(searchInHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append("Type=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<SubjectInFieldItem>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<SubjectInFieldItem>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<SubjectInFieldItem>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<SubjectInFieldItem>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Търсене на Пререгистрирани търговци/ ЮЛНЦ.</summary>
        /// <param name="fromDate">От дата.</param>
        /// <param name="toDate">До Дата.</param>
        /// <param name="courtNumber">Код на съд.</param>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeedSummary>> BulstatDeedsAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, int? courtNumber, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords)
        {
            return BulstatDeedsAsync(fromDate, toDate, courtNumber, page, pageSize, count, loadMaxNumberOfRecords, maxNumberOfRecords, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Търсене на Пререгистрирани търговци/ ЮЛНЦ.</summary>
        /// <param name="fromDate">От дата.</param>
        /// <param name="toDate">До Дата.</param>
        /// <param name="courtNumber">Код на съд.</param>
        /// <param name="loadMaxNumberOfRecords">Флаг указващ дали да се използва "Брой максимално допустими записи от върнат резултат" от конфигурационните параметри.</param>
        /// <param name="maxNumberOfRecords">Брой максимално допустими записи от върнат резултат.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeedSummary>> BulstatDeedsAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, int? courtNumber, int? page, int? pageSize, int? count, bool? loadMaxNumberOfRecords, int? maxNumberOfRecords, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/BulstatDeeds?");
            if (fromDate != null) 
            {
                urlBuilder_.Append("FromDate=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append("ToDate=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (courtNumber != null) 
            {
                urlBuilder_.Append("CourtNumber=").Append(System.Uri.EscapeDataString(ConvertToString(courtNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadMaxNumberOfRecords != null) 
            {
                urlBuilder_.Append("LoadMaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(loadMaxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxNumberOfRecords != null) 
            {
                urlBuilder_.Append("MaxNumberOfRecords=").Append(System.Uri.EscapeDataString(ConvertToString(maxNumberOfRecords, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<DeedSummary>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<DeedSummary>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<DeedSummary>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<DeedSummary>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка вписано обстоятелство или обявен акт.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="includeHistory">Флаг указващ дали да се включи история.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VerificationActsSubSearchCriteriaResult> VerificationActsAsync(string uic, bool? includeHistory)
        {
            return VerificationActsAsync(uic, includeHistory, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка вписано обстоятелство или обявен акт.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="includeHistory">Флаг указващ дали да се включи история.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<VerificationActsSubSearchCriteriaResult> VerificationActsAsync(string uic, bool? includeHistory, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/VerificationActs/{uic}?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeHistory != null) 
            {
                urlBuilder_.Append("includeHistory=").Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(VerificationActsSubSearchCriteriaResult); 
                            try
                            {
                                result_ = (VerificationActsSubSearchCriteriaResult)System.Convert.ChangeType(responseData_, typeof(VerificationActsSubSearchCriteriaResult));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(VerificationActsSubSearchCriteriaResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Справка за вписано обстоятелство или обявен акт</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeedVM> ActiveConditionAsync(string uic, string selectedFields, bool? includeHistory)
        {
            return ActiveConditionAsync(uic, selectedFields, includeHistory, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Справка за вписано обстоятелство или обявен акт</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DeedVM> ActiveConditionAsync(string uic, string selectedFields, bool? includeHistory, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/VerificationActs/{uic}/ActiveCondition?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            if (selectedFields != null) 
            {
                urlBuilder_.Append("SelectedFields=").Append(System.Uri.EscapeDataString(ConvertToString(selectedFields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHistory != null) 
            {
                urlBuilder_.Append("IncludeHistory=").Append(System.Uri.EscapeDataString(ConvertToString(includeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DeedVM); 
                            try
                            {
                                result_ = (DeedVM)System.Convert.ChangeType(responseData_, typeof(DeedVM));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeedVM);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на основни данни за партида.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeedSummary> Summary3Async(string uic)
        {
            return Summary3Async(uic, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на основни данни за партида.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DeedSummary> Summary3Async(string uic, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/Summary");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DeedSummary); 
                            try
                            {
                                result_ = (DeedSummary)System.Convert.ChangeType(responseData_, typeof(DeedSummary));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeedSummary);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за седалище.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<F005_Seat> SeatAsync(string uic)
        {
            return SeatAsync(uic, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за седалище.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<F005_Seat> SeatAsync(string uic, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/Seat");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(F005_Seat); 
                            try
                            {
                                result_ = (F005_Seat)System.Convert.ChangeType(responseData_, typeof(F005_Seat));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(F005_Seat);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за клонове на фирма.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CompanyBranchesAsync(string uic)
        {
            return CompanyBranchesAsync(uic, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за клонове на фирма.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> CompanyBranchesAsync(string uic, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/CompanyBranches");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = (object)System.Convert.ChangeType(responseData_, typeof(object));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за раздел.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubDeedSummary>> Summary4Async(string uic, SubUICTypes subUICType)
        {
            return Summary4Async(uic, subUICType, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за раздел.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubDeedSummary>> Summary4Async(string uic, SubUICTypes subUICType, System.Threading.CancellationToken cancellationToken)
        {
            if (subUICType == null)
                throw new System.ArgumentNullException("subUICType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/SubDeeds/{subUICType}/Summary");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUICType}", System.Uri.EscapeDataString(ConvertToString(subUICType, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<SubDeedSummary>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<SubDeedSummary>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<SubDeedSummary>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<SubDeedSummary>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на история на полета.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Field>> HistoryAllAsync(string uic, SubUICTypes subUICType, string subUic, string fieldIdent)
        {
            return HistoryAllAsync(uic, subUICType, subUic, fieldIdent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на история на полета.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Field>> HistoryAllAsync(string uic, SubUICTypes subUICType, string subUic, string fieldIdent, System.Threading.CancellationToken cancellationToken)
        {
            if (subUICType == null)
                throw new System.ArgumentNullException("subUICType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/SubDeeds/{subUICType}/Fields/{fieldIdent}/History?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUICType}", System.Uri.EscapeDataString(ConvertToString(subUICType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fieldIdent}", System.Uri.EscapeDataString(ConvertToString(fieldIdent, System.Globalization.CultureInfo.InvariantCulture)));
            if (subUic != null) 
            {
                urlBuilder_.Append("subUic=").Append(System.Uri.EscapeDataString(ConvertToString(subUic, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Field>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Field>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Field>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Field>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на история на полета.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Field>> HistoryAsync(string uic, SubUICTypes subUICType, string subUic, string fieldIdent)
        {
            return HistoryAsync(uic, subUICType, subUic, fieldIdent, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на история на полета.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Field>> HistoryAsync(string uic, SubUICTypes subUICType, string subUic, string fieldIdent, System.Threading.CancellationToken cancellationToken)
        {
            if (subUICType == null)
                throw new System.ArgumentNullException("subUICType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/SubDeeds/{subUICType}/{subUic}/Fields/{fieldIdent}/History");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUICType}", System.Uri.EscapeDataString(ConvertToString(subUICType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUic}", System.Uri.EscapeDataString(ConvertToString(subUic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fieldIdent}", System.Uri.EscapeDataString(ConvertToString(fieldIdent, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Field>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Field>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Field>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Field>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на документи към поле.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <param name="entryDate">Дата на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationDocumentInfo>> DocumentsAsync(string uic, SubUICTypes subUICType, string subUic, string fieldIdent, System.DateTimeOffset? entryDate)
        {
            return DocumentsAsync(uic, subUICType, subUic, fieldIdent, entryDate, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на документи към поле.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <param name="entryDate">Дата на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationDocumentInfo>> DocumentsAsync(string uic, SubUICTypes subUICType, string subUic, string fieldIdent, System.DateTimeOffset? entryDate, System.Threading.CancellationToken cancellationToken)
        {
            if (subUICType == null)
                throw new System.ArgumentNullException("subUICType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/SubDeeds/{subUICType}/Fields/{fieldIdent}/Documents?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUICType}", System.Uri.EscapeDataString(ConvertToString(subUICType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fieldIdent}", System.Uri.EscapeDataString(ConvertToString(fieldIdent, System.Globalization.CultureInfo.InvariantCulture)));
            if (subUic != null) 
            {
                urlBuilder_.Append("subUic=").Append(System.Uri.EscapeDataString(ConvertToString(subUic, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryDate != null) 
            {
                urlBuilder_.Append("entryDate=").Append(System.Uri.EscapeDataString(entryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationDocumentInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationDocumentInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationDocumentInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationDocumentInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на документи към поле.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <param name="entryDate">Дата на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationDocumentInfo>> Documents2Async(string uic, SubUICTypes subUICType, string subUic, string fieldIdent, System.DateTimeOffset? entryDate)
        {
            return Documents2Async(uic, subUICType, subUic, fieldIdent, entryDate, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на документи към поле.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <param name="subUICType">Тип раздел.</param>
        /// <param name="subUic">Идентификатор на раздел.</param>
        /// <param name="fieldIdent">Идентификатор на поле.</param>
        /// <param name="entryDate">Дата на вписване.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationDocumentInfo>> Documents2Async(string uic, SubUICTypes subUICType, string subUic, string fieldIdent, System.DateTimeOffset? entryDate, System.Threading.CancellationToken cancellationToken)
        {
            if (subUICType == null)
                throw new System.ArgumentNullException("subUICType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/SubDeeds/{subUICType}/{subUic}/Fields/{fieldIdent}/Documents?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUICType}", System.Uri.EscapeDataString(ConvertToString(subUICType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subUic}", System.Uri.EscapeDataString(ConvertToString(subUic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fieldIdent}", System.Uri.EscapeDataString(ConvertToString(fieldIdent, System.Globalization.CultureInfo.InvariantCulture)));
            if (entryDate != null) 
            {
                urlBuilder_.Append("entryDate=").Append(System.Uri.EscapeDataString(entryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationDocumentInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationDocumentInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationDocumentInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationDocumentInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на фирмено дело.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> ApplicationsAllAsync(string uic, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return ApplicationsAllAsync(uic, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на фирмено дело.</summary>
        /// <param name="uic">ЕИК.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationInfo>> ApplicationsAllAsync(string uic, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/{uic}/Applications?");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ApplicationInfo>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<ApplicationInfo>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<ApplicationInfo>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ApplicationInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на изявление.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> StatementsAsync(StatementSearchModes? mode, string fieldIdents, System.DateTimeOffset? fromActionDate, System.DateTimeOffset? toActionDate, int? year, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return StatementsAsync(mode, fieldIdents, fromActionDate, toActionDate, year, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на изявление.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> StatementsAsync(StatementSearchModes? mode, string fieldIdents, System.DateTimeOffset? fromActionDate, System.DateTimeOffset? toActionDate, int? year, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/Statements?");
            if (mode != null) 
            {
                urlBuilder_.Append("Mode=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fieldIdents != null) 
            {
                urlBuilder_.Append("FieldIdents=").Append(System.Uri.EscapeDataString(ConvertToString(fieldIdents, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromActionDate != null) 
            {
                urlBuilder_.Append("FromActionDate=").Append(System.Uri.EscapeDataString(fromActionDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toActionDate != null) 
            {
                urlBuilder_.Append("ToActionDate=").Append(System.Uri.EscapeDataString(toActionDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null) 
            {
                urlBuilder_.Append("Year=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Statement>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Statement>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Statement>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Statement>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Изчитане на партиди в стабилизация.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeedSummary>> StabilizationAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, string uIC, string name, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return StabilizationAsync(fromDate, toDate, uIC, name, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Изчитане на партиди в стабилизация.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeedSummary>> StabilizationAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, string uIC, string name, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/Stabilization?");
            if (fromDate != null) 
            {
                urlBuilder_.Append("FromDate=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append("ToDate=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null) 
            {
                urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<DeedSummary>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<DeedSummary>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<DeedSummary>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<DeedSummary>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на уведомления под НПО.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> NotificationsUnderNPOAsync(string uIC, string companyName, System.DateTimeOffset? entryDateFrom, System.DateTimeOffset? entryDateTo, NotificationTypes? notificationType, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return NotificationsUnderNPOAsync(uIC, companyName, entryDateFrom, entryDateTo, notificationType, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на уведомления под НПО.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> NotificationsUnderNPOAsync(string uIC, string companyName, System.DateTimeOffset? entryDateFrom, System.DateTimeOffset? entryDateTo, NotificationTypes? notificationType, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/NotificationsUnderNPO?");
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryDateFrom != null) 
            {
                urlBuilder_.Append("EntryDateFrom=").Append(System.Uri.EscapeDataString(entryDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryDateTo != null) 
            {
                urlBuilder_.Append("EntryDateTo=").Append(System.Uri.EscapeDataString(entryDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notificationType != null) 
            {
                urlBuilder_.Append("NotificationType=").Append(System.Uri.EscapeDataString(ConvertToString(notificationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = (object)System.Convert.ChangeType(responseData_, typeof(object));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на уведомления към партида.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DeedNotificationsAsync(string uIC, string companyName, System.DateTimeOffset? entryDateFrom, System.DateTimeOffset? entryDateTo, NotificationTypes? notificationType, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return DeedNotificationsAsync(uIC, companyName, entryDateFrom, entryDateTo, notificationType, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на уведомления към партида.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> DeedNotificationsAsync(string uIC, string companyName, System.DateTimeOffset? entryDateFrom, System.DateTimeOffset? entryDateTo, NotificationTypes? notificationType, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Deeds/DeedNotifications?");
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyName != null) 
            {
                urlBuilder_.Append("CompanyName=").Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryDateFrom != null) 
            {
                urlBuilder_.Append("EntryDateFrom=").Append(System.Uri.EscapeDataString(entryDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entryDateTo != null) 
            {
                urlBuilder_.Append("EntryDateTo=").Append(System.Uri.EscapeDataString(entryDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notificationType != null) 
            {
                urlBuilder_.Append("NotificationType=").Append(System.Uri.EscapeDataString(ConvertToString(notificationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = (object)System.Convert.ChangeType(responseData_, typeof(object));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за документ за неподадено заявление.</summary>
        /// <param name="docGuid">>Уникален идентификатор на документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> DownloadDocumentDraftAsync(string docGuid)
        {
            return DownloadDocumentDraftAsync(docGuid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за документ за неподадено заявление.</summary>
        /// <param name="docGuid">>Уникален идентификатор на документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> DownloadDocumentDraftAsync(string docGuid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Documents/Draft/{docGuid}");
            urlBuilder_.Replace("{docGuid}", System.Uri.EscapeDataString(ConvertToString(docGuid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на данни за документ.</summary>
        /// <param name="docGuid">Уникален идентификатор на документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> DownloadDocumentAsync(string docGuid)
        {
            return DownloadDocumentAsync(docGuid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на данни за документ.</summary>
        /// <param name="docGuid">Уникален идентификатор на документ.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> DownloadDocumentAsync(string docGuid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Documents/{docGuid}");
            urlBuilder_.Replace("{docGuid}", System.Uri.EscapeDataString(ConvertToString(docGuid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> DownloadCompanyCaseFileDocumentAsync(string uic, string docGuid)
        {
            return DownloadCompanyCaseFileDocumentAsync(uic, docGuid, System.Threading.CancellationToken.None);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> DownloadCompanyCaseFileDocumentAsync(string uic, string docGuid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Documents/{uic}/{docGuid}");
            urlBuilder_.Replace("{uic}", System.Uri.EscapeDataString(ConvertToString(uic, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{docGuid}", System.Uri.EscapeDataString(ConvertToString(docGuid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за създаване на запис с грешката.</summary>
        /// <param name="body">Съобщението, което трябва да се запише.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ErrorHandlingAsync(LogMessage body)
        {
            return ErrorHandlingAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за създаване на запис с грешката.</summary>
        /// <param name="body">Съобщението, което трябва да се запише.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ErrorHandlingAsync(LogMessage body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ErrorHandling");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на инструкции.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Instruction>> InstructionsAsync(string uIC, string incomingNumber, bool? isActiveWithoutDeed, InstructionSearchMode? mode, bool? loadIncomingLinkedDeeds, System.DateTimeOffset? applicationDateFrom, System.DateTimeOffset? applicationDateTo, int? page, int? pageSize, int? count, SortOrder? sortOrder)
        {
            return InstructionsAsync(uIC, incomingNumber, isActiveWithoutDeed, mode, loadIncomingLinkedDeeds, applicationDateFrom, applicationDateTo, page, pageSize, count, sortOrder, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на инструкции.</summary>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Instruction>> InstructionsAsync(string uIC, string incomingNumber, bool? isActiveWithoutDeed, InstructionSearchMode? mode, bool? loadIncomingLinkedDeeds, System.DateTimeOffset? applicationDateFrom, System.DateTimeOffset? applicationDateTo, int? page, int? pageSize, int? count, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Instructions?");
            if (uIC != null) 
            {
                urlBuilder_.Append("UIC=").Append(System.Uri.EscapeDataString(ConvertToString(uIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incomingNumber != null) 
            {
                urlBuilder_.Append("IncomingNumber=").Append(System.Uri.EscapeDataString(ConvertToString(incomingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isActiveWithoutDeed != null) 
            {
                urlBuilder_.Append("IsActiveWithoutDeed=").Append(System.Uri.EscapeDataString(ConvertToString(isActiveWithoutDeed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append("Mode=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loadIncomingLinkedDeeds != null) 
            {
                urlBuilder_.Append("LoadIncomingLinkedDeeds=").Append(System.Uri.EscapeDataString(ConvertToString(loadIncomingLinkedDeeds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (applicationDateFrom != null) 
            {
                urlBuilder_.Append("ApplicationDateFrom=").Append(System.Uri.EscapeDataString(applicationDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (applicationDateTo != null) 
            {
                urlBuilder_.Append("ApplicationDateTo=").Append(System.Uri.EscapeDataString(applicationDateTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append("Page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("Count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null) 
            {
                urlBuilder_.Append("SortOrder=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = (ApiError)System.Convert.ChangeType(responseData_, typeof(ApiError));
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Instruction>); 
                            try
                            {
                                result_ = (System.Collections.Generic.ICollection<Instruction>)System.Convert.ChangeType(responseData_, typeof(System.Collections.Generic.ICollection<Instruction>));
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Instruction>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Операция за изчитане на Полета, Групи и Раздели по правна форма.</summary>
        /// <param name="legalForm">Правна форма.</param>
        /// <param name="excludeActs">Флаг указващ дали да изключи актовете.</param>
        /// <param name="getOnlyActs">Флаг указващ дали да вземе само актове.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> FieldsGroupsSectionsAsync(int? legalForm, bool? excludeActs, bool? getOnlyActs)
        {
            return FieldsGroupsSectionsAsync(legalForm, excludeActs, getOnlyActs, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Операция за изчитане на Полета, Групи и Раздели по правна форма.</summary>
        /// <param name="legalForm">Правна форма.</param>
        /// <param name="excludeActs">Флаг указващ дали да изключи актовете.</param>
        /// <param name="getOnlyActs">Флаг указващ дали да вземе само актове.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> FieldsGroupsSectionsAsync(int? legalForm, bool? excludeActs, bool? getOnlyActs, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Nomenclatures/FieldsGroupsSections?");
            if (legalForm != null) 
            {
                urlBuilder_.Append("legalForm=").Append(System.Uri.EscapeDataString(ConvertToString(legalForm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeActs != null) 
            {
                urlBuilder_.Append("excludeActs=").Append(System.Uri.EscapeDataString(ConvertToString(excludeActs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getOnlyActs != null) 
            {
                urlBuilder_.Append("getOnlyActs=").Append(System.Uri.EscapeDataString(ConvertToString(getOnlyActs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiError>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiError); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiError>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ApiError>("Server Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>Модел на грешка.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApiError 
    {
        /// <summary>Код.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Съобщение.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        /// <summary>Описва къде в кода е възникнала грешката.</summary>
        [Newtonsoft.Json.JsonProperty("stackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }
    
        /// <summary>Вътрешни грешки.</summary>
        [Newtonsoft.Json.JsonProperty("innerErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> InnerErrors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApiError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiError>(data);
        }
    
    }
    
    /// <summary>Типове статуси на пакета.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ProcessStatuses
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
        _7 = 7,
    
        _8 = 8,
    
        _9 = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ApplicationFormTypes
    {
        _0 = 0,
    
        _101 = 101,
    
        _102 = 102,
    
        _103 = 103,
    
        _104 = 104,
    
        _105 = 105,
    
        _106 = 106,
    
        _107 = 107,
    
        _108 = 108,
    
        _109 = 109,
    
        _110 = 110,
    
        _111 = 111,
    
        _112 = 112,
    
        _113 = 113,
    
        _114 = 114,
    
        _116 = 116,
    
        _117 = 117,
    
        _118 = 118,
    
        _119 = 119,
    
        _120 = 120,
    
        _121 = 121,
    
        _122 = 122,
    
        _123 = 123,
    
        _124 = 124,
    
        _125 = 125,
    
        _126 = 126,
    
        _128 = 128,
    
        _132 = 132,
    
        _133 = 133,
    
        _134 = 134,
    
        _135 = 135,
    
        _136 = 136,
    
        _137 = 137,
    
        _138 = 138,
    
        _139 = 139,
    
        _140 = 140,
    
        _154 = 154,
    
        _155 = 155,
    
        _156 = 156,
    
        _157 = 157,
    
        _158 = 158,
    
        _159 = 159,
    
        _160 = 160,
    
        _161 = 161,
    
        _162 = 162,
    
        _201 = 201,
    
        _301 = 301,
    
        _302 = 302,
    
        _303 = 303,
    
        _304 = 304,
    
        _305 = 305,
    
        _401 = 401,
    
        _402 = 402,
    
        _403 = 403,
    
        _501 = 501,
    
        _601 = 601,
    
        _602 = 602,
    
        _603 = 603,
    
        _604 = 604,
    
        _605 = 605,
    
        _606 = 606,
    
        _607 = 607,
    
        _608 = 608,
    
        _609 = 609,
    
        _610 = 610,
    
        _611 = 611,
    
        _612 = 612,
    
        _613 = 613,
    
        _614 = 614,
    
        _615 = 615,
    
        _701 = 701,
    
        _801 = 801,
    
        _901 = 901,
    
        _1000 = 1000,
    
        _1101 = 1101,
    
        _1201 = 1201,
    
        _1301 = 1301,
    
        _1401 = 1401,
    
        _1501 = 1501,
    
        _1601 = 1601,
    
        _1701 = 1701,
    
        _1801 = 1801,
    
        _1901 = 1901,
    
        _2001 = 2001,
    
        _2101 = 2101,
    
        _10000 = 10000,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum JsonValueKind
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
        _7 = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JsonElement 
    {
        [Newtonsoft.Json.JsonProperty("valueKind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonValueKind ValueKind { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static JsonElement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonElement>(data);
        }
    
    }
    
    /// <summary>Модел на заявление.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Application 
    {
        /// <summary>Уникален идентификатор на заявление.</summary>
        [Newtonsoft.Json.JsonProperty("applicationID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApplicationID { get; set; }
    
        /// <summary>Идентификатор на данни за процеси на заявяване на услуга.</summary>
        [Newtonsoft.Json.JsonProperty("applicationProcessID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApplicationProcessID { get; set; }
    
        /// <summary>Тип на заявление.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? Type { get; set; }
    
        /// <summary>Номер на заявлението.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }
    
        /// <summary>Идентификатор на данни за съдържание на пакети (JSON).</summary>
        [Newtonsoft.Json.JsonProperty("applicationContentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApplicationContentID { get; set; }
    
        /// <summary>Съдържание.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonElement Content { get; set; }
    
        /// <summary>Допълнителни данни.</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> AdditionalData { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Application FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(data);
        }
    
    }
    
    /// <summary>Модел на данни за процеси на заявяване на услуга.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicationProcess 
    {
        /// <summary>Уникален идентификатор на данни за процеси на заявяване на услуга.</summary>
        [Newtonsoft.Json.JsonProperty("applicationProcessID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApplicationProcessID { get; set; }
    
        /// <summary>ЕИК.</summary>
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        /// <summary>Идентификатор на заявителя.</summary>
        [Newtonsoft.Json.JsonProperty("applicantID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApplicantID { get; set; }
    
        /// <summary>Статус на пакета: 1 - in_process; 2 - signing; 3 - signed;.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcessStatuses? Status { get; set; }
    
        /// <summary>Идентификатор на основно заявление.</summary>
        [Newtonsoft.Json.JsonProperty("mainApplicationID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MainApplicationID { get; set; }
    
        /// <summary>Тип на основно заявление.</summary>
        [Newtonsoft.Json.JsonProperty("mainApplicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? MainApplicationType { get; set; }
    
        /// <summary>Идентификатор на заявката за подписване в модула за подписване.</summary>
        [Newtonsoft.Json.JsonProperty("signingGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? SigningGuid { get; set; }
    
        /// <summary>Уникален идентификатор родителския процес за заявяване на услуга.</summary>
        [Newtonsoft.Json.JsonProperty("parentApplicationProcessID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ParentApplicationProcessID { get; set; }
    
        /// <summary>Списък със под процесите по заявяване на услуга.</summary>
        [Newtonsoft.Json.JsonProperty("childApplicationProcesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationProcess> ChildApplicationProcesses { get; set; }
    
        /// <summary>Списък със заявления.</summary>
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Application> Applications { get; set; }
    
        /// <summary>Флаг указващ, дали има промяна в първоначалните данни на заявлението.</summary>
        [Newtonsoft.Json.JsonProperty("hasChangeInApplicationsInitialData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasChangeInApplicationsInitialData { get; set; }
    
        /// <summary>Фла указващ, дали има промяна в номенклатурите след създаване на черновата.</summary>
        [Newtonsoft.Json.JsonProperty("hasChangesInApplicationsNomenclature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasChangesInApplicationsNomenclature { get; set; }
    
        /// <summary>Съобщение за грешка при обработката на процеса</summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        /// <summary>Входящ номер на заявлението в CR</summary>
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationProcess>(data);
        }
    
    }
    
    /// <summary>Заявка за създаване на заявление</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicationRequest 
    {
        /// <summary>Допълнителни данни</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> AdditionalData { get; set; }
    
        /// <summary>Тип на заявлението</summary>
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? ApplicationType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AttachedDocument 
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTypeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isOriginal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOriginal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reusedIncomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReusedIncomingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hashAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HashAlgorithm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberOfPages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApplicationDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("htmlTemplateContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlTemplateContent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signingGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? SigningGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isActWithErasedPersonalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActWithErasedPersonalData { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AttachedDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachedDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ObligationStatuses
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Registers
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ObligationInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("obligationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ObligationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("obligationAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ObligationAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObligationStatuses? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("paidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reversalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReversalAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("register", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Registers? Register { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Deadline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("callbackAddressID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CallbackAddressID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freeOfCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeOfCharge { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ObligationInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObligationInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ApplicationStatuses
    {
        _0 = 0,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
        _7 = 7,
    
        _8 = 8,
    
        _9 = 9,
    
        _10 = 10,
    
        _11 = 11,
    
        _12 = 12,
    
        _13 = 13,
    
        _14 = 14,
    
        _15 = 15,
    
        _16 = 16,
    
        _17 = 17,
    
        _18 = 18,
    
        _19 = 19,
    
        _20 = 20,
    
        _21 = 21,
    
        _22 = 22,
    
        _23 = 23,
    
        _24 = 24,
    
        _101 = 101,
    
        _102 = 102,
    
        _103 = 103,
    
        _104 = 104,
    
        _105 = 105,
    
        _106 = 106,
    
        _107 = 107,
    
        _108 = 108,
    
        _109 = 109,
    
        _110 = 110,
    
        _111 = 111,
    
        _112 = 112,
    
        _113 = 113,
    
        _114 = 114,
    
        _115 = 115,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PassedFrom
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ApplicationState
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RefusalTypes
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        __1 = -1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum LegalForms
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
        _7 = 7,
    
        _8 = 8,
    
        _9 = 9,
    
        _10 = 10,
    
        _11 = 11,
    
        _12 = 12,
    
        _13 = 13,
    
        _14 = 14,
    
        _15 = 15,
    
        _16 = 16,
    
        _17 = 17,
    
        _18 = 18,
    
        _19 = 19,
    
        _20 = 20,
    
        _21 = 21,
    
        _22 = 22,
    
        _23 = 23,
    
        _24 = 24,
    
        _25 = 25,
    
        _26 = 26,
    
        _27 = 27,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DeedStatuses
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CompanyNameSuffixFlags
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _8 = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ElementHolderAdditionFlags
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeedSummary 
    {
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegalForms? LegalForm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeedStatuses? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasCompanyCases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCompanyCases { get; set; }
    
        [Newtonsoft.Json.JsonProperty("courtNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CourtNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaseYear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyNameSuffixFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyNameSuffixFlags? CompanyNameSuffixFlag { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elementHolderAdditionFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementHolderAdditionFlags? ElementHolderAdditionFlag { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DeedSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeedSummary>(data);
        }
    
    }
    
    /// <summary>Информация за заявление.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicationInfo 
    {
        /// <summary>Входящ номер на заявление с контекстна информация.</summary>
        [Newtonsoft.Json.JsonProperty("incomingNumberWithCtx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumberWithCtx { get; set; }
    
        /// <summary>Входящ номер на заявление.</summary>
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumber { get; set; }
    
        /// <summary>Име на типа на заявлението.</summary>
        [Newtonsoft.Json.JsonProperty("applicationTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationTypeName { get; set; }
    
        /// <summary>Тип на заявление.</summary>
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? ApplicationType { get; set; }
    
        /// <summary>Статус на заявлението.</summary>
        [Newtonsoft.Json.JsonProperty("applicationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationStatuses? ApplicationStatus { get; set; }
    
        /// <summary>Място на подаване на заявлението.</summary>
        [Newtonsoft.Json.JsonProperty("passedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PassedFrom? PassedFrom { get; set; }
    
        /// <summary>Статус на пакета</summary>
        [Newtonsoft.Json.JsonProperty("applicationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationState? ApplicationState { get; set; }
    
        /// <summary>Име на офиса</summary>
        [Newtonsoft.Json.JsonProperty("officeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EntryDate { get; set; }
    
        /// <summary>Дата на входиране на заявление.</summary>
        [Newtonsoft.Json.JsonProperty("registrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationDate { get; set; }
    
        /// <summary>Входящ номер на заявлението</summary>
        [Newtonsoft.Json.JsonProperty("entryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryNumber { get; set; }
    
        /// <summary>Вид на отказа ако иама отказ</summary>
        [Newtonsoft.Json.JsonProperty("refusalType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RefusalTypes? RefusalType { get; set; }
    
        /// <summary>Номер на изходящ документ</summary>
        [Newtonsoft.Json.JsonProperty("outgoingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutgoingNumber { get; set; }
    
        /// <summary>HTML резилтат от изпълнението на заявлението.</summary>
        [Newtonsoft.Json.JsonProperty("resultHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultHTML { get; set; }
    
        /// <summary>Партиди подадени за вписване в заявлението</summary>
        [Newtonsoft.Json.JsonProperty("incomingLinkedDeeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeedSummary> IncomingLinkedDeeds { get; set; }
    
        /// <summary>Партиди по които заявлението вписва данни</summary>
        [Newtonsoft.Json.JsonProperty("entryDeeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeedSummary> EntryDeeds { get; set; }
    
        /// <summary>Дали има активна комуникация за текущата регистрация</summary>
        [Newtonsoft.Json.JsonProperty("hasRequestsForCorrectionForScanning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasRequestsForCorrectionForScanning { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum IndentTypes
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PersonType
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Person 
    {
        [Newtonsoft.Json.JsonProperty("indent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Indent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("indentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndentTypes? IndentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CountryID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("competentAuthorityForRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompetentAuthorityForRegistration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("foreignRegisterCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignRegisterCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("foreignLegalFormCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignLegalFormCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCodeBRIS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCodeBRIS { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalForm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isForeignTrader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsForeignTrader { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameAndLegalFormText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameAndLegalFormText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Person FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Person>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BirthPlace 
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("place", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Place { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BirthPlace FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BirthPlace>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Address 
    {
        [Newtonsoft.Json.JsonProperty("countryID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CountryID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isForeign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsForeign { get; set; }
    
        /// <summary>област</summary>
        [Newtonsoft.Json.JsonProperty("districtID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DistrictID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("districtEkatte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictEkatte { get; set; }
    
        [Newtonsoft.Json.JsonProperty("district", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string District { get; set; }
    
        /// <summary>община</summary>
        [Newtonsoft.Json.JsonProperty("municipalityid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Municipalityid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("municipalityEkatte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipalityEkatte { get; set; }
    
        [Newtonsoft.Json.JsonProperty("municipality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Municipality { get; set; }
    
        /// <summary>населено място</summary>
        [Newtonsoft.Json.JsonProperty("settlementID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SettlementID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settlementEKATTE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettlementEKATTE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settlement { get; set; }
    
        /// <summary>район</summary>
        [Newtonsoft.Json.JsonProperty("areaID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AreaID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Area { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaEkatte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaEkatte { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("foreignPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignPlace { get; set; }
    
        /// <summary>квартал</summary>
        [Newtonsoft.Json.JsonProperty("housingEstate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HousingEstate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entrance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entrance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Floor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("apartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apartment { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Address FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Passport 
    {
        [Newtonsoft.Json.JsonProperty("issuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IssuedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuedFrom { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Passport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Passport>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Deputy 
    {
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Deputy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Deputy>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Applicant 
    {
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Person Person { get; set; }
    
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BirthPlace BirthPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("passport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Passport Passport { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deputy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Deputy Deputy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicantGuid { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Applicant FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Applicant>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Applicants 
    {
        [Newtonsoft.Json.JsonProperty("applicantsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Applicant> ApplicantsList { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Applicants FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Applicants>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicantCapacity 
    {
        /// <summary>Търговец</summary>
        [Newtonsoft.Json.JsonProperty("trader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Trader { get; set; }
    
        /// <summary>Адвокат и изрично пълномощно</summary>
        [Newtonsoft.Json.JsonProperty("lawyerWithLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LawyerWithLetter { get; set; }
    
        /// <summary>Друго лице в предвидените от закона случаи</summary>
        [Newtonsoft.Json.JsonProperty("anotherFace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AnotherFace { get; set; }
    
        /// <summary>Счетоводител, който подава годишен отчет</summary>
        [Newtonsoft.Json.JsonProperty("financialAccountCreator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FinancialAccountCreator { get; set; }
    
        /// <summary>Заявител по първоначалното искане</summary>
        [Newtonsoft.Json.JsonProperty("assignmentApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AssignmentApplicant { get; set; }
    
        /// <summary>Назначено лице</summary>
        [Newtonsoft.Json.JsonProperty("assignedExpert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AssignedExpert { get; set; }
    
        /// <summary>Адвокат на заявителя с изрично пълномощно</summary>
        [Newtonsoft.Json.JsonProperty("applicantLawyerWithPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplicantLawyerWithPower { get; set; }
    
        /// <summary>Прокурист</summary>
        [Newtonsoft.Json.JsonProperty("procurator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Procurator { get; set; }
    
        /// <summary>лице, представляващо фондацията</summary>
        [Newtonsoft.Json.JsonProperty("personRepresentingTheFoundation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingTheFoundation { get; set; }
    
        /// <summary>лице, представляващо сдружението</summary>
        [Newtonsoft.Json.JsonProperty("personRepresentingTheAssociation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingTheAssociation { get; set; }
    
        /// <summary>лице, представляващо читалището</summary>
        [Newtonsoft.Json.JsonProperty("personRepresentingCommunityCentrer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingCommunityCentrer { get; set; }
    
        /// <summary>лице, представляващо клон на чуждестранно юридическо лице с нестопанска цел</summary>
        [Newtonsoft.Json.JsonProperty("personRepresentingBranchOfNonProfitForeignLegalEntity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingBranchOfNonProfitForeignLegalEntity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicantCapacity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicantCapacity>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicantRepresentative 
    {
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Person Person { get; set; }
    
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BirthPlace BirthPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("passport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Passport Passport { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deputy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Deputy Deputy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicantRepresentative FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicantRepresentative>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicantInfo 
    {
        [Newtonsoft.Json.JsonProperty("applicants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Applicants Applicants { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicantCapacity ApplicantCapacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantRepresentative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicantRepresentative ApplicantRepresentative { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicantInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicantInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicantExchange 
    {
        [Newtonsoft.Json.JsonProperty("agree", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Agree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notAgree", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NotAgree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nrA_Art_100_1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NrA_Art_100_1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nrA_Art_100_2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NrA_Art_100_2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("addresseeGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddresseeGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("addressee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addressee { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicantExchange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicantExchange>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GDPRAgreement 
    {
        [Newtonsoft.Json.JsonProperty("gdprAgreementText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GdprAgreementText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isGDPRAgreementAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGDPRAgreementAccepted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GDPRAgreement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GDPRAgreement>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicationFormBase 
    {
        [Newtonsoft.Json.JsonProperty("appType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes AppType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicantInfo ApplicantInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicantExchange ApplicantExchange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gdprAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GDPRAgreement GdprAgreement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachedDocument> Documents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationFormBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationFormBase>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FileMetadata 
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("guidSpecified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GuidSpecified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileNameSpecified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FileNameSpecified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentTypeSpecified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ContentTypeSpecified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sizeAttribute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SizeAttribute { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sizeAttributeSpecified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SizeAttributeSpecified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hashAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HashAlgorithm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hashAlgorithmSpecified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HashAlgorithmSpecified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberOfPages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfPagesAttribute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfPagesAttribute { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfPagesAttributeSpecified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NumberOfPagesAttributeSpecified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Hash { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FileMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicationDocumentInfo 
    {
        /// <summary>Уникален идентификатор на документа с контекстна информация.</summary>
        [Newtonsoft.Json.JsonProperty("guidWithCtx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GuidWithCtx { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalIncomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalIncomingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSigned { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTypeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isOriginal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOriginal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reusedIncomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReusedIncomingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationDocumentInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationDocumentInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OutgoingDocument 
    {
        /// <summary>Уникален идентификатор на документа с контекстна информация.</summary>
        [Newtonsoft.Json.JsonProperty("guidWithCtx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GuidWithCtx { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outgoingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutgoingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outgoingGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutgoingGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTypeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OutgoingDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutgoingDocument>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SortOrder
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    /// <summary>Входиране.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Entry 
    {
        /// <summary>Дата.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>ЕИК.</summary>
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        /// <summary>Пълноиме на фирма.</summary>
        [Newtonsoft.Json.JsonProperty("companyFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFullName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Entry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Entry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BankruptcyEntriesTypes
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AssignedExpertSummary 
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("egn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Egn { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AssignedExpertSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignedExpertSummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AssignmentSummary 
    {
        [Newtonsoft.Json.JsonProperty("assignmentExpertType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AssignmentExpertType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignmentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AssignmentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("experts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssignedExpertSummary> Experts { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AssignmentSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssignmentSummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MasterAssignmentSearchSearchMode
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BulstatSummary 
    {
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("districtEkatteCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictEkatteCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("municipalityEkatteCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipalityEkatteCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settlementEkatteCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettlementEkatteCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaEkatteCote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaEkatteCote { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("housingEstate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HousingEstate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entrance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entrance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildingFloor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingFloor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("appartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Appartment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompanyType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("courtCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourtCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaseNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaseYear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalForm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalFormID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LegalFormID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BulstatSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulstatSummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommunicationPerson 
    {
        [Newtonsoft.Json.JsonProperty("indent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Indent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CommunicationPerson FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommunicationPerson>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommunicationBirthPlace 
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("place", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Place { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CommunicationBirthPlace FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommunicationBirthPlace>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommunicationAddress 
    {
        [Newtonsoft.Json.JsonProperty("countryID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CountryID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isForeign", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsForeign { get; set; }
    
        [Newtonsoft.Json.JsonProperty("districtID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DistrictID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("districtEkatte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictEkatte { get; set; }
    
        [Newtonsoft.Json.JsonProperty("district", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string District { get; set; }
    
        [Newtonsoft.Json.JsonProperty("municipalityid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Municipalityid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("municipalityEkatte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipalityEkatte { get; set; }
    
        [Newtonsoft.Json.JsonProperty("municipality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Municipality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settlementID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SettlementID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settlementEKATTE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettlementEKATTE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settlement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AreaID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Area { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaEkatte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaEkatte { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("foreignPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("housingEstate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HousingEstate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entrance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entrance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Floor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("apartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apartment { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CommunicationAddress FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommunicationAddress>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommunicationApplicant 
    {
        [Newtonsoft.Json.JsonProperty("applicantGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicantGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationPerson Person { get; set; }
    
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationBirthPlace BirthPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationAddress Address { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CommunicationApplicant FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommunicationApplicant>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommunicationApplicantCapacity 
    {
        [Newtonsoft.Json.JsonProperty("trader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Trader { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lawyerWithLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LawyerWithLetter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("anotherFace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AnotherFace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("financialAccountCreator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FinancialAccountCreator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignmentApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AssignmentApplicant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignedExpert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AssignedExpert { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantLawyerWithPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplicantLawyerWithPower { get; set; }
    
        [Newtonsoft.Json.JsonProperty("procurator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Procurator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personRepresentingTheFoundation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingTheFoundation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personRepresentingTheAssociation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingTheAssociation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personRepresentingCommunityCentrer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingCommunityCentrer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personRepresentingBranchOfNonProfitForeignLegalEntity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PersonRepresentingBranchOfNonProfitForeignLegalEntity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CommunicationApplicantCapacity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommunicationApplicantCapacity>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RequestForCorrectionForScanning 
    {
        [Newtonsoft.Json.JsonProperty("applicant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationApplicant Applicant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicantCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationApplicantCapacity ApplicantCapacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("communicationNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommunicationNote { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RequestForCorrectionForScanning FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestForCorrectionForScanning>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompanySummary 
    {
        [Newtonsoft.Json.JsonProperty("entryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IncomingID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingTypeID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IncomingTypeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deedGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeedGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outgoingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutgoingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasRefusalByIncNum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasRefusalByIncNum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CompanySummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompanySummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransformingCompanySummary 
    {
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransformingCompanySummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransformingCompanySummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SuccessorCompanySummary 
    {
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SuccessorCompanySummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SuccessorCompanySummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransformationSummary 
    {
        [Newtonsoft.Json.JsonProperty("transformingCompanies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransformingCompanySummary> TransformingCompanies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("successors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SuccessorCompanySummary> Successors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mainApplicationFormType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? MainApplicationFormType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransformationSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransformationSummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompanyInfo 
    {
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trasnliteration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trasnliteration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestedPerson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestedAs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActiveFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActiveTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eraseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EraseDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CompanyInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompanyInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TreeNode 
    {
        [Newtonsoft.Json.JsonProperty("parentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("selected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Selected { get; set; }
    
        [Newtonsoft.Json.JsonProperty("intermediateState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IntermediateState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isExtended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExtended { get; set; }
    
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TreeNode> Children { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TreeNode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeNode>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TreeNodeCollection 
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TreeNode> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TreeNodeCollection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TreeNodeCollection>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SubUICTypes
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
        _7 = 7,
    
        _8 = 8,
    
        _9 = 9,
    
        _10 = 10,
    
        _11 = 11,
    
        _12 = 12,
    
        _13 = 13,
    
        _14 = 14,
    
        _15 = 15,
    
        _79 = 79,
    
        _100 = 100,
    
        _132 = 132,
    
        _133 = 133,
    
        _200 = 200,
    
        _301 = 301,
    
        _303 = 303,
    
        _351 = 351,
    
        _401 = 401,
    
        _450 = 450,
    
        _451 = 451,
    
        _452 = 452,
    
        _456 = 456,
    
        _457 = 457,
    
        _500 = 500,
    
        _501 = 501,
    
        _601 = 601,
    
        _602 = 602,
    
        _666 = 666,
    
        _701 = 701,
    
        _801 = 801,
    
        _901 = 901,
    
        _910 = 910,
    
        _920 = 920,
    
        _930 = 930,
    
        _940 = 940,
    
        _950 = 950,
    
        _960 = 960,
    
        _970 = 970,
    
        _980 = 980,
    
        _990 = 990,
    
        _1000 = 1000,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SubDeedStatuses
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FieldOperations
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
    }
    
    /// <summary>Модел на поле.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Field 
    {
        /// <summary>Код на ресурс за името на полето.</summary>
        [Newtonsoft.Json.JsonProperty("nameCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameCode { get; set; }
    
        /// <summary>HTML данни.</summary>
        [Newtonsoft.Json.JsonProperty("htmlData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlData { get; set; }
    
        /// <summary>Номер на вписване, с който е вписано полето.</summary>
        [Newtonsoft.Json.JsonProperty("fieldEntryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldEntryNumber { get; set; }
    
        /// <summary>Дата на първоначално вписване.</summary>
        [Newtonsoft.Json.JsonProperty("recordMinActionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RecordMinActionDate { get; set; }
    
        /// <summary>Дата на последно вписване.</summary>
        [Newtonsoft.Json.JsonProperty("fieldEntryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FieldEntryDate { get; set; }
    
        /// <summary>Дата на</summary>
        [Newtonsoft.Json.JsonProperty("fieldActionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FieldActionDate { get; set; }
    
        /// <summary>Идентификатор на полета.</summary>
        [Newtonsoft.Json.JsonProperty("fieldIdent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldIdent { get; set; }
    
        /// <summary>Операция на полето.</summary>
        [Newtonsoft.Json.JsonProperty("fieldOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldOperations? FieldOperation { get; set; }
    
        /// <summary>Тип на заявлението с което е вписано полето</summary>
        [Newtonsoft.Json.JsonProperty("entryApplicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? EntryApplicationType { get; set; }
    
        /// <summary>Поредност.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Field FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Field>(data);
        }
    
    }
    
    /// <summary>Модел на група.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Group 
    {
        /// <summary>Идентификатор на групата.</summary>
        [Newtonsoft.Json.JsonProperty("groupID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupID { get; set; }
    
        /// <summary>Код на ресурс за името на групата.</summary>
        [Newtonsoft.Json.JsonProperty("nameCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameCode { get; set; }
    
        /// <summary>Поредност.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }
    
        /// <summary>Полета.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Field> Fields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Group FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Group>(data);
        }
    
    }
    
    /// <summary>Модел на раздел.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SubDeedVM 
    {
        /// <summary>Идентификатор на раздел.</summary>
        [Newtonsoft.Json.JsonProperty("subUIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubUIC { get; set; }
    
        /// <summary>Тип раздел.</summary>
        [Newtonsoft.Json.JsonProperty("subUICType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubUICTypes SubUICType { get; set; }
    
        /// <summary>Статус на раздела.</summary>
        [Newtonsoft.Json.JsonProperty("subDeedStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubDeedStatuses SubDeedStatus { get; set; }
    
        /// <summary>Име за линк, който след натискане се разгъва и показва допълнителна информация.</summary>
        [Newtonsoft.Json.JsonProperty("colapsableLinkName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColapsableLinkName { get; set; }
    
        /// <summary>Име на секция.</summary>
        [Newtonsoft.Json.JsonProperty("sectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectionName { get; set; }
    
        /// <summary>Флаг, указващ дали раздела е затворен.</summary>
        [Newtonsoft.Json.JsonProperty("subDeedIsClosed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SubDeedIsClosed { get; set; }
    
        /// <summary>Групи.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Group> Groups { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SubDeedVM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubDeedVM>(data);
        }
    
    }
    
    /// <summary>Модел на секция.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Section 
    {
        /// <summary>Тип раздел.</summary>
        [Newtonsoft.Json.JsonProperty("subUICType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubUICTypes? SubUICType { get; set; }
    
        /// <summary>Код на име на раздел.</summary>
        [Newtonsoft.Json.JsonProperty("nameCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameCode { get; set; }
    
        /// <summary>Поредност на секцията.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }
    
        /// <summary>Раздели.</summary>
        [Newtonsoft.Json.JsonProperty("subDeeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SubDeedVM> SubDeeds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Section FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Section>(data);
        }
    
    }
    
    /// <summary>Модел на партида.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeedVM 
    {
        /// <summary>Статус на партида.</summary>
        [Newtonsoft.Json.JsonProperty("deedStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeedStatuses DeedStatus { get; set; }
    
        /// <summary>Име на фирма.</summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        /// <summary>Уникален идентификатор.</summary>
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }
    
        /// <summary>ЕИК.</summary>
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        /// <summary>ЕИК с контекстна информация.</summary>
        [Newtonsoft.Json.JsonProperty("uicWithCtx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UicWithCtx { get; set; }
    
        /// <summary>Правна форма.</summary>
        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegalForms? LegalForm { get; set; }
    
        /// <summary>Наставка след името на компанията, указваща дали компанията е в ликвидация, несъстоятелност или нито едното.</summary>
        [Newtonsoft.Json.JsonProperty("companyNameSuffixFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyNameSuffixFlags? CompanyNameSuffixFlag { get; set; }
    
        /// <summary>Флаг, указващ дали полетата от заявлението, за които се отнася, са с прекратени правомощия или лишени от разпоредителна власт.</summary>
        [Newtonsoft.Json.JsonProperty("elementHolderAdditionFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementHolderAdditionFlags? ElementHolderAdditionFlag { get; set; }
    
        /// <summary>Секции.</summary>
        [Newtonsoft.Json.JsonProperty("sections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Section> Sections { get; set; }
    
        /// <summary>Дата на справката.</summary>
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EntryDate { get; set; }
    
        /// <summary>Пълно име.</summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasInstructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAssignments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasCompanyCasees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCompanyCasees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasLegalFormChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasLegalFormChange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasNotifications { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DeedVM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeedVM>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SubDeed 
    {
        [Newtonsoft.Json.JsonProperty("subUIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubUIC { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subUICType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubUICTypes? SubUICType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubDeedStatuses? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Fields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SubDeed FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubDeed>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Deed 
    {
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegalForms? LegalForm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeedStatuses? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyNameSuffixFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyNameSuffixFlags? CompanyNameSuffixFlag { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elementHolderAdditionFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElementHolderAdditionFlags? ElementHolderAdditionFlag { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasCompanyCases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCompanyCases { get; set; }
    
        [Newtonsoft.Json.JsonProperty("courtNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CourtNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaseYear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isTranfsormedWithLegalFormChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTranfsormedWithLegalFormChanged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasInstructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAssignments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasNotifications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subDeeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SubDeed> SubDeeds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linkedDeeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeedSummary> LinkedDeeds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Deed FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Deed>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SortColumnsWithOrder
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompanyInfoVM 
    {
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trasnliteration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trasnliteration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalFormName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalFormName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestedPerson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestedAs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActiveFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActiveTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("erasedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ErasedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CompanyInfoVM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompanyInfoVM>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProtectedRightsCompanyInfo 
    {
        [Newtonsoft.Json.JsonProperty("foundIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FoundIn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trasnliteration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trasnliteration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalFormName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalFormName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestedPerson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestedAs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActiveFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActiveTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("erasedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ErasedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProtectedRightsCompanyInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProtectedRightsCompanyInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PhysicalOrCompanyObj 
    {
        [Newtonsoft.Json.JsonProperty("isPhysical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPhysical { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ident { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFullName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PhysicalOrCompanyObj FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PhysicalOrCompanyObj>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SubjectInFieldTypes
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SubjectInFieldItem 
    {
        [Newtonsoft.Json.JsonProperty("companyFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyNameSuffixFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyNameSuffixFlag { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mandateText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MandateText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SubjectInFieldItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubjectInFieldItem>(data);
        }
    
    }
    
    /// <summary>Резултат от справка вписано обстоятелство или обявен акт.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VerificationActsSubSearchCriteriaResult 
    {
        /// <summary>ЕИК.</summary>
        [Newtonsoft.Json.JsonProperty("uic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uic { get; set; }
    
        /// <summary>Пълно име на фирма.</summary>
        [Newtonsoft.Json.JsonProperty("companyFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFullName { get; set; }
    
        /// <summary>Клонове.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TreeNodeCollection Nodes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static VerificationActsSubSearchCriteriaResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VerificationActsSubSearchCriteriaResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Contacts 
    {
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EMail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Contacts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contacts>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RecordOperations
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum EraseOperations
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class F005_Seat 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts Contacts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldEntryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldEntryNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recordMinActionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RecordMinActionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldEntryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FieldEntryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldActionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FieldActionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldOperations? FieldOperation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entryApplicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationFormTypes? EntryApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldIdent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldIdent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recordOperation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecordOperations RecordOperation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recordID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eraseOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EraseOperations? EraseOperation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonElement InitialState { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static F005_Seat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<F005_Seat>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SubDeedSummary 
    {
        [Newtonsoft.Json.JsonProperty("subUIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubUIC { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subUICType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubUICTypes? SubUICType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubDeedStatuses? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SubDeedSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubDeedSummary>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum StatementSearchModes
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Statement 
    {
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EntryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldIdent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldIdent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actModeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActModeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actDocumentGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActDocumentGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActYear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeedSummary Deeds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Statement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Statement>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum NotificationTypes
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum LevelTypes
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LogMessageData 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LogMessageData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LogMessageData>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LogMessage 
    {
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }
    
        [Newtonsoft.Json.JsonProperty("levelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LevelTypes? LevelType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loggerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoggerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogMessageData> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LogMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LogMessage>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum InstructionSearchMode
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum InstructionTypes
    {
        _0 = 0,
    
        __1 = -1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IndexedField 
    {
        [Newtonsoft.Json.JsonProperty("fieldIdent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldIdent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ident { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static IndexedField FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexedField>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Instruction 
    {
        [Newtonsoft.Json.JsonProperty("incomingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructionReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstructionReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructionDocGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstructionDocGuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstructionTypes? InstructionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InstructionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxWaitInstructionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaxWaitInstructionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationInstructionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationInstructionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("incomingLinkedDeeds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeedSummary> IncomingLinkedDeeds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("waitingTransformationCompanies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IndexedField> WaitingTransformationCompanies { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Instruction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Instruction>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Body 
    {
        /// <summary>Файлово съдържание.</summary>
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Body FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}